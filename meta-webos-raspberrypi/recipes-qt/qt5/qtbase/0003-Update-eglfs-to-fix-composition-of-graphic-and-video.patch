From 03812c21424fc01ad3633336573ba754301bcdf8 Mon Sep 17 00:00:00 2001
From: Jaehoon Lee <jaehoon85.lee@lge.com>
Date: Wed, 1 Apr 2020 09:30:28 +0900
Subject: [PATCH] Update eglfs to fix composition of graphic and video plane in
 Qt 5.12.3

:Release Notes:
Update eglfs to fix composition of graphic and video plane in Qt 5.12.3

:Detailed Notes:
In Qt 5.12.3, eglfs is different from previous verions
in that it sets primary plane to render graphics.
Since this settings causes composition problem
between graphics and video in webOS,
the configuration is changed to set overlay plane
for rendering graphics.

:Testing Performed:
HTML5 video and Youtube playback has been tested
in Rpi3.

:QA Notes:

:Issues Addressed:
[PLAT-79909] [Qt 5.12][RPi] Youtube playback is not working

Upstream-Status: Inappropriate [webOS specific]

Change-Id: Iecfd351a37c630b1ea766e388400caccd3ab483e
---
 src/platformsupport/kmsconvenience/qkmsdevice.cpp     | 11 ++++-------
 .../eglfs_kms/qeglfskmsgbmscreen.cpp                  |  9 ++++-----
 2 files changed, 8 insertions(+), 12 deletions(-)

diff --git a/src/platformsupport/kmsconvenience/qkmsdevice.cpp b/src/platformsupport/kmsconvenience/qkmsdevice.cpp
index f66b4d63f1..3e6f14e961 100644
--- a/src/platformsupport/kmsconvenience/qkmsdevice.cpp
+++ b/src/platformsupport/kmsconvenience/qkmsdevice.cpp
@@ -351,7 +351,7 @@ QPlatformScreen *QKmsDevice::createScreenForConnector(drmModeResPtr resources,
     }
     qCDebug(qLcKmsDebug) << "Physical size is" << physSize << "mm" << "for output" << connectorName;
 
-    const QByteArray formatStr = userConnectorConfig.value(QStringLiteral("format"), QString())
+    const QByteArray formatStr = userConnectorConfig.value(QStringLiteral("format"), QStringLiteral("argb8888"))
             .toByteArray().toLower();
     uint32_t drmFormat;
     bool drmFormatExplicit = true;
@@ -450,7 +450,7 @@ QPlatformScreen *QKmsDevice::createScreenForConnector(drmModeResPtr resources,
 
             // Choose the first primary plane that is not already assigned to
             // another screen's associated crtc.
-            if (!output.eglfs_plane && plane.type == QKmsPlane::PrimaryPlane && !plane.activeCrtcId)
+            if (!output.eglfs_plane && plane.type == QKmsPlane::OverlayPlane && !plane.activeCrtcId)
                 assignPlane(&output, &plane);
         }
     }
@@ -489,14 +489,11 @@ QPlatformScreen *QKmsDevice::createScreenForConnector(drmModeResPtr resources,
         }
     }
 
-    output.wants_forced_plane = true;
+
     if (output.eglfs_plane) {
         qCDebug(qLcKmsDebug, "Output eglfs plane is: %d", output.eglfs_plane->id);
-        
-    } else {
-        output.eglfs_plane = &(output.available_planes.back());
     }
-    output.forced_plane_id = output.eglfs_plane->id;
+
 
 #if QT_CONFIG(drm_atomic)
     if (hasAtomicSupport() && !output.eglfs_plane) {
diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmscreen.cpp b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmscreen.cpp
index d64d1c8140..83dd6ccec4 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmscreen.cpp
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmscreen.cpp
@@ -91,16 +91,15 @@ QEglFSKmsGbmScreen::FrameBuffer *QEglFSKmsGbmScreen::framebufferForBufferObject(
 
     uint32_t width = gbm_bo_get_width(bo);
     uint32_t height = gbm_bo_get_height(bo);
-    uint32_t bo_handle = gbm_bo_get_handle(bo).u32;
-    uint32_t pitch = gbm_bo_get_stride(bo);
+    uint32_t handles[4] = { gbm_bo_get_handle(bo).u32 };
+    uint32_t strides[4] = { gbm_bo_get_stride(bo) };
+    uint32_t offsets[4] = { 0 };
     uint32_t pixelFormat = gbmFormatToDrmFormat(gbm_bo_get_format(bo));
-    uint8_t depth = 24;
-    uint8_t bpp = 32;
 
     QScopedPointer<FrameBuffer> fb(new FrameBuffer);
     qCDebug(qLcEglfsKmsDebug, "Adding FB, size %ux%u, DRM format 0x%x", width, height, pixelFormat);
 
-    int ret = drmModeAddFB(device()->fd(), width, height, depth, bpp, pitch, bo_handle, &fb->fb);
+    int ret = drmModeAddFB2(device()->fd(), width, height, pixelFormat, handles, strides, offsets, &fb->fb, 0);
 
     if (ret) {
         qWarning("Failed to create KMS FB!");
