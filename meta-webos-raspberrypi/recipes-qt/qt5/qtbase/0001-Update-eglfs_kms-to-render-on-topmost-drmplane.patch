From bd5f227803773f6b8f35dd2b5b429252be611667 Mon Sep 17 00:00:00 2001
From: Jaehoon Lee <jaehoon85.lee@lge.com>
Date: Wed, 24 Apr 2019 10:19:27 +0000
Subject: [PATCH] Update eglfs_kms to render on topmost drmplane

:Release Notes:
Update eglfs_kms to render on topmost drmplane

:Detailed Notes:
eglfs_kms screens directly write to scanout buffer
a.k.a crtc plane. This causes graphics to display
behind video overlays. With this CL graphics will
use the topmost plane for all crtcs.

With Qt 5.12 upgrade:
Changed Qt to use topmost plane for rendering

:Testing Performed:
Tested with modetest app to to display patterns on
lower planes to confirm that LSM displays above all
the patterns on HDMI output.

:QA Notes:

:Issues Addressed:
[PLAT-41583] Support output resolution change on webOS RPi

Change-Id: Ic898dbde7a19f20a2f38f63d79ef0166970ef498
Upstream-Status: Inappropriate [webOS specific]
---
 .../kmsconvenience/qkmsdevice.cpp             | 15 +--
 .../eglfs_kms/qeglfskmsgbmintegration.cpp     |  2 +-
 .../eglfs_kms/qeglfskmsgbmscreen.cpp          | 91 ++++---------------
 3 files changed, 25 insertions(+), 83 deletions(-)

diff --git a/src/platformsupport/kmsconvenience/qkmsdevice.cpp b/src/platformsupport/kmsconvenience/qkmsdevice.cpp
index f1faceed86..5e6ef1cba9 100644
--- a/src/platformsupport/kmsconvenience/qkmsdevice.cpp
+++ b/src/platformsupport/kmsconvenience/qkmsdevice.cpp
@@ -453,6 +453,7 @@ QPlatformScreen *QKmsDevice::createScreenForConnector(drmModeResPtr resources,
     // This is for the EGLDevice/EGLStream backend. On some of those devices one
     // may want to target a pre-configured plane. It is probably useless for
     // eglfs_kms and others. Do not confuse with generic plane support (available_planes).
+    
     bool ok;
     int idx = qEnvironmentVariableIntValue("QT_QPA_EGLFS_KMS_PLANE_INDEX", &ok);
     if (ok) {
@@ -479,8 +480,14 @@ QPlatformScreen *QKmsDevice::createScreenForConnector(drmModeResPtr resources,
         }
     }
 
-    if (output.eglfs_plane)
+    output.wants_forced_plane = true;
+    if (output.eglfs_plane) {
         qCDebug(qLcKmsDebug, "Output eglfs plane is: %d", output.eglfs_plane->id);
+        
+    } else {
+        output.eglfs_plane = &(output.available_planes.back());
+    }
+    output.forced_plane_id = output.eglfs_plane->id;
 
     m_crtc_allocator |= (1 << output.crtc_index);
 
@@ -1057,12 +1064,6 @@ void QKmsScreenConfig::loadConfig()
 void QKmsOutput::restoreMode(QKmsDevice *device)
 {
     if (mode_set && saved_crtc) {
-        drmModeSetCrtc(device->fd(),
-                       saved_crtc->crtc_id,
-                       saved_crtc->buffer_id,
-                       0, 0,
-                       &connector_id, 1,
-                       &saved_crtc->mode);
         mode_set = false;
     }
 }
diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmintegration.cpp b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmintegration.cpp
index 1619509cda..7ae9d7afda 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmintegration.cpp
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmintegration.cpp
@@ -102,7 +102,7 @@ EGLNativeWindowType QEglFSKmsGbmIntegration::createNativeOffscreenWindow(const Q
 
     gbm_surface *surface = gbm_surface_create(static_cast<QEglFSKmsGbmDevice *>(device())->gbmDevice(),
                                               1, 1,
-                                              GBM_FORMAT_XRGB8888,
+                                              GBM_FORMAT_ARGB8888,
                                               GBM_BO_USE_RENDERING);
 
     return reinterpret_cast<EGLNativeWindowType>(surface);
diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmscreen.cpp b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmscreen.cpp
index 029879c0c6..0ff1cd1718 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmscreen.cpp
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms/qeglfskmsgbmscreen.cpp
@@ -91,16 +91,16 @@ QEglFSKmsGbmScreen::FrameBuffer *QEglFSKmsGbmScreen::framebufferForBufferObject(
 
     uint32_t width = gbm_bo_get_width(bo);
     uint32_t height = gbm_bo_get_height(bo);
-    uint32_t handles[4] = { gbm_bo_get_handle(bo).u32 };
-    uint32_t strides[4] = { gbm_bo_get_stride(bo) };
-    uint32_t offsets[4] = { 0 };
+    uint32_t bo_handle = gbm_bo_get_handle(bo).u32;
+    uint32_t pitch = gbm_bo_get_stride(bo);
     uint32_t pixelFormat = gbmFormatToDrmFormat(gbm_bo_get_format(bo));
+    uint8_t depth = 24;
+    uint8_t bpp = 32;
 
     QScopedPointer<FrameBuffer> fb(new FrameBuffer);
     qCDebug(qLcEglfsKmsDebug, "Adding FB, size %ux%u, DRM format 0x%x", width, height, pixelFormat);
 
-    int ret = drmModeAddFB2(device()->fd(), width, height, pixelFormat,
-                            handles, strides, offsets, &fb->fb, 0);
+    int ret = drmModeAddFB(device()->fd(), width, height, depth, bpp, pitch, bo_handle, &fb->fb);
 
     if (ret) {
         qWarning("Failed to create KMS FB!");
@@ -322,84 +322,25 @@ void QEglFSKmsGbmScreen::flip()
     }
 
     FrameBuffer *fb = framebufferForBufferObject(m_gbm_bo_next);
-    ensureModeSet(fb->fb);
+    //ensureModeSet(fb->fb);
 
-    QKmsOutput &op(output());
-    const int fd = device()->fd();
-    m_flipPending = true;
+    uint32_t width = gbm_bo_get_width(m_gbm_bo_next);
+    uint32_t height = gbm_bo_get_height(m_gbm_bo_next);
 
-    if (device()->hasAtomicSupport()) {
-#if QT_CONFIG(drm_atomic)
-        drmModeAtomicReq *request = device()->atomic_request();
-        if (request) {
-            drmModeAtomicAddProperty(request, op.eglfs_plane->id, op.eglfs_plane->framebufferPropertyId, fb->fb);
-            drmModeAtomicAddProperty(request, op.eglfs_plane->id, op.eglfs_plane->crtcPropertyId, op.crtc_id);
-            drmModeAtomicAddProperty(request, op.eglfs_plane->id, op.eglfs_plane->srcwidthPropertyId,
-                                     output().size.width() << 16);
-            drmModeAtomicAddProperty(request, op.eglfs_plane->id, op.eglfs_plane->srcXPropertyId, 0);
-            drmModeAtomicAddProperty(request, op.eglfs_plane->id, op.eglfs_plane->srcYPropertyId, 0);
-            drmModeAtomicAddProperty(request, op.eglfs_plane->id, op.eglfs_plane->srcheightPropertyId,
-                                     output().size.height() << 16);
-            drmModeAtomicAddProperty(request, op.eglfs_plane->id, op.eglfs_plane->crtcXPropertyId, 0);
-            drmModeAtomicAddProperty(request, op.eglfs_plane->id, op.eglfs_plane->crtcYPropertyId, 0);
-            drmModeAtomicAddProperty(request, op.eglfs_plane->id, op.eglfs_plane->crtcwidthPropertyId,
-                                     m_output.modes[m_output.mode].hdisplay);
-            drmModeAtomicAddProperty(request, op.eglfs_plane->id, op.eglfs_plane->crtcheightPropertyId,
-                                     m_output.modes[m_output.mode].vdisplay);
-
-            static int zpos = qEnvironmentVariableIntValue("QT_QPA_EGLFS_KMS_ZPOS");
-            if (zpos)
-                drmModeAtomicAddProperty(request, op.eglfs_plane->id, op.eglfs_plane->zposPropertyId, zpos);
-        }
-#endif
-    } else {
-        int ret = drmModePageFlip(fd,
-                              op.crtc_id,
-                              fb->fb,
-                              DRM_MODE_PAGE_FLIP_EVENT,
-                              this);
-        if (ret) {
-            qErrnoWarning("Could not queue DRM page flip on screen %s", qPrintable(name()));
-            m_flipPending = false;
-            gbm_surface_release_buffer(m_gbm_surface, m_gbm_bo_next);
-            m_gbm_bo_next = nullptr;
-            return;
-        }
-    }
+    int ret =  drmModeSetPlane(device()->fd(), output().eglfs_plane->id, output().crtc_id, fb->fb,
+                               0, 0, 0, width, height, 0 << 16,
+                               0 << 16, output().saved_crtc->width<<16, output().saved_crtc->height<<16);
 
     for (CloneDestination &d : m_cloneDests) {
         if (d.screen != this) {
-            d.screen->ensureModeSet(fb->fb);
-            d.cloneFlipPending = true;
-
-            if (device()->hasAtomicSupport()) {
-#if QT_CONFIG(drm_atomic)
-                drmModeAtomicReq *request = device()->atomic_request();
-                if (request) {
-                    drmModeAtomicAddProperty(request, d.screen->output().eglfs_plane->id,
-                                                      d.screen->output().eglfs_plane->framebufferPropertyId, fb->fb);
-                    drmModeAtomicAddProperty(request, d.screen->output().eglfs_plane->id,
-                                                      d.screen->output().eglfs_plane->crtcPropertyId, op.crtc_id);
-                }
-#endif
-            } else {
-                int ret = drmModePageFlip(fd,
-                                          d.screen->output().crtc_id,
-                                          fb->fb,
-                                          DRM_MODE_PAGE_FLIP_EVENT,
-                                          d.screen);
-                if (ret) {
-                    qErrnoWarning("Could not queue DRM page flip for clone screen %s", qPrintable(name()));
-                    d.cloneFlipPending = false;
-                }
-            }
+            int ret =  drmModeSetPlane(device()->fd(), d.screen->output().eglfs_plane->id, d.screen->output().crtc_id, fb->fb,
+                                       0, 0, 0, width, height, 0 << 16,
+                                       0 << 16, d.screen->output().saved_crtc->width<<16, d.screen->output().saved_crtc->height<<16);
         }
     }
 
-#if QT_CONFIG(drm_atomic)
-    if (device()->hasAtomicSupport())
-         device()->atomicCommit(this);
-#endif
+    flipFinished();
+
 }
 
 void QEglFSKmsGbmScreen::pageFlipHandler(int fd, unsigned int sequence, unsigned int tv_sec, unsigned int tv_usec, void *user_data)
