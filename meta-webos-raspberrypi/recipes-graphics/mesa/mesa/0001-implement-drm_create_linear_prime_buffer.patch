From b3f3f0c709269e34f6ef4e2b55a016c8b0d1e037 Mon Sep 17 00:00:00 2001
From: Martin Jansa <martin.jansa@lge.com>
Date: Fri, 7 Feb 2020 07:10:42 -0800
Subject: [PATCH] implement drm_create_linear_prime_buffer

Support wayland sink for gstreamer

use bool instead of boolean to fix:
http://gecko.lge.com:8000/Errors/Details/708473
after
94d827332f3 dri: Replace usage of boolean/TRUE/FALSE with bool/true/false

and remove unused result variable to fix:

../mesa-23.2.1/src/gallium/frontends/dri/dri2.c:1668:14: warning: variable 'result' set but not used [-Wunused-but-set-variable]
 1668 |         bool result;
      |              ^~~~~~

Signed-off-by: Martin Jansa <martin.jansa@lge.com>
---
Upstream-Status: Pending

 include/GL/internal/dri_interface.h         |  1 +
 src/egl/drivers/dri2/egl_dri2.c             |  4 ++--
 src/egl/drivers/dri2/platform_wayland.c     |  1 +
 src/egl/wayland/wayland-drm/meson.build     |  1 +
 src/egl/wayland/wayland-drm/wayland-drm.c   | 23 ++++++++++++++++-----
 src/egl/wayland/wayland-drm/wayland-drm.h   |  2 +-
 src/egl/wayland/wayland-drm/wayland-drm.xml | 12 +++++++++++
 src/gallium/frontends/dri/dri2.c            | 20 +++++++++++++++---
 src/gbm/backends/dri/gbm_dri.c              |  1 +
 src/loader/loader_dri3_helper.c             |  1 +
 10 files changed, 55 insertions(+), 11 deletions(-)

diff --git a/include/GL/internal/dri_interface.h b/include/GL/internal/dri_interface.h
index 11746fbc5d5..22d046653de 100644
--- a/include/GL/internal/dri_interface.h
+++ b/include/GL/internal/dri_interface.h
@@ -1506,6 +1506,7 @@ struct __DRIimageExtensionRec {
     */
    __DRIimage *(*createImageFromFds)(__DRIscreen *screen,
                                      int width, int height, int fourcc,
+                                     uint64_t modifier,
                                      int *fds, int num_fds,
                                      int *strides, int *offsets,
                                      void *loaderPrivate);
diff --git a/src/egl/drivers/dri2/egl_dri2.c b/src/egl/drivers/dri2/egl_dri2.c
index 1a6fddcec00..f6a4a8a15f5 100644
--- a/src/egl/drivers/dri2/egl_dri2.c
+++ b/src/egl/drivers/dri2/egl_dri2.c
@@ -3129,7 +3129,7 @@ dri2_destroy_image_khr(_EGLDisplay *disp, _EGLImage *image)
 
 static void
 dri2_wl_reference_buffer(void *user_data, uint32_t name, int fd,
-                         struct wl_drm_buffer *buffer)
+                         struct wl_drm_buffer *buffer, uint64_t modifier)
 {
    _EGLDisplay *disp = user_data;
    struct dri2_egl_display *dri2_dpy = dri2_egl_display(disp);
@@ -3143,7 +3143,7 @@ dri2_wl_reference_buffer(void *user_data, uint32_t name, int fd,
    else
       img = dri2_dpy->image->createImageFromFds(
          dri2_dpy->dri_screen_render_gpu, buffer->width, buffer->height,
-         buffer->format, &fd, 1, buffer->stride, buffer->offset, NULL);
+         buffer->format, modifier, &fd, 1, buffer->stride, buffer->offset, NULL);
 
    if (img == NULL)
       return;
diff --git a/src/egl/drivers/dri2/platform_wayland.c b/src/egl/drivers/dri2/platform_wayland.c
index 49f99c1e4b6..9e0d75d9708 100644
--- a/src/egl/drivers/dri2/platform_wayland.c
+++ b/src/egl/drivers/dri2/platform_wayland.c
@@ -1149,6 +1149,7 @@ get_back_bo(struct dri2_egl_surface *dri2_surf)
                dri2_dpy->dri_screen_render_gpu, dri2_surf->base.Width,
                dri2_surf->base.Height,
                loader_image_format_to_fourcc(linear_dri_image_format),
+               DRM_FORMAT_MOD_INVALID,
                &buffer_fds[0], num_planes, &strides[0], &offsets[0],
                dri2_surf->back);
             for (i = 0; i < num_planes; ++i) {
diff --git a/src/egl/wayland/wayland-drm/meson.build b/src/egl/wayland/wayland-drm/meson.build
index 6ab5b9260ff..5ff48d422a4 100644
--- a/src/egl/wayland/wayland-drm/meson.build
+++ b/src/egl/wayland/wayland-drm/meson.build
@@ -45,6 +45,7 @@ libwayland_drm = static_library(
   'wayland_drm',
   ['wayland-drm.c', wayland_drm_protocol_c, wayland_drm_server_protocol_h],
   gnu_symbol_visibility : 'hidden',
+  include_directories : [inc_wayland_drm, inc_include],
   dependencies : [dep_wayland_server],
   build_by_default : false,
 )
diff --git a/src/egl/wayland/wayland-drm/wayland-drm.c b/src/egl/wayland/wayland-drm/wayland-drm.c
index 45380ecb09e..59b7f9c4c64 100644
--- a/src/egl/wayland/wayland-drm/wayland-drm.c
+++ b/src/egl/wayland/wayland-drm/wayland-drm.c
@@ -37,6 +37,8 @@
 #include "wayland-drm.h"
 #include <wayland-server.h>
 
+#include "drm-uapi/drm_fourcc.h"
+
 #define MIN(x, y) (((x) < (y)) ? (x) : (y))
 
 static void
@@ -58,7 +60,7 @@ buffer_destroy(struct wl_client *client, struct wl_resource *resource)
 static void
 create_buffer(struct wl_client *client, struct wl_resource *resource,
               uint32_t id, uint32_t name, int fd, int32_t width, int32_t height,
-              uint32_t format, int32_t offset0, int32_t stride0,
+              uint32_t format, uint64_t modifier, int32_t offset0, int32_t stride0,
               int32_t offset1, int32_t stride1, int32_t offset2,
               int32_t stride2)
 {
@@ -82,7 +84,7 @@ create_buffer(struct wl_client *client, struct wl_resource *resource,
    buffer->offset[2] = offset2;
    buffer->stride[2] = stride2;
 
-   drm->callbacks.reference_buffer(drm->user_data, name, fd, buffer);
+   drm->callbacks.reference_buffer(drm->user_data, name, fd, buffer, modifier);
    if (buffer->driver_buffer == NULL) {
       wl_resource_post_error(resource, WL_DRM_ERROR_INVALID_NAME,
                              "invalid name");
@@ -122,7 +124,7 @@ drm_create_buffer(struct wl_client *client, struct wl_resource *resource,
       return;
    }
 
-   create_buffer(client, resource, id, name, -1, width, height, format, 0,
+   create_buffer(client, resource, id, name, -1, width, height, format, DRM_FORMAT_MOD_INVALID, 0,
                  stride, 0, 0, 0, 0);
 }
 
@@ -148,7 +150,7 @@ drm_create_planar_buffer(struct wl_client *client, struct wl_resource *resource,
       return;
    }
 
-   create_buffer(client, resource, id, name, -1, width, height, format, offset0,
+   create_buffer(client, resource, id, name, -1, width, height, format, DRM_FORMAT_MOD_INVALID, offset0,
                  stride0, offset1, stride1, offset2, stride2);
 }
 
@@ -159,11 +161,21 @@ drm_create_prime_buffer(struct wl_client *client, struct wl_resource *resource,
                         int32_t offset1, int32_t stride1, int32_t offset2,
                         int32_t stride2)
 {
-   create_buffer(client, resource, id, 0, fd, width, height, format, offset0,
+   create_buffer(client, resource, id, 0, fd, width, height, format, DRM_FORMAT_MOD_INVALID, offset0,
                  stride0, offset1, stride1, offset2, stride2);
    close(fd);
 }
 
+static void
+drm_create_linear_prime_buffer(struct wl_client *client, struct wl_resource *resource,
+                        uint32_t id, int fd, int32_t width, int32_t height,
+                        uint32_t format, int32_t offset, int32_t stride)
+{
+    create_buffer(client, resource, id, 0, fd, width, height, format,
+                  DRM_FORMAT_MOD_LINEAR, offset, stride, 0, 0, 0, 0);
+    close(fd);
+}
+
 static void
 drm_authenticate(struct wl_client *client, struct wl_resource *resource,
                  uint32_t id)
@@ -183,6 +195,7 @@ static const struct wl_drm_interface drm_interface = {
    drm_create_buffer,
    drm_create_planar_buffer,
    drm_create_prime_buffer,
+   drm_create_linear_prime_buffer
 };
 
 static void
diff --git a/src/egl/wayland/wayland-drm/wayland-drm.h b/src/egl/wayland/wayland-drm/wayland-drm.h
index 8f3522e9bcb..1b32016f826 100644
--- a/src/egl/wayland/wayland-drm/wayland-drm.h
+++ b/src/egl/wayland/wayland-drm/wayland-drm.h
@@ -11,7 +11,7 @@ struct wayland_drm_callbacks {
    int (*authenticate)(void *user_data, uint32_t id);
 
    void (*reference_buffer)(void *user_data, uint32_t name, int fd,
-                            struct wl_drm_buffer *buffer);
+                            struct wl_drm_buffer *buffer, uint64_t modifier);
 
    void (*release_buffer)(void *user_data, struct wl_drm_buffer *buffer);
 
diff --git a/src/egl/wayland/wayland-drm/wayland-drm.xml b/src/egl/wayland/wayland-drm/wayland-drm.xml
index eaf2654ab26..d6913d680ba 100644
--- a/src/egl/wayland/wayland-drm/wayland-drm.xml
+++ b/src/egl/wayland/wayland-drm/wayland-drm.xml
@@ -184,6 +184,18 @@
       <arg name="stride2" type="int"/>
     </request>
 
+    <!-- Create a wayland buffer for the prime fd.  Use for prime
+         buffers with LINEAR modifier. -->
+    <request name="create_linear_prime_buffer" since="2">
+      <arg name="id" type="new_id" interface="wl_buffer"/>
+      <arg name="name" type="fd"/>
+      <arg name="width" type="int"/>
+      <arg name="height" type="int"/>
+      <arg name="format" type="uint"/>
+      <arg name="offset" type="int"/>
+      <arg name="stride" type="int"/>
+    </request>
+
   </interface>
 
 </protocol>
diff --git a/src/gallium/frontends/dri/dri2.c b/src/gallium/frontends/dri/dri2.c
index ab958626f52..a2fcc355782 100644
--- a/src/gallium/frontends/dri/dri2.c
+++ b/src/gallium/frontends/dri/dri2.c
@@ -1649,13 +1649,27 @@ dri2_from_planar(__DRIimage *image, int plane, void *loaderPrivate)
    return img;
 }
 
+static bool
+dri2_query_dma_buf_modifiers(__DRIscreen *_screen, int fourcc, int max,
+                             uint64_t *modifiers, unsigned int *external_only,
+                             int *count);
+
 static __DRIimage *
 dri2_from_fds(__DRIscreen *screen, int width, int height, int fourcc,
-              int *fds, int num_fds, int *strides, int *offsets,
-              void *loaderPrivate)
+              uint64_t modifier, int *fds, int num_fds, int *strides,
+              int *offsets, void *loaderPrivate)
 {
+    if (modifier != DRM_FORMAT_MOD_LINEAR) {
+        /* For RGB16 format data since we are getting correct value of modifer
+         * as DRM_FORMAT_MOD_LINEAR no need for query of modifiers
+         */
+        unsigned int external_only= 0;
+        int count= 0;
+        dri2_query_dma_buf_modifiers( screen, fourcc, 1, &modifier, &external_only, &count);
+    }
+
    return dri2_create_image_from_fd(screen, width, height, fourcc,
-                                   DRM_FORMAT_MOD_INVALID, fds, num_fds,
+                                   modifier, fds, num_fds,
                                    strides, offsets, 0, NULL, loaderPrivate);
 }
 
diff --git a/src/gbm/backends/dri/gbm_dri.c b/src/gbm/backends/dri/gbm_dri.c
index ed76087b20b..c2d647b05b9 100644
--- a/src/gbm/backends/dri/gbm_dri.c
+++ b/src/gbm/backends/dri/gbm_dri.c
@@ -948,6 +948,7 @@ gbm_dri_bo_import(struct gbm_device *gbm,
                                              fd_data->width,
                                              fd_data->height,
                                              fourcc,
+                                             DRM_FORMAT_MOD_INVALID,
                                              &fd_data->fd, 1,
                                              &stride, &offset,
                                              NULL);
diff --git a/src/loader/loader_dri3_helper.c b/src/loader/loader_dri3_helper.c
index 32135770e9d..f871e7f533e 100644
--- a/src/loader/loader_dri3_helper.c
+++ b/src/loader/loader_dri3_helper.c
@@ -1867,6 +1867,7 @@ loader_dri3_create_image(xcb_connection_t *c,
                                             bp_reply->width,
                                             bp_reply->height,
                                             loader_image_format_to_fourcc(format),
+                                            DRM_FORMAT_MOD_INVALID,
                                             fds, 1,
                                             &stride, &offset, loaderPrivate);
    close(fds[0]);
