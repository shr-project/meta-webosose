diff -ruN c/ext/wayland/gstwaylandsink.c d/ext/wayland/gstwaylandsink.c
--- c/ext/wayland/gstwaylandsink.c	2020-07-28 09:13:49.538147330 +0000
+++ d/ext/wayland/gstwaylandsink.c	2020-07-29 13:26:52.909368784 +0000
@@ -44,6 +44,7 @@
 #include "gstwaylandsink.h"
 #include "wlvideoformat.h"
 #include "wlbuffer.h"
+#include "wldrmallocator.h"
 #include "wlshmallocator.h"
 #include "wllinuxdmabuf.h"
 
@@ -62,7 +63,8 @@
 {
   PROP_0,
   PROP_DISPLAY,
-  PROP_FULLSCREEN
+  PROP_FULLSCREEN,
+  PROP_USEDRMBUF
 };
 
 GST_DEBUG_CATEGORY (gstwayland_debug);
@@ -73,12 +75,16 @@
     "RGB16, BGR16, YUY2, YVYU, UYVY, AYUV, NV12, NV21, NV16, " \
     "YUV9, YVU9, Y41B, I420, YV12, Y42B, v308 }"
 
+#define DRM_VIDEO_FORMATS \
+    "{ BGRx, BGRA, xRGB, RGBA, ABGR, ARGB, RGB16, YUY2, NV12, NV16, " \
+    "YUV9, Y41B, I420, Y42B, v308 }"
+
 static GstStaticPadTemplate sink_template = GST_STATIC_PAD_TEMPLATE ("sink",
     GST_PAD_SINK,
     GST_PAD_ALWAYS,
     GST_STATIC_CAPS (GST_VIDEO_CAPS_MAKE (WL_VIDEO_FORMATS) ";"
         GST_VIDEO_CAPS_MAKE_WITH_FEATURES (GST_CAPS_FEATURE_MEMORY_DMABUF,
-            WL_VIDEO_FORMATS))
+ 					  WL_VIDEO_FORMATS) ";" GST_VIDEO_CAPS_MAKE (DRM_VIDEO_FORMATS))
     );
 
 static void gst_wayland_sink_get_property (GObject * object,
@@ -208,6 +214,11 @@
       g_param_spec_boolean ("fullscreen", "Fullscreen",
           "Whether the surface should be made fullscreen ", FALSE,
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
+  g_object_class_install_property (gobject_class, PROP_USEDRMBUF,
+      g_param_spec_boolean ("use-drmbuf", "Wayland Allocation name", "Wayland "
+          "Use DRM based memory for allocation", FALSE, G_PARAM_WRITABLE));
+
 }
 
 static void
@@ -250,6 +261,11 @@
       g_value_set_boolean (value, sink->fullscreen);
       GST_OBJECT_UNLOCK (sink);
       break;
+    case PROP_USEDRMBUF:
+      GST_OBJECT_LOCK (sink);
+      g_value_set_boolean (value, sink->use_drmbuf);
+      GST_OBJECT_UNLOCK (sink);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -273,6 +289,11 @@
       gst_wayland_sink_set_fullscreen (sink, g_value_get_boolean (value));
       GST_OBJECT_UNLOCK (sink);
       break;
+    case PROP_USEDRMBUF:
+      GST_OBJECT_LOCK (sink);
+      sink->use_drmbuf = g_value_get_boolean (value);
+      GST_OBJECT_UNLOCK (sink);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -490,7 +511,8 @@
   g_mutex_lock (&sink->display_lock);
 
   if (sink->display) {
-    GValue shm_list = G_VALUE_INIT, dmabuf_list = G_VALUE_INIT;
+    GValue drmbuf_list = G_VALUE_INIT;
+		GValue shm_list = G_VALUE_INIT, dmabuf_list = G_VALUE_INIT;
     GValue value = G_VALUE_INIT;
     GArray *formats;
     gint i;
@@ -498,6 +520,7 @@
 
     g_value_init (&shm_list, GST_TYPE_LIST);
     g_value_init (&dmabuf_list, GST_TYPE_LIST);
+		g_value_init (&drmbuf_list, GST_TYPE_LIST);
 
     /* Add corresponding shm formats */
     formats = sink->display->shm_formats;
@@ -523,6 +546,20 @@
     gst_structure_take_value (gst_caps_get_structure (caps, 1), "format",
         &dmabuf_list);
 
+    if (sink->use_drmbuf) {
+      /* Add corresponding drm formats */
+      formats = sink->display->drmbuf_formats;
+      for (i = 0; i < formats->len; i++) {
+        g_value_init (&value, G_TYPE_STRING);
+        fmt = g_array_index (formats, uint32_t, i);
+        g_value_set_static_string (&value, gst_wl_drm_format_to_string (fmt));
+        gst_value_list_append_and_take_value (&drmbuf_list, &value);
+      }
+
+      gst_structure_take_value (gst_caps_get_structure (caps, 2), "format",
+          &drmbuf_list);
+    }
+
     GST_DEBUG_OBJECT (sink, "display caps: %" GST_PTR_FORMAT, caps);
   }
 
@@ -553,8 +590,11 @@
   structure = gst_buffer_pool_get_config (pool);
   gst_buffer_pool_config_set_params (structure, caps, size, 2, 0);
 
-  alloc = gst_wl_shm_allocator_get ();
-  gst_buffer_pool_config_set_allocator (structure, alloc, NULL);
+  if (sink->use_drmbuf)
+	alloc = gst_wl_drm_allocator_get (sink->display->fd);
+  else
+    alloc = gst_wl_shm_allocator_get ();
+	gst_buffer_pool_config_set_allocator (structure, alloc, NULL);
   if (!gst_buffer_pool_set_config (pool, structure)) {
     g_object_unref (pool);
     pool = NULL;
@@ -589,6 +629,16 @@
   return ret;
 }
 
+static void
+gst_wayland_sink_wait_authenticated (GstWaylandSink * sink)
+{
+  while (!sink->display->authenticated) {
+    GST_DEBUG_OBJECT (sink, "waiting for authentication");
+    wl_display_roundtrip (sink->display->display);
+  }
+  GST_DEBUG_OBJECT (sink, "aunthenticated : %d", sink->display->authenticated );
+}
+
 static gboolean
 gst_wayland_sink_set_caps (GstBaseSink * bsink, GstCaps * caps)
 {
@@ -599,7 +649,13 @@
 
   sink = GST_WAYLAND_SINK (bsink);
 
-  GST_DEBUG_OBJECT (sink, "set caps %" GST_PTR_FORMAT, caps);
+  gst_wayland_sink_wait_authenticated (sink);
+
+  while (!sink->display->authenticated) {
+    GST_DEBUG_OBJECT (sink, "not authenticated yet");
+  }
+
+	GST_DEBUG_OBJECT (sink, "set caps %" GST_PTR_FORMAT, caps);
 
   /* extract info from caps */
   if (!gst_video_info_from_caps (&sink->video_info, caps))
@@ -674,8 +730,11 @@
   if (pool)
     g_object_unref (pool);
 
-  alloc = gst_wl_shm_allocator_get ();
-  gst_query_add_allocation_param (query, alloc, NULL);
+  if (sink->use_drmbuf)
+	  alloc = gst_wl_drm_allocator_get (sink->display->fd);
+  else
+    alloc = gst_wl_shm_allocator_get ();
+	gst_query_add_allocation_param (query, alloc, NULL);
   gst_query_add_allocation_meta (query, GST_VIDEO_META_API_TYPE, NULL);
   g_object_unref (alloc);
 
@@ -760,7 +819,7 @@
   }
   sink->old_time = cur_time;
 
-  GST_DEBUG_OBJECT (sink, "Showing frame %d", sink->frame_count);
+  GST_LOG_OBJECT (sink, "Showing frame %d", sink->frame_count);
   sink->frame_count++;
 
   if (G_UNLIKELY (!sink->window)) {
@@ -796,8 +855,8 @@
 
   /* drop buffers until we get a frame callback */
   if (sink->redraw_pending) {
-    GST_LOG_OBJECT (sink, "buffer %p dropped (redraw pending)", buffer);
-    goto done;
+    GST_DEBUG_OBJECT (sink, "buffer %p dropped (redraw pending)", buffer);
+		goto done;
   }
 
   /* make sure that the application has called set_render_rectangle() */
@@ -832,7 +891,12 @@
       "display, creating it", buffer);
 
   format = GST_VIDEO_INFO_FORMAT (&sink->video_info);
-  if (gst_wl_display_check_format_for_dmabuf (sink->display, format)) {
+  if (!wbuf && sink->use_drmbuf &&
+      gst_wl_display_check_format_for_drm (sink->display, format)) {
+   wbuf = gst_wl_drm_memory_construct_wl_buffer (sink->display, mem, &sink->video_info);
+  }
+
+	if (gst_wl_display_check_format_for_dmabuf (sink->display, format)) {
     guint i, nb_dmabuf = 0;
 
     for (i = 0; i < gst_buffer_n_memory (buffer); i++)
diff -ruN c/ext/wayland/gstwaylandsink.h d/ext/wayland/gstwaylandsink.h
--- c/ext/wayland/gstwaylandsink.h	2020-07-28 09:13:49.538147330 +0000
+++ d/ext/wayland/gstwaylandsink.h	2020-07-29 13:26:52.909368784 +0000
@@ -71,6 +71,7 @@
   gint64 old_time;
   gint frame_cnt_in_sec;
   guint frame_count;
+	gboolean use_drmbuf;
 };
 
 struct _GstWaylandSinkClass
diff -ruN c/ext/wayland/Makefile.am d/ext/wayland/Makefile.am
--- c/ext/wayland/Makefile.am	2020-07-28 09:13:49.538147330 +0000
+++ d/ext/wayland/Makefile.am	2020-07-29 13:26:52.909368784 +0000
@@ -7,12 +7,15 @@
 	linux-dmabuf-unstable-v1-client-protocol.h \
 	fullscreen-shell-unstable-v1-protocol.c \
 	fullscreen-shell-unstable-v1-client-protocol.h \
-	xdg-shell-protocol.c \
+	wayland-drm-protocol.c \
+	wayland-drm-client-protocol.h \
+  xdg-shell-protocol.c \
 	xdg-shell-client-protocol.h
 
 libgstwaylandsink_la_SOURCES =  \
 	gstwaylandsink.c \
-	wlshmallocator.c \
+	wldrmallocator.c \
+  wlshmallocator.c \
 	wlbuffer.c \
 	wldisplay.c \
 	wlwindow.c \
@@ -23,12 +26,14 @@
 	viewporter-protocol.c \
 	linux-dmabuf-unstable-v1-protocol.c \
 	fullscreen-shell-unstable-v1-protocol.c \
+	wayland-drm-protocol.c \
 	xdg-shell-protocol.c
 
 libgstwaylandsink_la_CFLAGS = \
 	$(GST_PLUGINS_BAD_CFLAGS) \
 	$(GST_PLUGINS_BASE_CFLAGS) \
 	$(GST_CFLAGS) \
+	$(DRM_CFLAGS) \
 	$(WAYLAND_CFLAGS)
 libgstwaylandsink_la_LIBADD = \
 	$(top_builddir)/gst-libs/gst/wayland/libgstwayland-$(GST_API_VERSION).la \
@@ -40,6 +45,7 @@
 
 noinst_HEADERS = \
 	gstwaylandsink.h \
+	wldrmallocator.h \
 	wlshmallocator.h \
 	wlbuffer.h \
 	wldisplay.h \
diff -ruN c/ext/wayland/meson.build d/ext/wayland/meson.build
--- c/ext/wayland/meson.build	2020-07-28 09:13:49.538147330 +0000
+++ d/ext/wayland/meson.build	2020-07-29 13:26:52.909368784 +0000
@@ -1,5 +1,6 @@
 wl_sources = [
     'gstwaylandsink.c',
+    'wldrmallocator.c',
     'wlshmallocator.c',
     'wlbuffer.c',
     'wldisplay.c',
@@ -15,6 +16,7 @@
 
     protocol_defs = [
         ['/stable/viewporter/viewporter.xml', 'viewporter-protocol.c', 'viewporter-client-protocol.h'],
+				['/stable/wayland-drm/wayland-drm.xml', 'wayland-drm-protocol.c', 'wayland-drm-client-protocol.h'],
         ['/unstable/linux-dmabuf/linux-dmabuf-unstable-v1.xml',
          'linux-dmabuf-unstable-v1-protocol.c', 'linux-dmabuf-unstable-v1-client-protocol.h'],
         ['/unstable/fullscreen-shell/fullscreen-shell-unstable-v1.xml',
diff -ruN c/ext/wayland/wldisplay.c d/ext/wayland/wldisplay.c
--- c/ext/wayland/wldisplay.c	2020-07-28 09:13:49.538147330 +0000
+++ d/ext/wayland/wldisplay.c	2020-07-29 13:26:52.909368784 +0000
@@ -26,6 +26,9 @@
 #include "wlbuffer.h"
 #include "wlvideoformat.h"
 
+#include <fcntl.h>
+#include <xf86drm.h>
+#include <xf86drmMode.h>
 #include <errno.h>
 
 GST_DEBUG_CATEGORY_EXTERN (gstwayland_debug);
@@ -46,10 +49,12 @@
 gst_wl_display_init (GstWlDisplay * self)
 {
   self->shm_formats = g_array_new (FALSE, FALSE, sizeof (uint32_t));
-  self->dmabuf_formats = g_array_new (FALSE, FALSE, sizeof (uint32_t));
+  self->drmbuf_formats = g_array_new (FALSE, FALSE, sizeof (uint32_t));
+	self->dmabuf_formats = g_array_new (FALSE, FALSE, sizeof (uint32_t));
   self->wl_fd_poll = gst_poll_new (TRUE);
   self->buffers = g_hash_table_new (g_direct_hash, g_direct_equal);
-  g_mutex_init (&self->buffers_mutex);
+  self->fd = -1;
+	g_mutex_init (&self->buffers_mutex);
 }
 
 static void
@@ -73,10 +78,14 @@
   g_hash_table_remove_all (self->buffers);
 
   g_array_unref (self->shm_formats);
-  g_array_unref (self->dmabuf_formats);
+  g_array_unref (self->drmbuf_formats);
+	g_array_unref (self->dmabuf_formats);
   gst_poll_free (self->wl_fd_poll);
   g_hash_table_unref (self->buffers);
   g_mutex_clear (&self->buffers_mutex);
+  
+  if (self->fd != -1)
+    close(self->fd);
 
   if (self->viewporter)
     wp_viewporter_destroy (self->viewporter);
@@ -84,7 +93,10 @@
   if (self->shm)
     wl_shm_destroy (self->shm);
 
-  if (self->dmabuf)
+  if (self->drm)
+    wl_drm_destroy (self->drm);
+
+	if (self->dmabuf)
     zwp_linux_dmabuf_v1_destroy (self->dmabuf);
 
   if (self->wl_shell)
@@ -142,6 +154,61 @@
   dmabuf_format,
 };
 
+/* For wl_drm_listener */
+static void
+drm_handle_device (void *data, struct wl_drm *drm, const char *device)
+{
+  GstWlDisplay *d = data;
+  drm_magic_t magic;
+
+  d->fd = open (device, O_RDWR);
+  if (d->fd == -1) {
+    GST_ERROR ("Failed open device (%s)", device);
+    return;
+  } else {
+    GST_DEBUG ("Opened drm device (%s) : fd (%d)", device, d->fd);
+  }
+
+  drmGetMagic (d->fd, &magic);
+  wl_drm_authenticate (d->drm, magic);
+}
+
+static void
+drm_handle_format (void *data, struct wl_drm *drm, uint32_t format)
+{
+  GstWlDisplay *self = data;
+  g_array_append_val (self->drmbuf_formats, format);
+  GST_DEBUG ("value %" GST_FOURCC_FORMAT, GST_FOURCC_ARGS (format));
+}
+
+static void
+drm_handle_authenticated (void *data, struct wl_drm *drm)
+{
+  GstWlDisplay *d = data;
+  d->authenticated = 1;
+  GST_DEBUG ("d->authenticated: %d\n", d->authenticated);
+}
+
+static void
+drm_handle_capabilities (void *data,
+    struct wl_drm *wl_drm, uint32_t capabilities)
+{
+  GstWlDisplay *d = data;
+
+  if (capabilities & WL_DRM_CAPABILITY_PRIME) {
+    d->has_prime_cap = 1;
+  } else {
+    GST_DEBUG ("wayland capability PRIME not supported");
+  }
+}
+
+static const struct wl_drm_listener drm_listener = {
+  drm_handle_device,
+  drm_handle_format,
+  drm_handle_authenticated,
+  drm_handle_capabilities
+};
+
 gboolean
 gst_wl_display_check_format_for_shm (GstWlDisplay * display,
     GstVideoFormat format)
@@ -164,6 +231,27 @@
 }
 
 gboolean
+gst_wl_display_check_format_for_drm (GstWlDisplay * display,
+    GstVideoFormat format)
+{
+  enum wl_drm_format drm_fmt;
+  GArray *formats;
+  guint i;
+
+  drm_fmt = gst_video_format_to_wl_drm_format (format);
+  if (drm_fmt == (enum wl_drm_format) -1)
+    return FALSE;
+
+  formats = display->drmbuf_formats;
+  for (i = 0; i < formats->len; i++) {
+    if (g_array_index (formats, uint32_t, i) == drm_fmt)
+      return TRUE;
+  }
+
+  return FALSE;
+}
+
+gboolean
 gst_wl_display_check_format_for_dmabuf (GstWlDisplay * display,
     GstVideoFormat format)
 {
@@ -202,7 +290,6 @@
     uint32_t id, const char *interface, uint32_t version)
 {
   GstWlDisplay *self = data;
-  GST_DEBUG (" setup wayland interface : %s", interface);
 
   if (g_strcmp0 (interface, "wl_compositor") == 0) {
     self->compositor = wl_registry_bind (registry, id, &wl_compositor_interface,
@@ -226,6 +313,9 @@
     self->dmabuf =
         wl_registry_bind (registry, id, &zwp_linux_dmabuf_v1_interface, 1);
     zwp_linux_dmabuf_v1_add_listener (self->dmabuf, &dmabuf_listener, self);
+  } else if (g_strcmp0 (interface, "wl_drm") == 0) {
+    self->drm = wl_registry_bind (registry, id, &wl_drm_interface, 2);
+    wl_drm_add_listener (self->drm, &drm_listener, self);
   }
 }
 
@@ -328,6 +418,7 @@
 
   VERIFY_INTERFACE_EXISTS (compositor, "wl_compositor");
   VERIFY_INTERFACE_EXISTS (shm, "wl_shm");
+	VERIFY_INTERFACE_EXISTS (drm, "wl_drm");
 
 #undef VERIFY_INTERFACE_EXISTS
 
diff -ruN c/ext/wayland/wldisplay.h d/ext/wayland/wldisplay.h
--- c/ext/wayland/wldisplay.h	2020-07-28 09:13:49.538147330 +0000
+++ d/ext/wayland/wldisplay.h	2020-07-29 13:26:52.909368784 +0000
@@ -28,6 +28,7 @@
 #include "viewporter-client-protocol.h"
 #include "linux-dmabuf-unstable-v1-client-protocol.h"
 #include "fullscreen-shell-unstable-v1-client-protocol.h"
+#include "wayland-drm-client-protocol.h"
 
 G_BEGIN_DECLS
 
@@ -57,9 +58,11 @@
   struct xdg_wm_base *xdg_wm_base;
   struct zwp_fullscreen_shell_v1 *fullscreen_shell;
   struct wl_shm *shm;
+	struct wl_drm *drm;
   struct wp_viewporter *viewporter;
   struct zwp_linux_dmabuf_v1 *dmabuf;
   GArray *shm_formats;
+	GArray *drmbuf_formats;
   GArray *dmabuf_formats;
 
   /* private */
@@ -70,6 +73,10 @@
   GMutex buffers_mutex;
   GHashTable *buffers;
   gboolean shutting_down;
+
+  int fd;
+  int authenticated;
+  gboolean has_prime_cap;
 };
 
 struct _GstWlDisplayClass
@@ -89,6 +96,8 @@
 
 gboolean gst_wl_display_check_format_for_shm (GstWlDisplay * display,
     GstVideoFormat format);
+gboolean gst_wl_display_check_format_for_drm (GstWlDisplay * display,
+    GstVideoFormat format);
 gboolean gst_wl_display_check_format_for_dmabuf (GstWlDisplay * display,
     GstVideoFormat format);
 
diff -ruN c/ext/wayland/wldrmallocator.c d/ext/wayland/wldrmallocator.c
--- c/ext/wayland/wldrmallocator.c	1970-01-01 00:00:00.000000000 +0000
+++ d/ext/wayland/wldrmallocator.c	2020-07-29 13:26:52.909368784 +0000
@@ -0,0 +1,398 @@
+/*
+ * GStreamer
+ *
+ * Copyright (C) 2012 Texas Instruments
+ *
+ * Authors:
+ *  Pooja Prajod <poojaprajod@ti.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+/**
+ * SECTION:GstWlDrmAllocator
+ * @short_description: GStreamer DRM allocator support
+ *
+ * Since: 1.6.3
+ */
+
+
+#include "wldrmallocator.h"
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+#include <unistd.h>
+#include <sys/mman.h>
+#include <sys/types.h>
+
+#include "wayland-drm-client-protocol.h"
+
+GST_DEBUG_CATEGORY (drmallocator_debug);
+#define GST_CAT_DEFAULT drmallocator_debug
+
+#define GST_DRM_MEMORY_TYPE GST_ALLOCATOR_DMABUF
+
+struct drm_bo
+{
+  void *ptr;
+  size_t size;
+  unsigned handle;
+  unsigned int refs;
+};
+
+struct _GstWlDrmAllocatorPrivate
+{
+  int fd;
+  /* protected by GstWlDrmAllocator object lock */
+  GList *mem_cache;
+  GstAllocator *dmabuf_alloc;
+};
+
+#define parent_class gst_wl_drm_allocator_parent_class
+G_DEFINE_TYPE_WITH_CODE (GstWlDrmAllocator, gst_wl_drm_allocator,
+    GST_TYPE_FD_ALLOCATOR, G_ADD_PRIVATE (GstWlDrmAllocator);
+    GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, "waylandalloc", 0,
+        "Wl Drm allocator"));
+
+enum
+{
+  PROP_DRM_FD = 1,
+  PROP_N,
+};
+
+static GParamSpec *g_props[PROP_N] = { NULL, };
+
+/* Copied from gst_v4l2_object_extrapolate_stride() */
+static gint
+gst_wl_drm_extrapolate_stride (const GstVideoFormatInfo * finfo, gint plane,
+    gint stride)
+{
+  gint estride;
+
+  switch (finfo->format) {
+    case GST_VIDEO_FORMAT_NV12:
+    case GST_VIDEO_FORMAT_NV12_64Z32:
+    case GST_VIDEO_FORMAT_NV21:
+    case GST_VIDEO_FORMAT_NV16:
+    case GST_VIDEO_FORMAT_NV61:
+    case GST_VIDEO_FORMAT_NV24:
+      estride = (plane == 0 ? 1 : 2) *
+          GST_VIDEO_FORMAT_INFO_SCALE_WIDTH (finfo, plane, stride);
+      break;
+    default:
+      estride = GST_VIDEO_FORMAT_INFO_SCALE_WIDTH (finfo, plane, stride);
+      break;
+  }
+
+  return estride;
+}
+
+static GstMemory *
+gst_wl_drm_allocator_alloc (GstAllocator * allocator, gsize size,
+    GstAllocationParams * params)
+{
+  GstWlDrmAllocator *alloc = GST_WL_DRM_ALLOCATOR (allocator);
+  int fd = -1;
+  GstMemory *mem;
+
+  /* Variable for DRM Dumb Buffers */
+  struct drm_mode_create_dumb creq;
+  struct drm_mode_destroy_dumb dreq;
+  int ret;
+
+  GST_DEBUG_OBJECT (alloc, "Wl DRM Memory alloc");
+
+  memset (&creq, 0, sizeof (struct drm_mode_create_dumb));
+  /*
+     We have only total size as argument to _allocator_alloc.
+     Since the DDR storage is linear, it is as good as saying
+     the buffer is of width = size and height = 1
+   */
+  creq.width = size;
+  creq.height = 1;
+  creq.bpp = 8;
+
+  /* Create a DRM dumb buffer */
+  ret = drmIoctl (alloc->priv->fd, DRM_IOCTL_MODE_CREATE_DUMB, &creq);
+  if (ret < 0) {
+    GST_ERROR_OBJECT (alloc, "Create DRM dumb buffer failed");
+    return NULL;
+  }
+
+  /* Get a dmabuf fd from the dumb buffer handle */
+  drmPrimeHandleToFD (alloc->priv->fd, creq.handle, DRM_CLOEXEC, &fd);
+  if (fd < 0) {
+    GST_ERROR_OBJECT (alloc, "Invalid fd returned: %d", fd);
+    goto fail;
+  }
+
+  if (G_UNLIKELY (alloc->priv->dmabuf_alloc == NULL))
+    alloc->priv->dmabuf_alloc = gst_dmabuf_allocator_new ();
+
+  /* Get a dmabuf gstmemory with the fd */
+  mem = gst_dmabuf_allocator_alloc (alloc->priv->dmabuf_alloc, fd, 0);
+
+  if (G_UNLIKELY (!mem)) {
+    GST_ERROR_OBJECT (alloc, "GstDmaBufMemory allocation failed");
+    close (fd);
+    goto fail;
+  }
+
+  return mem;
+
+fail:
+  memset (&dreq, 0, sizeof (struct drm_mode_destroy_dumb));
+  dreq.handle = creq.handle;
+  drmIoctl (alloc->priv->fd, DRM_IOCTL_MODE_DESTROY_DUMB, &dreq);
+  return NULL;
+}
+
+static void
+gst_wl_drm_allocator_free (GstAllocator * allocator, GstMemory * mem)
+{
+  GstWlDrmAllocator *alloc;
+
+  uint32_t handle = 0;
+  int fd = -1;
+
+  alloc = GST_WL_DRM_ALLOCATOR (allocator);
+
+  GST_LOG_OBJECT (alloc, "DRM Memory free");
+
+  g_return_if_fail (GST_IS_ALLOCATOR (allocator));
+  g_return_if_fail (mem != NULL);
+  g_return_if_fail (gst_is_wl_drm_memory (mem));
+
+  fd = gst_dmabuf_memory_get_fd (mem);
+  drmPrimeFDToHandle(alloc->priv->fd, fd, &handle);
+
+  /* Incase there are some mapped memory, we unmap and ready it to be cleaned*/
+  GST_ALLOCATOR_CLASS (parent_class)->free (allocator, mem);
+
+  if (handle) {
+    struct drm_mode_destroy_dumb dreq;
+    memset(&dreq, 0, sizeof(struct drm_mode_destroy_dumb));
+    dreq.handle = handle;
+    drmIoctl (alloc->priv->fd, DRM_IOCTL_MODE_DESTROY_DUMB, &dreq);
+  }
+
+  close (fd);
+}
+
+static void
+gst_wl_drm_allocator_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec)
+{
+  GstWlDrmAllocator *alloc;
+
+  alloc = GST_WL_DRM_ALLOCATOR (object);
+
+  switch (prop_id) {
+    case PROP_DRM_FD:{
+      int fd = g_value_get_int (value);
+      GST_DEBUG ("wayland : priv->fd (%d)", fd);
+      if (fd > -1)
+        alloc->priv->fd = fd;
+      break;
+    }
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+
+static void
+gst_wl_drm_allocator_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec)
+{
+  GstWlDrmAllocator *alloc;
+
+  alloc = GST_WL_DRM_ALLOCATOR (object);
+
+  switch (prop_id) {
+    case PROP_DRM_FD:
+      GST_DEBUG ("wayland : priv->fd (%d)", alloc->priv->fd);
+      g_value_set_int (value, alloc->priv->fd);
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+
+static void
+gst_wl_drm_allocator_finalize (GObject * obj)
+{
+  GstWlDrmAllocator *alloc;
+
+  alloc = GST_WL_DRM_ALLOCATOR (obj);
+
+  GST_LOG_OBJECT (alloc, "DRM Allocator finalize");
+
+  close (alloc->priv->fd);
+
+  G_OBJECT_CLASS (parent_class)->finalize (obj);
+}
+
+static void
+gst_wl_drm_allocator_class_init (GstWlDrmAllocatorClass * klass)
+{
+  GObjectClass *gobject_class;
+  GstAllocatorClass *allocator_class;
+
+  allocator_class = GST_ALLOCATOR_CLASS (klass);
+  gobject_class = G_OBJECT_CLASS (klass);
+
+  allocator_class->alloc = GST_DEBUG_FUNCPTR (gst_wl_drm_allocator_alloc);
+  allocator_class->free = GST_DEBUG_FUNCPTR (gst_wl_drm_allocator_free);
+
+
+  gobject_class->set_property = gst_wl_drm_allocator_set_property;
+  gobject_class->get_property = gst_wl_drm_allocator_get_property;
+  gobject_class->finalize = gst_wl_drm_allocator_finalize;
+
+  g_props[PROP_DRM_FD] = g_param_spec_int ("drm-fd", "DRM fd",
+      "DRM file descriptor", -1, G_MAXINT, -1,
+      G_PARAM_READWRITE | G_PARAM_CONSTRUCT);
+
+  g_object_class_install_properties (gobject_class, PROP_N, g_props);
+}
+
+static void
+gst_wl_drm_allocator_init (GstWlDrmAllocator * allocator)
+{
+  GstAllocator *alloc;
+
+  alloc = GST_ALLOCATOR_CAST (allocator);
+
+  allocator->priv = gst_wl_drm_allocator_get_instance_private (allocator);
+  allocator->priv->fd = -1;
+
+  GST_DEBUG_OBJECT (allocator, "wayland : fd (%d)", allocator->priv->fd);
+
+  alloc->mem_type = GST_DRM_MEMORY_TYPE;
+
+  GST_OBJECT_FLAG_UNSET (allocator, GST_ALLOCATOR_FLAG_CUSTOM_ALLOC);
+}
+
+static void
+gst_wl_drm_allocator_register (gint fd)
+{
+  gst_allocator_register (GST_ALLOCATOR_WL_DRM,
+      g_object_new (GST_TYPE_WL_DRM_ALLOCATOR, "name",
+          "WlDrmMemory::allocator", "drm-fd", fd, NULL));
+}
+
+GstAllocator *
+gst_wl_drm_allocator_get (gint fd)
+{
+  GstAllocator *alloc;
+  alloc = gst_allocator_find (GST_ALLOCATOR_WL_DRM);
+  if (!alloc) {
+    gst_wl_drm_allocator_register (fd);
+    alloc = gst_allocator_find (GST_ALLOCATOR_WL_DRM);
+  }
+  return alloc;
+}
+
+gboolean
+gst_is_wl_drm_memory (GstMemory * mem)
+{
+  return gst_memory_is_type (mem, GST_DRM_MEMORY_TYPE);
+}
+
+static gboolean
+gst_wl_drm_validate_video_info (const GstVideoInfo * vinfo)
+{
+  gint height = GST_VIDEO_INFO_HEIGHT (vinfo);
+  gint base_stride = GST_VIDEO_INFO_PLANE_STRIDE (vinfo, 0);
+  gsize base_offs = GST_VIDEO_INFO_PLANE_OFFSET (vinfo, 0);
+  gint i;
+  gsize offs = 0;
+
+  for (i = 0; i < GST_VIDEO_INFO_N_PLANES (vinfo); i++) {
+    guint32 estride;
+
+    /* Overwrite the video info's stride and offset using the pitch calculcated
+     * by the kms driver. */
+    estride = gst_wl_drm_extrapolate_stride (vinfo->finfo, i, base_stride);
+
+    if (estride != GST_VIDEO_INFO_PLANE_STRIDE (vinfo, i))
+      return FALSE;
+
+    if (GST_VIDEO_INFO_PLANE_OFFSET (vinfo, i) - base_offs != offs)
+      return FALSE;
+
+    /* Note that we cannot negotiate special padding betweem each planes,
+     * hence using the display height here. */
+    offs +=
+        estride * GST_VIDEO_FORMAT_INFO_SCALE_HEIGHT (vinfo->finfo, i, height);
+  }
+
+  if (vinfo->size < offs)
+    return FALSE;
+
+  return TRUE;
+}
+
+struct wl_buffer * gst_wl_drm_memory_construct_wl_buffer (GstWlDisplay * display, GstMemory * mem, const GstVideoInfo * vinfo)
+{
+  guint width, height, size, maxsize;
+  guint stride, offset, memsize;
+
+  enum wl_drm_format format;
+  struct wl_buffer *buffer;
+  gint prime_fd;
+
+  prime_fd = gst_dmabuf_memory_get_fd (mem);
+  if (prime_fd < 0 ) {
+    GST_DEBUG_OBJECT (display, "Invalid prime_fd = %d", prime_fd);
+    return NULL;
+  }
+
+  GST_DEBUG_OBJECT (display, "mem (%p), prime_fd = %d", mem, prime_fd);
+
+  if (!gst_wl_drm_validate_video_info (vinfo)) {
+    GST_DEBUG_OBJECT (display, "Unsupported strides and offsets.");
+    return NULL;
+  }
+
+  width = GST_VIDEO_INFO_WIDTH (vinfo);
+  height = GST_VIDEO_INFO_HEIGHT (vinfo);
+  format = gst_video_format_to_wl_drm_format (GST_VIDEO_INFO_FORMAT (vinfo));
+  stride = GST_VIDEO_INFO_PLANE_STRIDE (vinfo, 0);
+  size = GST_VIDEO_INFO_SIZE (vinfo);
+  memsize = gst_memory_get_sizes (mem, &offset, &maxsize);
+
+  g_return_val_if_fail (gst_is_dmabuf_memory (mem), NULL);
+  g_return_val_if_fail (size <= memsize, NULL);
+  g_return_val_if_fail (gst_wl_display_check_format_for_drm (display,
+          GST_VIDEO_INFO_FORMAT (vinfo)), NULL);
+
+  buffer = wl_drm_create_linear_prime_buffer (display->drm, prime_fd,
+                                              width, height, format, 0, stride);
+
+  if (buffer) {
+  GST_DEBUG_OBJECT (display, "Creating wl_buffer from DRM of size %"
+      G_GSSIZE_FORMAT " (%d x %d, stride %d), format %s", size, width, height,
+      stride, gst_wl_drm_format_to_string (format));
+    return buffer;
+  }
+
+  GST_DEBUG_OBJECT (display, "Failed to create wl_buffer: prime_fd (%d)",
+      prime_fd);
+  return NULL;
+}
diff -ruN c/ext/wayland/wldrmallocator.h d/ext/wayland/wldrmallocator.h
--- c/ext/wayland/wldrmallocator.h	1970-01-01 00:00:00.000000000 +0000
+++ d/ext/wayland/wldrmallocator.h	2020-07-29 13:26:52.909368784 +0000
@@ -0,0 +1,82 @@
+/*
+ * GStreamer
+ *
+ * Copyright (C) 2012 Texas Instruments
+ *
+ * Authors:
+ *  Pooja Prajod <poojaprajod@ti.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+/**
+ * SECTION:GstWlDrmAllocator
+ * @short_description: GStreamer DRM allocator support
+ *
+ * Since: 1.6.3
+ */
+
+#ifndef __WL_DRM_ALLOCATOR_H__
+#define __WL_DRM_ALLOCATOR_H__
+
+#include <gst/gst.h>
+#include <gst/video/video.h>
+#include <gst/allocators/allocators.h>
+#include <stdint.h>
+
+#include <xf86drm.h>
+#include <xf86drmMode.h>
+#include <fcntl.h>
+
+#include <wayland-client.h>
+
+#include "wldisplay.h"
+
+G_BEGIN_DECLS
+
+#define GST_TYPE_WL_DRM_ALLOCATOR                  (gst_wl_drm_allocator_get_type ())
+#define GST_WL_DRM_ALLOCATOR(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GST_TYPE_WL_DRM_ALLOCATOR, GstWlDrmAllocator))
+#define GST_IS_WL_DRM_ALLOCATOR(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_WL_DRM_ALLOCATOR))
+#define GST_WL_DRM_ALLOCATOR_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GST_TYPE_WL_DRM_ALLOCATOR, GstWlDrmAllocatorClass))
+#define GST_IS_WL_DRM_ALLOCATOR_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_WL_DRM_ALLOCATOR))
+#define GST_WL_DRM_ALLOCATOR_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_WL_DRM_ALLOCATOR, GstWlDrmAllocatorClass))
+
+#define GST_ALLOCATOR_WL_DRM "wl_drm"
+
+typedef struct _GstWlDrmAllocator GstWlDrmAllocator;
+typedef struct _GstWlDrmAllocatorClass GstWlDrmAllocatorClass;
+typedef struct _GstWlDrmAllocatorPrivate GstWlDrmAllocatorPrivate;
+
+struct _GstWlDrmAllocator
+{
+  GstAllocator parent;
+  GstWlDrmAllocatorPrivate *priv;
+};
+
+struct _GstWlDrmAllocatorClass
+{
+  GstAllocatorClass parent_class;
+};
+
+GType gst_wl_drm_allocator_get_type (void) G_GNUC_CONST;
+
+GstAllocator * gst_wl_drm_allocator_get (gint fd);
+
+gboolean gst_is_wl_drm_memory (GstMemory * mem);
+struct wl_buffer * gst_wl_drm_memory_construct_wl_buffer (GstWlDisplay * display, GstMemory * mem, const GstVideoInfo * info);
+
+G_END_DECLS
+
+#endif /* __WL_DRM_ALLOCATOR_H__ */
diff -ruN c/ext/wayland/wlvideoformat.c d/ext/wayland/wlvideoformat.c
--- c/ext/wayland/wlvideoformat.c	2020-07-28 09:13:49.538147330 +0000
+++ d/ext/wayland/wlvideoformat.c	2020-07-29 13:26:52.909368784 +0000
@@ -38,6 +38,12 @@
 
 typedef struct
 {
+  enum wl_drm_format wl_format;
+  GstVideoFormat gst_format;
+} wl_DrmVideoFormat;
+
+typedef struct
+{
   guint wl_format;
   GstVideoFormat gst_format;
 } wl_DmabufVideoFormat;
@@ -83,6 +89,41 @@
   {WL_SHM_FORMAT_YUV444, GST_VIDEO_FORMAT_v308},
 };
 
+static const wl_DrmVideoFormat drmbuf_formats[] = {
+#if G_BYTE_ORDER == G_BIG_ENDIAN
+  {WL_DRM_FORMAT_XRGB8888, GST_VIDEO_FORMAT_xRGB},
+  {WL_DRM_FORMAT_ARGB8888, GST_VIDEO_FORMAT_ARGB},
+  {WL_DRM_FORMAT_XBGR8888, GST_VIDEO_FORMAT_xBGR},
+  {WL_DRM_FORMAT_RGBX8888, GST_VIDEO_FORMAT_RGBx},
+  {WL_DRM_FORMAT_BGRX8888, GST_VIDEO_FORMAT_BGRx},
+  {WL_DRM_FORMAT_ABGR8888, GST_VIDEO_FORMAT_ABGR},
+  {WL_DRM_FORMAT_RGBA8888, GST_VIDEO_FORMAT_RGBA},
+  {WL_DRM_FORMAT_BGRA8888, GST_VIDEO_FORMAT_BGRA},
+  {WL_DRM_FORMAT_RGB888, GST_VIDEO_FORMAT_RGB},
+  {WL_DRM_FORMAT_BGR888, GST_VIDEO_FORMAT_BGR},
+#else
+  {WL_DRM_FORMAT_XRGB8888, GST_VIDEO_FORMAT_BGRx},
+  {WL_DRM_FORMAT_ARGB8888, GST_VIDEO_FORMAT_BGRA},
+  {WL_DRM_FORMAT_XBGR8888, GST_VIDEO_FORMAT_RGBx},
+  {WL_DRM_FORMAT_RGBX8888, GST_VIDEO_FORMAT_xBGR},
+  {WL_DRM_FORMAT_BGRX8888, GST_VIDEO_FORMAT_xRGB},
+  {WL_DRM_FORMAT_ABGR8888, GST_VIDEO_FORMAT_RGBA},
+  {WL_DRM_FORMAT_RGBA8888, GST_VIDEO_FORMAT_ABGR},
+  {WL_DRM_FORMAT_BGRA8888, GST_VIDEO_FORMAT_ARGB},
+  {WL_DRM_FORMAT_RGB888, GST_VIDEO_FORMAT_BGR},
+  {WL_DRM_FORMAT_BGR888, GST_VIDEO_FORMAT_RGB},
+#endif
+  {WL_DRM_FORMAT_RGB565, GST_VIDEO_FORMAT_RGB16},
+  {WL_DRM_FORMAT_YUV410, GST_VIDEO_FORMAT_YUV9},
+  {WL_DRM_FORMAT_YUV411, GST_VIDEO_FORMAT_Y41B},
+  {WL_DRM_FORMAT_YUV420, GST_VIDEO_FORMAT_I420},
+  {WL_DRM_FORMAT_YUV422, GST_VIDEO_FORMAT_Y42B},
+  {WL_DRM_FORMAT_YUV444, GST_VIDEO_FORMAT_v308},
+  {WL_DRM_FORMAT_NV12, GST_VIDEO_FORMAT_NV12},
+  {WL_DRM_FORMAT_NV16, GST_VIDEO_FORMAT_NV16},
+  {WL_DRM_FORMAT_YUYV, GST_VIDEO_FORMAT_YUY2},
+};
+
 static const wl_DmabufVideoFormat dmabuf_formats[] = {
 #if G_BYTE_ORDER == G_BIG_ENDIAN
   {DRM_FORMAT_XRGB8888, GST_VIDEO_FORMAT_xRGB},
@@ -112,6 +153,16 @@
   {DRM_FORMAT_NV12, GST_VIDEO_FORMAT_NV12},
 };
 
+const gchar *
+gst_wl_gst_video_format_to_string (GstVideoFormat format)
+{
+  const gchar *unknown_format = "UNKNOWN";
+  if (format <= GST_VIDEO_FORMAT_UNKNOWN ||
+      format > GST_VIDEO_FORMAT_NV24)
+    return unknown_format;
+  return gst_video_format_to_string(format);
+}
+
 enum wl_shm_format
 gst_video_format_to_wl_shm_format (GstVideoFormat format)
 {
@@ -125,6 +176,19 @@
   return -1;
 }
 
+enum wl_drm_format
+gst_video_format_to_wl_drm_format (GstVideoFormat format)
+{
+  guint i;
+
+  for (i = 0; i < G_N_ELEMENTS (drmbuf_formats); i++)
+    if (drmbuf_formats[i].gst_format == format)
+      return drmbuf_formats[i].wl_format;
+
+  GST_WARNING ("wayland drm video format not found");
+  return -1;
+}
+
 gint
 gst_video_format_to_wl_dmabuf_format (GstVideoFormat format)
 {
@@ -151,6 +215,18 @@
 }
 
 GstVideoFormat
+gst_wl_drm_format_to_video_format (enum wl_drm_format wl_format)
+{
+  guint i;
+
+  for (i = 0; i < G_N_ELEMENTS (drmbuf_formats); i++)
+    if (drmbuf_formats[i].wl_format == wl_format)
+      return drmbuf_formats[i].gst_format;
+
+  return GST_VIDEO_FORMAT_UNKNOWN;
+}
+
+GstVideoFormat
 gst_wl_dmabuf_format_to_video_format (guint wl_format)
 {
   guint i;
@@ -165,11 +241,18 @@
 const gchar *
 gst_wl_shm_format_to_string (enum wl_shm_format wl_format)
 {
-  return gst_video_format_to_string
+  return gst_wl_gst_video_format_to_string
       (gst_wl_shm_format_to_video_format (wl_format));
 }
 
 const gchar *
+gst_wl_drm_format_to_string (enum wl_drm_format drm_format)
+{
+  return gst_wl_gst_video_format_to_string
+      (gst_wl_drm_format_to_video_format (drm_format));
+}
+
+const gchar *
 gst_wl_dmabuf_format_to_string (guint wl_format)
 {
   return gst_video_format_to_string
diff -ruN c/ext/wayland/wlvideoformat.h d/ext/wayland/wlvideoformat.h
--- c/ext/wayland/wlvideoformat.h	2020-07-28 09:13:49.538147330 +0000
+++ d/ext/wayland/wlvideoformat.h	2020-07-29 13:26:52.909368784 +0000
@@ -28,13 +28,19 @@
 #include <gst/video/video.h>
 #include <drm_fourcc.h>
 
+#include "wayland-drm-client-protocol.h"
+
 G_BEGIN_DECLS
 
+const gchar *gst_wl_gst_video_format_to_string (GstVideoFormat format);
 enum wl_shm_format gst_video_format_to_wl_shm_format (GstVideoFormat format);
+enum wl_drm_format gst_video_format_to_wl_drm_format (GstVideoFormat format);
 gint gst_video_format_to_wl_dmabuf_format (GstVideoFormat format);
 GstVideoFormat gst_wl_shm_format_to_video_format (enum wl_shm_format wl_format);
+GstVideoFormat gst_wl_drm_format_to_video_format (enum wl_drm_format wl_format);
 GstVideoFormat gst_wl_dmabuf_format_to_video_format (guint wl_format);
 const gchar *gst_wl_shm_format_to_string (enum wl_shm_format wl_format);
+const gchar *gst_wl_drm_format_to_string (enum wl_drm_format wl_format);
 const gchar *gst_wl_dmabuf_format_to_string (guint wl_format);
 
 G_END_DECLS
