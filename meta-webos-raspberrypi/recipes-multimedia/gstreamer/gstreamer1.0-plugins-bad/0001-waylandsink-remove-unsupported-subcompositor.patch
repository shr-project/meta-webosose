From d53cf9969771f164894c33ac23cbe87045f72988 Mon Sep 17 00:00:00 2001
From: Pankaj Maharana <pankaj.maharana@lge.com>
Date: Thu, 3 Oct 2019 17:05:37 +0530
Subject: [PATCH] rpi: gstreamer1.0*=1.16.0 gstreamer1.0-plugins-{bad,

---
 ext/wayland/gstwaylandsink.c | 129 +++++++++++++++++++++++++----
 ext/wayland/gstwaylandsink.h |   4 +
 ext/wayland/wldisplay.c      |   8 +-
 ext/wayland/wldisplay.h      |   1 -
 ext/wayland/wlwindow.c       | 154 ++++++-----------------------------
 ext/wayland/wlwindow.h       |   8 +-
 6 files changed, 148 insertions(+), 156 deletions(-)

diff --git a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
index 78dd294..0a82960 100644
--- a/ext/wayland/gstwaylandsink.c
+++ b/ext/wayland/gstwaylandsink.c
@@ -215,6 +215,10 @@ gst_wayland_sink_init (GstWaylandSink * sink)
 {
   g_mutex_init (&sink->display_lock);
   g_mutex_init (&sink->render_lock);
+
+  sink->old_time = 0;
+  sink->frame_cnt_in_sec = 0;
+  sink->frame_count = 0;
 }
 
 static void
@@ -308,6 +312,7 @@ gst_wayland_sink_set_display_from_context (GstWaylandSink * sink,
   GError *error = NULL;
 
   display = gst_wayland_display_handle_context_get_handle (context);
+	GST_DEBUG_OBJECT (sink, " wl_display = %p", display);
   sink->display = gst_wl_display_new_existing (display, FALSE, &error);
 
   if (error) {
@@ -334,6 +339,7 @@ gst_wayland_sink_find_display (GstWaylandSink * sink)
     query = gst_query_new_context (GST_WAYLAND_DISPLAY_HANDLE_CONTEXT_TYPE);
     if (gst_pad_peer_query (GST_VIDEO_SINK_PAD (sink), query)) {
       gst_query_parse_context (query, &context);
+			GST_DEBUG_OBJECT (sink, " wl_display = %p", sink->display);
       gst_wayland_sink_set_display_from_context (sink, context);
     }
     gst_query_unref (query);
@@ -379,18 +385,35 @@ gst_wayland_sink_change_state (GstElement * element, GstStateChange transition)
 
   switch (transition) {
     case GST_STATE_CHANGE_NULL_TO_READY:
+			GST_DEBUG_OBJECT (sink, "GST_STATE_CHANGE_NULL_TO_READY");
       if (!gst_wayland_sink_find_display (sink))
         return GST_STATE_CHANGE_FAILURE;
       break;
+    case GST_STATE_CHANGE_READY_TO_PAUSED:
+      GST_DEBUG_OBJECT (sink, "GST_STATE_CHANGE_READY_TO_PAUSED");
+      if (sink->display && sink->display->display) {
+        wl_display_flush (sink->display->display);
+      }
+      break;
+    case GST_STATE_CHANGE_PAUSED_TO_PLAYING:
+      GST_DEBUG_OBJECT (sink, "GST_STATE_CHANGE_PAUSED_TO_PLAYING");
+      break;
     default:
       break;
   }
 
   ret = GST_ELEMENT_CLASS (parent_class)->change_state (element, transition);
-  if (ret == GST_STATE_CHANGE_FAILURE)
+  if (ret == GST_STATE_CHANGE_FAILURE) {
+    GST_DEBUG_OBJECT (sink, "change_state: Failed");
     return ret;
+  } else {
+    GST_DEBUG_OBJECT (sink, "change_state: Success");
+  }
 
   switch (transition) {
+    case GST_STATE_CHANGE_PLAYING_TO_PAUSED:
+      GST_DEBUG_OBJECT (sink, "GST_STATE_CHANGE_PLAYING_TO_PAUSED");
+      break;
     case GST_STATE_CHANGE_PAUSED_TO_READY:
       gst_buffer_replace (&sink->last_buffer, NULL);
       if (sink->window) {
@@ -440,7 +463,8 @@ gst_wayland_sink_set_context (GstElement * element, GstContext * context)
     g_mutex_lock (&sink->display_lock);
     if (G_LIKELY (!sink->display)) {
       gst_wayland_sink_set_display_from_context (sink, context);
-    } else {
+      GST_DEBUG_OBJECT (sink, "display sink->display = %p", sink->display);
+		} else {
       GST_WARNING_OBJECT (element, "changing display handle is not supported");
       g_mutex_unlock (&sink->display_lock);
       return;
@@ -517,7 +541,7 @@ gst_wayland_sink_get_caps (GstBaseSink * bsink, GstCaps * filter)
 }
 
 static GstBufferPool *
-gst_wayland_create_pool (GstWaylandSink * sink, GstCaps * caps)
+gst_wayland_sink_create_pool (GstWaylandSink * sink, GstCaps * caps)
 {
   GstBufferPool *pool = NULL;
   GstStructure *structure;
@@ -540,12 +564,38 @@ gst_wayland_create_pool (GstWaylandSink * sink, GstCaps * caps)
   return pool;
 }
 
+static gboolean
+gst_wayland_sink_post_video_info_message (GstWaylandSink * sink,
+    GstVideoInfo * vinfo)
+{
+  g_return_val_if_fail (sink != NULL, FALSE);
+  g_return_val_if_fail (vinfo != NULL, FALSE);
+
+  /*post updated video info message */
+  GST_DEBUG_OBJECT (sink, "new width[%d] height[%d]",
+      GST_VIDEO_INFO_WIDTH (vinfo), GST_VIDEO_INFO_HEIGHT (vinfo));
+
+  /* post an application message as video-info */
+  gboolean ret = FALSE;
+  ret = gst_element_post_message (GST_ELEMENT_CAST (sink),
+      gst_message_new_application (GST_OBJECT (sink),
+          gst_structure_new ("video-info",
+              "width", G_TYPE_INT, GST_VIDEO_INFO_WIDTH (vinfo),
+              "height", G_TYPE_INT, GST_VIDEO_INFO_HEIGHT (vinfo),
+              "framerate", GST_TYPE_FRACTION, GST_VIDEO_INFO_FPS_N (vinfo),
+              GST_VIDEO_INFO_FPS_D (vinfo),
+              "par_w", G_TYPE_INT, GST_VIDEO_INFO_PAR_N (vinfo),
+              "par_h", G_TYPE_INT, GST_VIDEO_INFO_PAR_D (vinfo), NULL)));
+  return ret;
+}
+
 static gboolean
 gst_wayland_sink_set_caps (GstBaseSink * bsink, GstCaps * caps)
 {
   GstWaylandSink *sink;
   gboolean use_dmabuf;
   GstVideoFormat format;
+	GstBufferPool *newpool, *oldpool;
 
   sink = GST_WAYLAND_SINK (bsink);
 
@@ -559,10 +609,18 @@ gst_wayland_sink_set_caps (GstBaseSink * bsink, GstCaps * caps)
   sink->video_info_changed = TRUE;
 
   /* create a new pool for the new caps */
-  if (sink->pool)
-    gst_object_unref (sink->pool);
-  sink->pool = gst_wayland_create_pool (sink, caps);
+  newpool = gst_wayland_sink_create_pool (sink, caps);
+  if (!newpool)
+    goto no_pool;
 
+  /* we don't activate the internal pool yet as it may not be needed */
+  oldpool = sink->pool;
+  sink->pool = newpool;
+
+  if (oldpool) {
+    gst_buffer_pool_set_active (oldpool, FALSE);
+    gst_object_unref (oldpool);
+  }
   use_dmabuf = gst_caps_features_contains (gst_caps_get_features (caps, 0),
       GST_CAPS_FEATURE_MEMORY_DMABUF);
 
@@ -590,6 +648,12 @@ unsupported_format:
         gst_video_format_to_string (format));
     return FALSE;
   }
+no_pool:
+  {
+    GST_ERROR_OBJECT (sink,
+        "Could not create new pool %" GST_PTR_FORMAT, caps);
+    return FALSE;
+  }
 }
 
 static gboolean
@@ -604,9 +668,9 @@ gst_wayland_sink_propose_allocation (GstBaseSink * bsink, GstQuery * query)
   gst_query_parse_allocation (query, &caps, &need_pool);
 
   if (need_pool)
-    pool = gst_wayland_create_pool (sink, caps);
-
-  gst_query_add_allocation_pool (query, pool, sink->video_info.size, 2, 0);
+   pool = gst_wayland_sink_create_pool (sink, caps);
+  
+	gst_query_add_allocation_pool (query, pool, sink->video_info.size, 2, 0);
   if (pool)
     g_object_unref (pool);
 
@@ -687,6 +751,18 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
 
   GST_LOG_OBJECT (sink, "render buffer %p", buffer);
 
+  gint64 cur_time = 0;
+  sink->frame_cnt_in_sec++;
+  cur_time = g_get_monotonic_time ();
+  if (GST_TIME_AS_MSECONDS (cur_time) != GST_TIME_AS_MSECONDS (sink->old_time)) {
+    GST_INFO_OBJECT (sink, "fps: %d", sink->frame_cnt_in_sec);
+    sink->frame_cnt_in_sec = 0;
+  }
+  sink->old_time = cur_time;
+
+  GST_DEBUG_OBJECT (sink, "Showing frame %d", sink->frame_count);
+  sink->frame_count++;
+
   if (G_UNLIKELY (!sink->window)) {
     /* ask for window handle. Unlock render_lock while doing that because
      * set_window_handle & friends will lock it in this context */
@@ -694,13 +770,28 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
     gst_video_overlay_prepare_window_handle (GST_VIDEO_OVERLAY (sink));
     g_mutex_lock (&sink->render_lock);
 
-    if (!sink->window) {
+    GST_DEBUG_OBJECT (sink, "sink->window (%p) ", sink->window);
+
+		if (!sink->window) {
       /* if we were not provided a window, create one ourselves */
       sink->window = gst_wl_window_new_toplevel (sink->display,
           &sink->video_info, sink->fullscreen, &sink->render_lock);
       g_signal_connect_object (sink->window, "closed",
           G_CALLBACK (on_window_closed), sink, 0);
-    }
+    } else {
+      gint width;
+      /* set the initial size to be the same as the reported video size
+       * since the app does not pass the size even if it set window handle */
+      width = gst_util_uint64_scale_int_round (sink->video_info.width,
+          sink->video_info.par_n, sink->video_info.par_d);
+      gst_wl_window_set_render_rectangle (sink->window, 0, 0, width,
+          sink->video_info.height);
+		}
+
+		g_mutex_unlock (&sink->render_lock);
+    if (!gst_wayland_sink_post_video_info_message (sink, &sink->video_info))
+      goto video_info_failed;
+    g_mutex_lock (&sink->render_lock);
   }
 
   /* drop buffers until we get a frame callback */
@@ -857,6 +948,12 @@ no_window_size:
     ret = GST_FLOW_ERROR;
     goto done;
   }
+video_info_failed:
+  {
+    GST_ELEMENT_ERROR (sink, CORE, NEGOTIATION, (NULL),
+        (sink, "failed to post video info message!"));
+    goto done;
+  }
 no_buffer:
   {
     GST_WARNING_OBJECT (sink, "could not create buffer");
@@ -929,6 +1026,8 @@ gst_wayland_sink_set_window_handle (GstVideoOverlay * overlay, guintptr handle)
 
   g_clear_object (&sink->window);
 
+	GST_DEBUG_OBJECT (sink, "sink->window(%p), handle(%p)", sink->window, handle);
+
   if (handle) {
     if (G_LIKELY (gst_wayland_sink_find_display (sink))) {
       /* we cannot use our own display with an external window handle */
@@ -941,6 +1040,8 @@ gst_wayland_sink_set_window_handle (GstVideoOverlay * overlay, guintptr handle)
       } else {
         sink->window = gst_wl_window_new_in_surface (sink->display, surface,
             &sink->render_lock);
+        GST_DEBUG_OBJECT (sink, "gst_wayland_sink_find_display sink->window %p",
+            sink->window);
       }
     } else {
       GST_ERROR_OBJECT (sink, "Failed to find display handle, "
@@ -1005,14 +1106,13 @@ gst_wayland_sink_begin_geometry_change (GstWaylandVideo * video)
   g_return_if_fail (sink != NULL);
 
   g_mutex_lock (&sink->render_lock);
-  if (!sink->window || !sink->window->area_subsurface) {
+	if (!sink->window) {
     g_mutex_unlock (&sink->render_lock);
     GST_INFO_OBJECT (sink,
         "begin_geometry_change called without window, ignoring");
     return;
   }
 
-  wl_subsurface_set_sync (sink->window->area_subsurface);
   g_mutex_unlock (&sink->render_lock);
 }
 
@@ -1023,14 +1123,13 @@ gst_wayland_sink_end_geometry_change (GstWaylandVideo * video)
   g_return_if_fail (sink != NULL);
 
   g_mutex_lock (&sink->render_lock);
-  if (!sink->window || !sink->window->area_subsurface) {
+	if (!sink->window) {
     g_mutex_unlock (&sink->render_lock);
     GST_INFO_OBJECT (sink,
         "end_geometry_change called without window, ignoring");
     return;
   }
 
-  wl_subsurface_set_desync (sink->window->area_subsurface);
   g_mutex_unlock (&sink->render_lock);
 }
 
diff --git a/ext/wayland/gstwaylandsink.h b/ext/wayland/gstwaylandsink.h
index be92fe7..3f4faae 100644
--- a/ext/wayland/gstwaylandsink.h
+++ b/ext/wayland/gstwaylandsink.h
@@ -67,6 +67,10 @@ struct _GstWaylandSink
   gboolean redraw_pending;
   GMutex render_lock;
   GstBuffer *last_buffer;
+
+  gint64 old_time;
+  gint frame_cnt_in_sec;
+  guint frame_count;
 };
 
 struct _GstWaylandSinkClass
diff --git a/ext/wayland/wldisplay.c b/ext/wayland/wldisplay.c
index 9400095..f3155e9 100644
--- a/ext/wayland/wldisplay.c
+++ b/ext/wayland/wldisplay.c
@@ -99,9 +99,6 @@ gst_wl_display_finalize (GObject * gobject)
   if (self->compositor)
     wl_compositor_destroy (self->compositor);
 
-  if (self->subcompositor)
-    wl_subcompositor_destroy (self->subcompositor);
-
   if (self->registry)
     wl_registry_destroy (self->registry);
 
@@ -205,13 +202,11 @@ registry_handle_global (void *data, struct wl_registry *registry,
     uint32_t id, const char *interface, uint32_t version)
 {
   GstWlDisplay *self = data;
+  GST_DEBUG (" setup wayland interface : %s", interface);
 
   if (g_strcmp0 (interface, "wl_compositor") == 0) {
     self->compositor = wl_registry_bind (registry, id, &wl_compositor_interface,
         MIN (version, 3));
-  } else if (g_strcmp0 (interface, "wl_subcompositor") == 0) {
-    self->subcompositor =
-        wl_registry_bind (registry, id, &wl_subcompositor_interface, 1);
   } else if (g_strcmp0 (interface, "wl_shell") == 0) {
     self->wl_shell = wl_registry_bind (registry, id, &wl_shell_interface, 1);
   } else if (g_strcmp0 (interface, "xdg_wm_base") == 0) {
@@ -332,7 +327,6 @@ gst_wl_display_new_existing (struct wl_display * display,
   }
 
   VERIFY_INTERFACE_EXISTS (compositor, "wl_compositor");
-  VERIFY_INTERFACE_EXISTS (subcompositor, "wl_subcompositor");
   VERIFY_INTERFACE_EXISTS (shm, "wl_shm");
 
 #undef VERIFY_INTERFACE_EXISTS
diff --git a/ext/wayland/wldisplay.h b/ext/wayland/wldisplay.h
index 4ecc0d6..aaa3235 100644
--- a/ext/wayland/wldisplay.h
+++ b/ext/wayland/wldisplay.h
@@ -53,7 +53,6 @@ struct _GstWlDisplay
   /* globals */
   struct wl_registry *registry;
   struct wl_compositor *compositor;
-  struct wl_subcompositor *subcompositor;
   struct wl_shell *wl_shell;
   struct xdg_wm_base *xdg_wm_base;
   struct zwp_fullscreen_shell_v1 *fullscreen_shell;
diff --git a/ext/wayland/wlwindow.c b/ext/wayland/wlwindow.c
index c3dc61d..6902417 100644
--- a/ext/wayland/wlwindow.c
+++ b/ext/wayland/wlwindow.c
@@ -148,7 +148,8 @@ static void
 gst_wl_window_init (GstWlWindow * self)
 {
   self->configured = TRUE;
-  g_cond_init (&self->configure_cond);
+  self->internal_surface = FALSE;
+	g_cond_init (&self->configure_cond);
   g_mutex_init (&self->configure_mutex);
 }
 
@@ -169,17 +170,9 @@ gst_wl_window_finalize (GObject * gobject)
     wp_viewport_destroy (self->video_viewport);
 
   wl_proxy_wrapper_destroy (self->video_surface_wrapper);
-  wl_subsurface_destroy (self->video_subsurface);
-  wl_surface_destroy (self->video_surface);
 
-  if (self->area_subsurface)
-    wl_subsurface_destroy (self->area_subsurface);
-
-  if (self->area_viewport)
-    wp_viewport_destroy (self->area_viewport);
-
-  wl_proxy_wrapper_destroy (self->area_surface_wrapper);
-  wl_surface_destroy (self->area_surface);
+  if (self->internal_surface)
+    wl_surface_destroy (self->video_surface);
 
   g_clear_object (&self->display);
 
@@ -187,44 +180,38 @@ gst_wl_window_finalize (GObject * gobject)
 }
 
 static GstWlWindow *
-gst_wl_window_new_internal (GstWlDisplay * display, GMutex * render_lock)
+gst_wl_window_new_internal (GstWlDisplay * display,
+    struct wl_surface *surface, GMutex * render_lock)
 {
   GstWlWindow *window;
+	struct wl_region *region;
 
   window = g_object_new (GST_TYPE_WL_WINDOW, NULL);
   window->display = g_object_ref (display);
   window->render_lock = render_lock;
   g_cond_init (&window->configure_cond);
 
-  window->area_surface = wl_compositor_create_surface (display->compositor);
-  window->video_surface = wl_compositor_create_surface (display->compositor);
+  window->video_surface = surface;
+  if (!window->video_surface) {
+    window->video_surface = wl_compositor_create_surface (display->compositor);
+    window->internal_surface = TRUE;
+  }
 
-  window->area_surface_wrapper = wl_proxy_create_wrapper (window->area_surface);
   window->video_surface_wrapper =
       wl_proxy_create_wrapper (window->video_surface);
 
-  wl_proxy_set_queue ((struct wl_proxy *) window->area_surface_wrapper,
-      display->queue);
   wl_proxy_set_queue ((struct wl_proxy *) window->video_surface_wrapper,
       display->queue);
 
-  /* embed video_surface in area_surface */
-  window->video_subsurface =
-      wl_subcompositor_get_subsurface (display->subcompositor,
-      window->video_surface, window->area_surface);
-  wl_subsurface_set_desync (window->video_subsurface);
-
   if (display->viewporter) {
-    window->area_viewport = wp_viewporter_get_viewport (display->viewporter,
-        window->area_surface);
     window->video_viewport = wp_viewporter_get_viewport (display->viewporter,
         window->video_surface);
   }
 
   /* do not accept input */
-  wl_surface_set_input_region (window->area_surface, NULL);
-  wl_surface_set_input_region (window->video_surface, NULL);
-
+  region = wl_compositor_create_region (display->compositor);
+  wl_surface_set_input_region (window->video_surface, region);
+  wl_region_destroy (region);
   return window;
 }
 
@@ -255,7 +242,7 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
   GstWlWindow *window;
   gint width;
 
-  window = gst_wl_window_new_internal (display, render_lock);
+  window = gst_wl_window_new_internal (display, NULL, render_lock);
 
   /* Check which protocol we will use (in order of preference) */
   if (display->xdg_wm_base) {
@@ -263,7 +250,7 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
 
     /* First create the XDG surface */
     window->xdg_surface = xdg_wm_base_get_xdg_surface (display->xdg_wm_base,
-        window->area_surface);
+			 window->video_surface);
     if (!window->xdg_surface) {
       GST_ERROR ("Unable to get xdg_surface");
       goto error;
@@ -300,7 +287,7 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
   } else if (display->wl_shell) {
     /* go toplevel */
     window->wl_shell_surface = wl_shell_get_shell_surface (display->wl_shell,
-        window->area_surface);
+				window->video_surface);
     if (!window->wl_shell_surface) {
       GST_ERROR ("Unable to get wl_shell_surface");
       goto error;
@@ -311,7 +298,7 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
     gst_wl_window_ensure_fullscreen (window, fullscreen);
   } else if (display->fullscreen_shell) {
     zwp_fullscreen_shell_v1_present_surface (display->fullscreen_shell,
-        window->area_surface, ZWP_FULLSCREEN_SHELL_V1_PRESENT_METHOD_ZOOM,
+        window->video_surface, ZWP_FULLSCREEN_SHELL_V1_PRESENT_METHOD_ZOOM,
         NULL);
   } else {
     GST_ERROR ("Unable to use either wl_shell, xdg_wm_base or "
@@ -336,14 +323,8 @@ gst_wl_window_new_in_surface (GstWlDisplay * display,
     struct wl_surface * parent, GMutex * render_lock)
 {
   GstWlWindow *window;
-  window = gst_wl_window_new_internal (display, render_lock);
-
-  /* embed in parent */
-  window->area_subsurface =
-      wl_subcompositor_get_subsurface (display->subcompositor,
-      window->area_surface, parent);
-  wl_subsurface_set_desync (window->area_subsurface);
 
+  window = gst_wl_window_new_internal (display, parent, render_lock);
   wl_surface_commit (parent);
 
   return window;
@@ -396,8 +377,6 @@ gst_wl_window_resize_video_surface (GstWlWindow * window, gboolean commit)
     gst_video_sink_center_rect (src, dst, &res, FALSE);
   }
 
-  wl_subsurface_set_position (window->video_subsurface, res.x, res.y);
-
   if (commit) {
     wl_surface_damage (window->video_surface_wrapper, 0, 0, res.w, res.h);
     wl_surface_commit (window->video_surface_wrapper);
@@ -409,8 +388,8 @@ gst_wl_window_resize_video_surface (GstWlWindow * window, gboolean commit)
     region = wl_compositor_create_region (window->display->compositor);
     wl_region_add (region, 0, 0, window->render_rectangle.w,
         window->render_rectangle.h);
-    wl_surface_set_input_region (window->area_surface, region);
-    wl_region_destroy (region);
+    wl_surface_set_input_region (window->video_surface, region);
+		wl_region_destroy (region);
   }
 
   /* this is saved for use in wl_surface_damage */
@@ -422,13 +401,6 @@ gst_wl_window_set_opaque (GstWlWindow * window, const GstVideoInfo * info)
 {
   struct wl_region *region;
 
-  /* Set area opaque */
-  region = wl_compositor_create_region (window->display->compositor);
-  wl_region_add (region, 0, 0, window->render_rectangle.w,
-      window->render_rectangle.h);
-  wl_surface_set_opaque_region (window->area_surface, region);
-  wl_region_destroy (region);
-
   if (!GST_VIDEO_INFO_HAS_ALPHA (info)) {
     /* Set video opaque */
     region = wl_compositor_create_region (window->display->compositor);
@@ -448,7 +420,6 @@ gst_wl_window_render (GstWlWindow * window, GstWlBuffer * buffer,
         gst_util_uint64_scale_int_round (info->width, info->par_n, info->par_d);
     window->video_height = info->height;
 
-    wl_subsurface_set_sync (window->video_subsurface);
     gst_wl_window_resize_video_surface (window, FALSE);
     gst_wl_window_set_opaque (window, info);
   }
@@ -462,73 +433,11 @@ gst_wl_window_render (GstWlWindow * window, GstWlBuffer * buffer,
     /* clear both video and parent surfaces */
     wl_surface_attach (window->video_surface_wrapper, NULL, 0, 0);
     wl_surface_commit (window->video_surface_wrapper);
-    wl_surface_attach (window->area_surface_wrapper, NULL, 0, 0);
-    wl_surface_commit (window->area_surface_wrapper);
-  }
-
-  if (G_UNLIKELY (info)) {
-    /* commit also the parent (area_surface) in order to change
-     * the position of the video_subsurface */
-    wl_surface_damage (window->area_surface_wrapper, 0, 0,
-        window->render_rectangle.w, window->render_rectangle.h);
-    wl_surface_commit (window->area_surface_wrapper);
-    wl_subsurface_set_desync (window->video_subsurface);
   }
 
   wl_display_flush (window->display->display);
 }
 
-/* Update the buffer used to draw black borders. When we have viewporter
- * support, this is a scaled up 1x1 image, and without we need an black image
- * the size of the rendering areay. */
-static void
-gst_wl_window_update_borders (GstWlWindow * window)
-{
-  GstVideoFormat format;
-  GstVideoInfo info;
-  gint width, height;
-  GstBuffer *buf;
-  struct wl_buffer *wlbuf;
-  GstWlBuffer *gwlbuf;
-  GstAllocator *alloc;
-
-  if (window->no_border_update)
-    return;
-
-  if (window->display->viewporter) {
-    width = height = 1;
-    window->no_border_update = TRUE;
-  } else {
-    width = window->render_rectangle.w;
-    height = window->render_rectangle.h;
-  }
-
-  /* we want WL_SHM_FORMAT_XRGB8888 */
-#if G_BYTE_ORDER == G_BIG_ENDIAN
-  format = GST_VIDEO_FORMAT_xRGB;
-#else
-  format = GST_VIDEO_FORMAT_BGRx;
-#endif
-
-  /* draw the area_subsurface */
-  gst_video_info_set_format (&info, format, width, height);
-
-  alloc = gst_wl_shm_allocator_get ();
-
-  buf = gst_buffer_new_allocate (alloc, info.size, NULL);
-  gst_buffer_memset (buf, 0, 0, info.size);
-  wlbuf =
-      gst_wl_shm_memory_construct_wl_buffer (gst_buffer_peek_memory (buf, 0),
-      window->display, &info);
-  gwlbuf = gst_buffer_add_wl_buffer (buf, wlbuf, window->display);
-  gst_wl_buffer_attach (gwlbuf, window->area_surface_wrapper);
-
-  /* at this point, the GstWlBuffer keeps the buffer
-   * alive and will free it on wl_buffer::release */
-  gst_buffer_unref (buf);
-  g_object_unref (alloc);
-}
-
 void
 gst_wl_window_set_render_rectangle (GstWlWindow * window, gint x, gint y,
     gint w, gint h)
@@ -540,24 +449,13 @@ gst_wl_window_set_render_rectangle (GstWlWindow * window, gint x, gint y,
   window->render_rectangle.w = w;
   window->render_rectangle.h = h;
 
-  /* position the area inside the parent - needs a parent commit to apply */
-  if (window->area_subsurface)
-    wl_subsurface_set_position (window->area_subsurface, x, y);
-
   /* change the size of the area */
-  if (window->area_viewport)
-    wp_viewport_set_destination (window->area_viewport, w, h);
-
-  gst_wl_window_update_borders (window);
+  if (window->video_viewport)
+    wp_viewport_set_destination (window->video_viewport, w, h);
 
   if (window->video_width != 0) {
-    wl_subsurface_set_sync (window->video_subsurface);
     gst_wl_window_resize_video_surface (window, TRUE);
   }
-
-  wl_surface_damage (window->area_surface_wrapper, 0, 0, w, h);
-  wl_surface_commit (window->area_surface_wrapper);
-
-  if (window->video_width != 0)
-    wl_subsurface_set_desync (window->video_subsurface);
+  wl_surface_damage (window->video_surface_wrapper, 0, 0, w, h);
+  wl_surface_commit (window->video_surface_wrapper);
 }
diff --git a/ext/wayland/wlwindow.h b/ext/wayland/wlwindow.h
index c3f0172..33731fa 100644
--- a/ext/wayland/wlwindow.h
+++ b/ext/wayland/wlwindow.h
@@ -44,13 +44,8 @@ struct _GstWlWindow
   GMutex *render_lock;
 
   GstWlDisplay *display;
-  struct wl_surface *area_surface;
-  struct wl_surface *area_surface_wrapper;
-  struct wl_subsurface *area_subsurface;
-  struct wp_viewport *area_viewport;
   struct wl_surface *video_surface;
   struct wl_surface *video_surface_wrapper;
-  struct wl_subsurface *video_subsurface;
   struct wp_viewport *video_viewport;
   struct wl_shell_surface *wl_shell_surface;
   struct xdg_surface *xdg_surface;
@@ -72,6 +67,9 @@ struct _GstWlWindow
    * already been set on the area_subsurface */
   gboolean no_border_update;
 
+  /* this will be set when video_surface is created internal from
+   * wayland compositor and not passed from external app */
+  gboolean internal_surface;
 };
 
 struct _GstWlWindowClass
