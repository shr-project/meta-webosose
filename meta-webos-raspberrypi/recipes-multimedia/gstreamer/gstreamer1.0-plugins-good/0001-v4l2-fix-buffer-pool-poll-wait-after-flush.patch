From 17d31d8f03e471c6d91429356b5bd6ba1ad671f6 Mon Sep 17 00:00:00 2001
From: Pankaj Maharana <pankaj.maharana@lge.com>
Date: Tue, 10 Dec 2019 16:38:26 +0530
Subject: [PATCH] v4l2: fix buffer pool poll wait after flush

:Release Notes:
Fix infinite wait in buffer pool dqbuf after a flush due to seek or
resolution change

:Detailed Notes:
Fix infinite wait in buffer pool dqbuf after a flush due to seek or
resolution change.
When doing flush the buffers are not released properly to the bcm2835
v4l2 decoder buffer queue. As a result the it can not reinitializee
the buffers cleaned in flush and reassign the message context to them.
So the new buffer are not able to be queued and it returns without
queuing them as it does not find the message context that should have
been associated with the buffer.
Where as the decoder elements buffer pool waits for the decoded event
which is never recieved making it wait infinitely. Because the decoder
never recieved the input buffers to decode.

By setting active of the buffer pool of the decoder element as false
the buffers are cleaned properly and are released back to the decoder

:Testing Performed:
Tested the 1080p video plays with 22fps in raspberrypi4

:QA Notes:

:Issues Addressed:
[PLAT-94497] Adaptive streaming issue in Gstreamer v4l2 decoder

Upstream-Status: Unknown
---
 .../sys/v4l2/gstv4l2allocator.c               |  2 +-
 .../gst-plugins-good/sys/v4l2/gstv4l2object.c |  1 +
 .../sys/v4l2/gstv4l2transform.c               | 15 +++++---
 .../sys/v4l2/gstv4l2videodec.c                | 34 +++++++++++--------
 4 files changed, 33 insertions(+), 19 deletions(-)

diff --git a/subprojects/gst-plugins-good/sys/v4l2/gstv4l2allocator.c b/subprojects/gst-plugins-good/sys/v4l2/gstv4l2allocator.c
index e82a8532d6..bac75d286a 100644
--- a/subprojects/gst-plugins-good/sys/v4l2/gstv4l2allocator.c
+++ b/subprojects/gst-plugins-good/sys/v4l2/gstv4l2allocator.c
@@ -375,7 +375,7 @@ gst_v4l2_allocator_release (GstV4l2Allocator * allocator, GstV4l2Memory * mem)
   }
 
   /* Keep last, allocator may be freed after this call */
-  g_object_unref (allocator);
+  gst_object_unref (allocator);
 }
 
 static void
diff --git a/subprojects/gst-plugins-good/sys/v4l2/gstv4l2object.c b/subprojects/gst-plugins-good/sys/v4l2/gstv4l2object.c
index 9eb3b8e181..d6c5a5f050 100644
--- a/subprojects/gst-plugins-good/sys/v4l2/gstv4l2object.c
+++ b/subprojects/gst-plugins-good/sys/v4l2/gstv4l2object.c
@@ -4453,6 +4453,7 @@ gst_v4l2_object_stop (GstV4l2Object * v4l2object)
   GST_V4L2_SET_INACTIVE (v4l2object);
 
 done:
+  GST_DEBUG_OBJECT (v4l2object->dbg_obj, "stopped");
   return TRUE;
 }
 
diff --git a/subprojects/gst-plugins-good/sys/v4l2/gstv4l2transform.c b/subprojects/gst-plugins-good/sys/v4l2/gstv4l2transform.c
index edb3203630..5d3ed615f4 100644
--- a/subprojects/gst-plugins-good/sys/v4l2/gstv4l2transform.c
+++ b/subprojects/gst-plugins-good/sys/v4l2/gstv4l2transform.c
@@ -935,8 +935,10 @@ gst_v4l2_transform_prepare_output_buffer (GstBaseTransform * trans,
   do {
     pool = gst_base_transform_get_buffer_pool (trans);
 
-    if (!gst_buffer_pool_set_active (pool, TRUE))
-      goto activate_failed;
+    if (!gst_buffer_pool_is_active (pool)) {
+      if (!gst_buffer_pool_set_active (pool, TRUE))
+        goto activate_failed;
+    }
 
     GST_DEBUG_OBJECT (self, "Dequeue output buffer");
     ret = gst_buffer_pool_acquire_buffer (pool, outbuf, NULL);
@@ -1015,10 +1017,15 @@ gst_v4l2_transform_sink_event (GstBaseTransform * trans, GstEvent * event)
       GST_DEBUG_OBJECT (self, "flush stop");
       gst_v4l2_object_unlock_stop (self->v4l2capture);
       gst_v4l2_object_unlock_stop (self->v4l2output);
+
+      /* Ensure our internal output pool is flushed properly */
       if (self->v4l2output->pool)
-        gst_v4l2_buffer_pool_flush (self->v4l2output->pool);
+        gst_buffer_pool_set_active (self->v4l2output->pool, FALSE);
+
+      /* Ensure our internal capture pool is flushed properly*/
       if (self->v4l2capture->pool)
-        gst_v4l2_buffer_pool_flush (self->v4l2capture->pool);
+        gst_buffer_pool_set_active (self->v4l2capture->pool, FALSE);
+
       break;
     default:
       break;
diff --git a/subprojects/gst-plugins-good/sys/v4l2/gstv4l2videodec.c b/subprojects/gst-plugins-good/sys/v4l2/gstv4l2videodec.c
index abd01333cb..562b304777 100644
--- a/subprojects/gst-plugins-good/sys/v4l2/gstv4l2videodec.c
+++ b/subprojects/gst-plugins-good/sys/v4l2/gstv4l2videodec.c
@@ -331,33 +331,37 @@ gst_v4l2_video_dec_flush (GstVideoDecoder * decoder)
 
   GST_DEBUG_OBJECT (self, "Flushed");
 
+  self->output_flow = GST_FLOW_FLUSHING;
+
   /* Ensure the processing thread has stopped for the reverse playback
    * discount case */
   if (gst_pad_get_task_state (decoder->srcpad) == GST_TASK_STARTED) {
-    GST_VIDEO_DECODER_STREAM_UNLOCK (decoder);
-
     gst_v4l2_object_unlock (self->v4l2output);
     gst_v4l2_object_unlock (self->v4l2capture);
     gst_pad_stop_task (decoder->srcpad);
-    GST_VIDEO_DECODER_STREAM_LOCK (decoder);
   }
 
   if (G_UNLIKELY (!g_atomic_int_get (&self->active)))
     return TRUE;
 
-  self->output_flow = GST_FLOW_OK;
-
   gst_v4l2_object_unlock_stop (self->v4l2output);
   gst_v4l2_object_unlock_stop (self->v4l2capture);
 
+  /* Ensure our internal pools are flushed properly*/
+  if (self->v4l2output->pool)
+    gst_buffer_pool_set_active (self->v4l2output->pool, FALSE);
+
+  if (self->v4l2capture->pool)
+    gst_buffer_pool_set_active (self->v4l2capture->pool, FALSE);
+
+  self->output_flow = GST_FLOW_OK;
+
+  /* Ensure our internal pools are reactivated properly*/
   if (self->v4l2output->pool)
-    gst_v4l2_buffer_pool_flush (self->v4l2output->pool);
+    gst_buffer_pool_set_active (self->v4l2output->pool, TRUE);
 
-  /* gst_v4l2_buffer_pool_flush() calls streamon the capture pool and must be
-   * called after gst_v4l2_object_unlock_stop() stopped flushing the buffer
-   * pool. */
   if (self->v4l2capture->pool)
-    gst_v4l2_buffer_pool_flush (self->v4l2capture->pool);
+    gst_buffer_pool_set_active (self->v4l2capture->pool, TRUE);
 
   return TRUE;
 }
@@ -525,7 +529,7 @@ gst_v4l2_video_dec_loop (GstVideoDecoder * decoder)
     }
 
     ret = gst_buffer_pool_acquire_buffer (pool, &buffer, NULL);
-    g_object_unref (pool);
+    gst_object_unref (pool);
 
     if (ret != GST_FLOW_OK)
       goto beach;
@@ -771,9 +775,11 @@ gst_v4l2_video_dec_handle_frame (GstVideoDecoder * decoder,
     }
 
     /* Ensure our internal pool is activated */
-    if (!gst_buffer_pool_set_active (GST_BUFFER_POOL (self->v4l2capture->pool),
-            TRUE))
-      goto activate_failed;
+    if (!gst_buffer_pool_is_active (self->v4l2capture->pool)) {
+      if (!gst_buffer_pool_set_active (GST_BUFFER_POOL (self->v4l2capture->pool),
+              TRUE))
+        goto activate_failed;
+    }
   }
 
   task_state = gst_pad_get_task_state (GST_VIDEO_DECODER_SRC_PAD (self));
