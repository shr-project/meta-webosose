From d80e300284afc9baff76fb50ca7bd0e95b421dac Mon Sep 17 00:00:00 2001
From: "rajeshgopu.iv" <rajeshgopu.iv@lge.com>
Date: Mon, 27 May 2024 15:21:38 +0530
Subject: [PATCH] support fuse_passthrough to lib_fuse

:Release Notes:
App support for fuse passthrough

:Detailed Notes:
To support fuse_passthrough some fuse files and functions are
added to fuse lib.

"eca63da Enable passthrough mode for read/write operations (#919)"
https://github.com/libfuse/libfuse/commit/eca63dab456a10c3491c367711ab18cbcb34816e

In order to use the above patch we need kernel version 6.8 which is
having support of fuse passthrough implemented via "backing files ids"

Structure defined in kernel version 6.8 is as below
"/* Container for data related to mapping to backing file /
struct fuse_backing {
struct file *file; "

There is no backporting patch available for above feature "backing files
ids" for our current kernel version 5.4.

So we have taken the patch from android code base which support fuse
passthrough compatible with our kernel version 5.4.

Once backporting of "backing files ids" for lower kernel versions is
available, then we will take the patch that you have mentioned.

Also if we do backporting in linux kernel it will lot of time, since we
need more understanding on kernel side.

We have created the Epic (WRQ-23064) for doing backporting of the
patches.

:Testing Performed:
Build Tested

:QA Notes:
NA

:Issues Addressed:
[WRQ-5879] Create kernel patch to support fuse passthrough
---
Upstream-Status: Pending

 example/passthrough_hp.cc | 22 +++++++++++++++++++++-
 include/fuse_common.h     | 17 +++++++++++++++++
 include/fuse_kernel.h     |  9 +++++++--
 include/fuse_lowlevel.h   |  2 ++
 lib/fuse_lowlevel.c       | 15 +++++++++++++++
 lib/fuse_versionscript    |  1 +
 6 files changed, 63 insertions(+), 3 deletions(-)

diff --git a/example/passthrough_hp.cc b/example/passthrough_hp.cc
index 4e32789..f251d9c 100644
--- a/example/passthrough_hp.cc
+++ b/example/passthrough_hp.cc
@@ -155,6 +155,7 @@ struct Fs {
     dev_t src_dev;
     bool nosplice;
     bool nocache;
+    bool passthrough;
     size_t num_threads;
     bool clone_fd;
     std::string fuse_mount_options;
@@ -210,6 +211,8 @@ static void sfs_init(void *userdata, fuse_conn_info *conn) {
             conn->want |= FUSE_CAP_SPLICE_WRITE;
         if (conn->capable & FUSE_CAP_SPLICE_READ)
             conn->want |= FUSE_CAP_SPLICE_READ;
+        if (conn->capable & FUSE_CAP_PASSTHROUGH && fs.passthrough)
+            conn->want |= FUSE_CAP_PASSTHROUGH;
     }
 }
 
@@ -835,6 +838,13 @@ static void sfs_create(fuse_req_t req, fuse_ino_t parent, const char *name,
     Inode& inode = get_inode(e.ino);
     lock_guard<mutex> g {inode.m};
     inode.nopen++;
+     if (fs.passthrough) {
+        int passthrough_fh = fuse_passthrough_enable(req, fd);
+        if (passthrough_fh <= 0)
+            cerr << "DEBUG: fuse_passthrough_enable returned: " << passthrough_fh << endl;
+        else
+            fi->passthrough_fh = passthrough_fh;
+    }
     fuse_reply_create(req, &e, fi);
 }
 
@@ -889,6 +899,14 @@ static void sfs_open(fuse_req_t req, fuse_ino_t ino, fuse_file_info *fi) {
     fi->keep_cache = (fs.timeout != 0);
     fi->noflush = (fs.timeout == 0 && (fi->flags & O_ACCMODE) == O_RDONLY);
     fi->fh = fd;
+    if (fs.passthrough)
+    {
+        int passthrough_fh = fuse_passthrough_enable(req, fd);
+        if (passthrough_fh <= 0)
+            cerr << "DEBUG: fuse_passthrough_enable returned: " << passthrough_fh << endl;
+        else
+            fi->passthrough_fh = passthrough_fh;
+    }
     fuse_reply_open(req, fi);
 }
 
@@ -1207,6 +1225,7 @@ static cxxopts::ParseResult parse_options(int argc, char **argv) {
         ("help", "Print help")
         ("nocache", "Disable all caching")
         ("nosplice", "Do not use splice(2) to transfer data")
+        ("nopassthrough", "Do not use pass-through mode for read/write")
         ("single", "Run single-threaded")
         ("o", "Mount options (see mount.fuse(5) - only use if you know what "
               "you are doing)", cxxopts::value(mount_options))
@@ -1249,6 +1268,7 @@ static cxxopts::ParseResult parse_options(int argc, char **argv) {
     if (resolved_path == NULL)
         warn("WARNING: realpath() failed with");
     fs.source = std::string {resolved_path};
+    fs.passthrough = options.count("nopassthrough") == 0;
     free(resolved_path);
 
     std::vector<std::string> flattened_mount_opts;
@@ -1326,7 +1346,7 @@ int main(int argc, char *argv[]) {
     fuse_args args = FUSE_ARGS_INIT(0, nullptr);
     if (fuse_opt_add_arg(&args, argv[0]) ||
         fuse_opt_add_arg(&args, "-o") ||
-        fuse_opt_add_arg(&args, fs.fuse_mount_options.c_str()) ||
+        fuse_opt_add_arg(&args, "rw,nosuid,nodev,noatime,allow_other,fsname=hpps") ||
         (fs.debug_fuse && fuse_opt_add_arg(&args, "-odebug")))
         errx(3, "ERROR: Out of memory");
 
diff --git a/include/fuse_common.h b/include/fuse_common.h
index 3a1e1f8..7e33398 100644
--- a/include/fuse_common.h
+++ b/include/fuse_common.h
@@ -105,6 +105,11 @@ struct fuse_file_info {
 	 * same file handle. */
 	uint64_t fh;
 
+	/** Passthrough file handle id.  May be filled in by filesystem in
+	 * create and open.  It is used to create a passthrough connection
+	 * between FUSE file and lower file system file. */
+	uint32_t passthrough_fh;
+
 	/** Lock owner id.  Available in locking operations and flush */
 	uint64_t lock_owner;
 
@@ -440,6 +445,18 @@ struct fuse_loop_config_v1 {
  */
 #define FUSE_CAP_SETXATTR_EXT     (1 << 27)
 
+/**
+ * Indicates support for passthrough mode access for read/write operations.
+ *
+ * If this flag is set in the `capable` field of the `fuse_conn_info`
+ * structure, then the FUSE kernel module supports redirecting read/write
+ * operations to the lower file system instead of letting them to be handled
+ * by the FUSE daemon.
+ *
+ * This feature is disabled by default.
+ */
+#define FUSE_CAP_PASSTHROUGH            (1 << 28)
+
 /**
  * Ioctl flags
  *
diff --git a/include/fuse_kernel.h b/include/fuse_kernel.h
index 1b9d0df..393b251 100644
--- a/include/fuse_kernel.h
+++ b/include/fuse_kernel.h
@@ -401,7 +401,7 @@ struct fuse_file_lock {
 #define FUSE_HANDLE_KILLPRIV_V2	(1 << 28)
 #define FUSE_SETXATTR_EXT	(1 << 29)
 #define FUSE_INIT_EXT		(1 << 30)
-#define FUSE_INIT_RESERVED	(1 << 31)
+#define FUSE_PASSTHROUGH	(1 << 31)
 /* bits 32..63 get shifted down 32 bits into the flags2 field */
 #define FUSE_SECURITY_CTX	(1ULL << 32)
 #define FUSE_HAS_INODE_DAX	(1ULL << 33)
@@ -572,6 +572,7 @@ enum fuse_opcode {
 	FUSE_REMOVEMAPPING	= 49,
 	FUSE_SYNCFS		= 50,
 	FUSE_TMPFILE		= 51,
+	FUSE_CANONICAL_PATH = 2016,
 
 	/* CUSE specific operations */
 	CUSE_INIT		= 4096,
@@ -698,7 +699,7 @@ struct fuse_create_in {
 struct fuse_open_out {
 	uint64_t	fh;
 	uint32_t	open_flags;
-	uint32_t	padding;
+	uint32_t	passthrough_fh;
 };
 
 struct fuse_release_in {
@@ -989,6 +990,10 @@ struct fuse_notify_retrieve_in {
 /* Device ioctls: */
 #define FUSE_DEV_IOC_MAGIC		229
 #define FUSE_DEV_IOC_CLONE		_IOR(FUSE_DEV_IOC_MAGIC, 0, uint32_t)
+/* 127 is reserved for the V1 interface implementation in Android (deprecated) */
+/* 126 is reserved for the V2 interface implementation in Android */
+#define FUSE_DEV_IOC_PASSTHROUGH_OPEN	_IOW(FUSE_DEV_IOC_MAGIC, 126, __u32)
+
 
 struct fuse_lseek_in {
 	uint64_t	fh;
diff --git a/include/fuse_lowlevel.h b/include/fuse_lowlevel.h
index 9142b1c..b5edb91 100644
--- a/include/fuse_lowlevel.h
+++ b/include/fuse_lowlevel.h
@@ -1377,6 +1377,8 @@ int fuse_reply_attr(fuse_req_t req, const struct stat *attr,
  */
 int fuse_reply_readlink(fuse_req_t req, const char *link);
 
+int fuse_passthrough_enable(fuse_req_t req, unsigned int fd);
+
 /**
  * Reply with open parameters
  *
diff --git a/lib/fuse_lowlevel.c b/lib/fuse_lowlevel.c
index 1ce6083..6cab91e 100644
--- a/lib/fuse_lowlevel.c
+++ b/lib/fuse_lowlevel.c
@@ -27,6 +27,7 @@
 #include <errno.h>
 #include <assert.h>
 #include <sys/file.h>
+#include <sys/ioctl.h>
 
 #ifndef F_LINUX_SPECIFIC_BASE
 #define F_LINUX_SPECIFIC_BASE       1024
@@ -395,6 +396,7 @@ static void fill_open(struct fuse_open_out *arg,
 		      const struct fuse_file_info *f)
 {
 	arg->fh = f->fh;
+	arg->passthrough_fh = f->passthrough_fh;
 	if (f->direct_io)
 		arg->open_flags |= FOPEN_DIRECT_IO;
 	if (f->keep_cache)
@@ -461,6 +463,15 @@ int fuse_reply_readlink(fuse_req_t req, const char *linkname)
 	return send_reply_ok(req, linkname, strlen(linkname));
 }
 
+int fuse_passthrough_enable(fuse_req_t req, unsigned int fd) {
+    int ret;
+    ret = ioctl(req->se->fd, FUSE_DEV_IOC_PASSTHROUGH_OPEN, &fd);
+    if (ret <= 0)
+        fuse_log(FUSE_LOG_ERR, "fuse: passthrough_enable: %s\n", strerror(errno));
+
+    return ret;
+}
+
 int fuse_reply_open(fuse_req_t req, const struct fuse_file_info *f)
 {
 	struct fuse_open_out arg;
@@ -2016,6 +2027,8 @@ void do_init(fuse_req_t req, fuse_ino_t nodeid, const void *inarg)
 		}
 		if (arg->minor >= 38)
 			se->conn.capable |= FUSE_CAP_EXPIRE_ONLY;
+		if (arg->flags & FUSE_PASSTHROUGH)
+                se->conn.capable |= FUSE_PASSTHROUGH;
 	} else {
 		se->conn.max_readahead = 0;
 	}
@@ -2142,6 +2155,8 @@ void do_init(fuse_req_t req, fuse_ino_t nodeid, const void *inarg)
 		outargflags |= FUSE_CACHE_SYMLINKS;
 	if (se->conn.want & FUSE_CAP_EXPLICIT_INVAL_DATA)
 		outargflags |= FUSE_EXPLICIT_INVAL_DATA;
+    if (se->conn.want & FUSE_CAP_PASSTHROUGH)
+        outarg.flags |= FUSE_PASSTHROUGH;
 	if (se->conn.want & FUSE_CAP_SETXATTR_EXT)
 		outargflags |= FUSE_SETXATTR_EXT;
 
diff --git a/lib/fuse_versionscript b/lib/fuse_versionscript
index 55ab9e5..cbec8ec 100644
--- a/lib/fuse_versionscript
+++ b/lib/fuse_versionscript
@@ -168,6 +168,7 @@ FUSE_3.7 {
 	global:
 		fuse_set_log_func;
 		fuse_log;
+		fuse_passthrough_enable;
 } FUSE_3.4;
 
 FUSE_3.12 {
