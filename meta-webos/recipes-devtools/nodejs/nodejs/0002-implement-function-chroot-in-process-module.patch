From ef1c7df2b181903a9ab70a738567980fe2be21fd Mon Sep 17 00:00:00 2001
From: Lokesh Kumar Goel <lokeshkumar.goel@lge.com>
Date: Mon, 28 Aug 2017 14:01:48 -0700
Subject: [PATCH] implement function chroot in process module

:Release Notes:
Implement chroot function in nodejs

:Detailed Notes:
Current implementation of fork server does not support jailer mode
because of lack of native support in nodejs. This change implements
function `chroot' in `process' module in nodejs. As a result, it
becomes possible to implement jailer mode in fork server.

:Testing Performed:
Locally build and tested.

:QA Notes:

:Issues Addressed:
[DRD-10772] Implement jailer support for node fork server and unified services

Change-Id: I1c85be227165a630c48e688163d63ff1be1a8d43
Open-webOS-DCO-1.0-Signed-off-by: Ievgen Sherstobitov <ievgen.sherstobitov@lge.com>
Reviewed-on: https://g2g.lgsvl.com/7890
Reviewed-by: Andrii Koval <andrii.koval@lge.com>
Reviewed-by: Anastasia Timoshchuk <anastasia.timoshchuk@lge.com>
Reviewed-by: Ievgen Sherstobitov <ievgen.sherstobitov@lge.com>
Tested-by: Ievgen Sherstobitov <ievgen.sherstobitov@lge.com>
Reviewed-by: Sergiy Kryvonos <sergiy.kryvonos@lge.com>
---
 deps/uv/include/uv.h    |  2 ++
 deps/uv/src/unix/core.c |  6 ++++++
 deps/v8/src/d8-posix.cc | 27 +++++++++++++++++++++++++++
 deps/v8/src/d8.h        |  1 +
 src/node.cc             |  1 +
 src/node_internals.h    |  1 +
 src/node_process.cc     | 12 ++++++++++++
 7 files changed, 50 insertions(+)

diff --git a/deps/uv/include/uv.h b/deps/uv/include/uv.h
index 717c2e5..ca138e4 100644
--- a/deps/uv/include/uv.h
+++ b/deps/uv/include/uv.h
@@ -1492,6 +1492,8 @@ UV_EXTERN int uv_cwd(char* buffer, size_t* size);
 
 UV_EXTERN int uv_chdir(const char* dir);
 
+UV_EXTERN int uv_chroot(const char* dir);
+
 UV_EXTERN uint64_t uv_get_free_memory(void);
 UV_EXTERN uint64_t uv_get_total_memory(void);
 
diff --git a/deps/uv/src/unix/core.c b/deps/uv/src/unix/core.c
index f92446f..c5e3399 100644
--- a/deps/uv/src/unix/core.c
+++ b/deps/uv/src/unix/core.c
@@ -719,6 +719,12 @@ int uv_chdir(const char* dir) {
   return 0;
 }
 
+int uv_chroot(const char* dir) {
+  if (chroot(dir))
+    return UV__ERR(errno);
+
+  return 0;
+}
 
 void uv_disable_stdio_inheritance(void) {
   int fd;
diff --git a/deps/v8/src/d8-posix.cc b/deps/v8/src/d8-posix.cc
index 1172bf8..f0c1d86 100644
--- a/deps/v8/src/d8-posix.cc
+++ b/deps/v8/src/d8-posix.cc
@@ -566,6 +566,30 @@ void Shell::ChangeDirectory(const v8::FunctionCallbackInfo<v8::Value>& args) {
   }
 }
 
+void Shell::ChangeRootDirectory(const v8::FunctionCallbackInfo<v8::Value>& args) {
+  if (args.Length() != 1) {
+    const char* message = "chroot() takes one argument";
+    args.GetIsolate()->ThrowException(
+        String::NewFromUtf8(args.GetIsolate(), message, NewStringType::kNormal)
+            .ToLocalChecked());
+    return;
+  }
+  String::Utf8Value directory(args[0]);
+  if (*directory == NULL) {
+    const char* message = "os.chroot(): String conversion of argument failed.";
+    args.GetIsolate()->ThrowException(
+        String::NewFromUtf8(args.GetIsolate(), message, NewStringType::kNormal)
+            .ToLocalChecked());
+    return;
+  }
+  if (chroot(*directory) != 0) {
+    args.GetIsolate()->ThrowException(
+        String::NewFromUtf8(args.GetIsolate(), strerror(errno), NewStringType::kNormal)
+            .ToLocalChecked());
+    return;
+  }
+}
+
 
 void Shell::SetUMask(const v8::FunctionCallbackInfo<v8::Value>& args) {
   if (args.Length() != 1) {
@@ -857,6 +881,9 @@ void Shell::AddOSMethods(Isolate* isolate, Local<ObjectTemplate> os_templ) {
   os_templ->Set(String::NewFromUtf8(isolate, "chdir", NewStringType::kNormal)
                     .ToLocalChecked(),
                 FunctionTemplate::New(isolate, ChangeDirectory));
+  os_templ->Set(String::NewFromUtf8(isolate, "chroot", NewStringType::kNormal)
+                    .ToLocalChecked(),
+                FunctionTemplate::New(isolate, ChangeDirectory));
   os_templ->Set(String::NewFromUtf8(isolate, "setenv", NewStringType::kNormal)
                     .ToLocalChecked(),
                 FunctionTemplate::New(isolate, SetEnvironment));
diff --git a/deps/v8/src/d8.h b/deps/v8/src/d8.h
index e4a5870..bd0e111 100644
--- a/deps/v8/src/d8.h
+++ b/deps/v8/src/d8.h
@@ -445,6 +445,7 @@ class Shell : public i::AllStatic {
   // the "mkdir -p" command.
   static void System(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void ChangeDirectory(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void ChangeRootDirectory(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void SetEnvironment(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void UnsetEnvironment(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void SetUMask(const v8::FunctionCallbackInfo<v8::Value>& args);
diff --git a/src/node.cc b/src/node.cc
index 9fb5ab3..9327f5e 100644
--- a/src/node.cc
+++ b/src/node.cc
@@ -2008,6 +2008,7 @@ void SetupProcessObject(Environment* env,
 
   env->SetMethodNoSideEffect(process, "cwd", Cwd);
   env->SetMethod(process, "dlopen", DLOpen);
+  env->SetMethod(process, "chroot", Chroot);
   env->SetMethod(process, "reallyExit", Exit);
   env->SetMethodNoSideEffect(process, "uptime", Uptime);
 
diff --git a/src/node_internals.h b/src/node_internals.h
index 12089bc..4f6ef254 100644
--- a/src/node_internals.h
+++ b/src/node_internals.h
@@ -883,6 +883,7 @@ void PrintErrorString(const char* format, ...);
 
 void Abort(const v8::FunctionCallbackInfo<v8::Value>& args);
 void Chdir(const v8::FunctionCallbackInfo<v8::Value>& args);
+void Chroot(const v8::FunctionCallbackInfo<v8::Value>& args);
 void CPUUsage(const v8::FunctionCallbackInfo<v8::Value>& args);
 void Cwd(const v8::FunctionCallbackInfo<v8::Value>& args);
 void GetActiveHandles(const v8::FunctionCallbackInfo<v8::Value>& args);
diff --git a/src/node_process.cc b/src/node_process.cc
index 58f446a..2e973e9 100644
--- a/src/node_process.cc
+++ b/src/node_process.cc
@@ -85,6 +85,18 @@ void Chdir(const FunctionCallbackInfo<Value>& args) {
     return env->ThrowUVException(err, "chdir", nullptr, *path, nullptr);
 }
 
+void Chroot(const FunctionCallbackInfo<Value>& args) {
+  Environment* env = Environment::GetCurrent(args);
+
+  if (args.Length() != 1 || !args[0]->IsString())
+    return env->ThrowTypeError("Bad argument.");
+
+  Utf8Value path(args.GetIsolate(), args[0]);
+  int err = uv_chroot(*path);
+  if (err)
+    return env->ThrowUVException(err, "uv_chroot");
+}
+
 // CPUUsage use libuv's uv_getrusage() this-process resource usage accessor,
 // to access ru_utime (user CPU time used) and ru_stime (system CPU time used),
 // which are uv_timeval_t structs (long tv_sec, long tv_usec).
