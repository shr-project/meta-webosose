From b4e57b92c8690dfd1db477d70ed6810d89ff97d8 Mon Sep 17 00:00:00 2001
From: Rohit Anand <rohit.anand@lge.com>
Date: Mon, 6 Jun 2016 11:30:30 +0530
Subject: [PATCH] Add opkg install cmd smart size checking logic

---
 libopkg/opkg_archive.c  |  28 ++++++
 libopkg/opkg_archive.h  |   1 +
 libopkg/opkg_download.c |   9 ++
 libopkg/opkg_install.c  | 192 ++++++++++++++++++++++++++++++++++++----
 libopkg/opkg_install.h  |   2 +
 libopkg/pkg.c           | 170 ++++++++++++++++++++++++++++++++++-
 libopkg/pkg.h           |   7 +-
 libopkg/pkg_extract.c   |  23 +++++
 libopkg/pkg_extract.h   |   1 +
 9 files changed, 413 insertions(+), 20 deletions(-)

diff --git a/libopkg/opkg_archive.c b/libopkg/opkg_archive.c
index 1e8c9d1..9921f80 100644
--- a/libopkg/opkg_archive.c
+++ b/libopkg/opkg_archive.c
@@ -491,6 +491,29 @@ static int extract_all(struct archive *a, const char *dest, int flags, long unsi
     return (r == ARCHIVE_OK) ? 0 : -1;
 }
 
+static int extract_data_file_size_to_stream(struct archive *a, FILE * stream)
+{
+    struct archive_entry *entry;
+    int r;
+    int64_t size;
+    int eof;
+
+    while (1) {
+        entry = read_header(a, &eof);
+        if (eof)
+            return 0;
+        if (!entry)
+            return -1;
+
+        size = archive_entry_size(entry);
+        r = fprintf(stream, "%d\n", size);
+        if (r <= 0) {
+            opkg_msg(ERROR, "Failed to file size to stream: %s\n", strerror(errno));
+            return -1;
+        }
+   }
+}
+
 /* Open an outer archive with the given filename. */
 static struct archive *open_outer(const char *filename)
 {
@@ -934,6 +957,11 @@ int ar_extract_all(struct opkg_ar *ar, const char *prefix, long unsigned int *si
     return extract_all(ar->ar, prefix, ar->extract_flags, size);
 }
 
+int ar_extract_data_file_size_to_stream(struct opkg_ar *ar, FILE * stream)
+{
+    return extract_data_file_size_to_stream(ar->ar, stream);
+}
+
 void ar_close(struct opkg_ar *ar)
 {
     archive_read_free(ar->ar);
diff --git a/libopkg/opkg_archive.h b/libopkg/opkg_archive.h
index 0702c1f..846a3b9 100644
--- a/libopkg/opkg_archive.h
+++ b/libopkg/opkg_archive.h
@@ -35,6 +35,7 @@ int ar_extract_file_to_stream(struct opkg_ar *ar, const char *filename,
 int ar_extract_paths_to_stream(struct opkg_ar *ar, FILE * stream);
 int ar_extract_all(struct opkg_ar *ar, const char *prefix, long unsigned int *size);
 int gz_write_archive(const char *filename, const char *gz_filename);
+int ar_extract_data_file_size_to_stream(struct opkg_ar *ar, FILE * stream);
 void ar_close(struct opkg_ar *ar);
 
 #ifdef __cplusplus
diff --git a/libopkg/opkg_download.c b/libopkg/opkg_download.c
index e22ec0a..f972f78 100644
--- a/libopkg/opkg_download.c
+++ b/libopkg/opkg_download.c
@@ -23,8 +23,10 @@
 #include <string.h>
 #include <unistd.h>
 #include <libgen.h>
+#include <setjmp.h>
 
 #include "opkg_download.h"
+#include "opkg_install.h"
 #include "opkg_message.h"
 #include "opkg_verify.h"
 #include "opkg_utils.h"
@@ -403,6 +405,13 @@ static int opkg_prepare_file_for_install(const char *path, char **namep)
         }
     }
 
+    // Save previously installed package installed_size
+    // it's important value which used in verify_pkg_installable()
+    pkg->prev_installed_size = opkg_get_pkg_installed_size(pkg);
+    // Now installed_size field of old package should be reset to 0
+    // after hash_insert_pkg();
+    pkg->installed_size = 0;
+
     hash_insert_pkg(pkg, 1);
 
     if (namep)
diff --git a/libopkg/opkg_install.c b/libopkg/opkg_install.c
index 23a5a50..ed38baf 100644
--- a/libopkg/opkg_install.c
+++ b/libopkg/opkg_install.c
@@ -24,10 +24,14 @@
 #include <unistd.h>
 #include <sys/stat.h>
 #include <stdlib.h>
+#include <setjmp.h>
+#include <errno.h>
+#include <string.h>
 
 #include "pkg.h"
 #include "pkg_hash.h"
 #include "pkg_extract.h"
+#include "pkg_parse.h"
 
 #include "opkg_configure.h"
 #include "opkg_download.h"
@@ -44,6 +48,88 @@
 #include "xsystem.h"
 #include "xfuncs.h"
 
+// Also returns 0 on some error
+size_t opkg_get_pkg_installed_size(pkg_t *new_pkg)
+{
+    size_t size = 0;
+    pkg_t *old_pkg;
+
+    old_pkg = pkg_hash_fetch_installed_by_name(new_pkg->name);
+    if (!old_pkg)
+        return size;
+
+    // Fetch installed size fields to package
+    load_fields_from_control(old_pkg, PFM_INSTALLED_SIZE);
+    opkg_msg(DEBUG, "After loading installed_size is %lu\n", old_pkg->installed_size);
+
+     // Calculate size if it's not present
+    if (old_pkg->installed_size == 0)
+    {
+        opkg_msg(DEBUG, "Meta \"Installed-Size\" hasn't been set, calculate it!\n");
+        str_list_t *files;
+        str_list_elt_t *iter;
+        files = pkg_get_installed_files(old_pkg);
+        struct stat st;
+
+        for (iter = str_list_first(files);
+             iter; iter=str_list_next(files, iter))
+        {
+            stat((char *)iter->data, &st);
+            if (!S_ISDIR(st.st_mode))
+                size += st.st_size;
+        }
+        pkg_free_installed_files(old_pkg);
+    }
+    else // use meta information
+    {
+        size = old_pkg->installed_size;
+    }
+
+    opkg_msg(DEBUG, "Package %s already ocupies %zu bytes\n", old_pkg->name, size);
+    return size;
+}
+
+// Also returns 0 on some error
+size_t opkg_get_pkg_size_to_install(pkg_t *pkg)
+{
+     pkg_t *new_pkg;
+
+     str_list_t *new_list;
+     str_list_elt_t *niter, *iter;
+     size_t size = 0;
+
+     new_pkg = pkg_hash_fetch_best_installation_candidate_by_name(pkg->name);
+     if (!new_pkg)
+        goto done_fail;
+
+     new_pkg->state_flag |= SF_USER;
+
+     new_list = pkg_get_installed_files_and_size_list(new_pkg);
+     if (!new_list)
+        goto done_fail;
+
+     // Achieved list have the following structure
+     // filename1
+     // filesize1
+     // filename2
+     // filesize2
+     // ...
+     // EOF
+     // So we need to parse from it lines with sizes
+     for (iter = str_list_first(new_list), niter = str_list_next(new_list, iter);
+        iter;
+        iter = niter, niter = str_list_next(new_list, niter)) {
+        char *new_file = (char *)iter->data;
+        size += atoi(new_file);
+     }
+     new_pkg->installed_files = NULL;
+
+     opkg_msg(DEBUG, "After recalculation: new packages requires %zu bytes\n", size);
+
+done_fail:
+     return size;
+}
+
 static int update_file_ownership(pkg_t * new_pkg, pkg_t * old_pkg)
 {
     file_list_t *new_list, *old_list;
@@ -90,22 +176,28 @@ static int update_file_ownership(pkg_t * new_pkg, pkg_t * old_pkg)
     return 0;
 }
 
+// Was calculated according to one ipk
+#define IPK_COMPRESS_RATIO 5.0
+
+#define USE_RATIO_ESTIMATION 1
+#define USE_REAL_CALCULATION 2
+
 static int verify_pkg_installable(pkg_t * pkg)
 {
     unsigned long kbs_available, pkg_size_kbs;
     char *root_dir = NULL;
     struct stat s;
 
-    if (opkg_config->force_space || pkg->installed_size == 0)
+    if (opkg_config->force_space)
         return 0;
 
     if (pkg->dest) {
         int have_overlay_root = !strcmp(pkg->dest->name, "root")
-                && opkg_config->overlay_root
-                && !stat(opkg_config->overlay_root, &s)
+                && opkg_config->offline_root
+                && !stat(opkg_config->offline_root, &s)
                 && (s.st_mode & S_IFDIR);
         if (have_overlay_root)
-            root_dir = opkg_config->overlay_root;
+            root_dir = opkg_config->offline_root;
         else
             root_dir = pkg->dest->root_dir;
     }
@@ -113,18 +205,79 @@ static int verify_pkg_installable(pkg_t * pkg)
     if (!root_dir)
         root_dir = opkg_config->default_dest->root_dir;
 
-    kbs_available = get_available_kbytes(root_dir);
+    // Here goes detection of needed space
+    // Before package inserting we need to fetch previous installed size
+    size_t bytes_available = get_available_kbytes(root_dir) * 1024;
+
+    size_t new_size = 0;
+    size_t installed_size = pkg->prev_installed_size;
+    size_t bytes_needed = 0;
+
+    jmp_buf env;
+    int jmp_selector = setjmp(env);
+
+    switch (jmp_selector)
+    {
+        case 0: // Get size using meta info
+            if (pkg->installed_size == 0)
+            {
+                opkg_msg(DEBUG, "Meta information \"Installed-Size\" not present "
+                        "in the package to be installed, switch to compress ratio estimation\n");
+                longjmp(env, USE_RATIO_ESTIMATION); // jump next
+            }
+            new_size = pkg->installed_size;
+            opkg_msg(DEBUG, "Meta \"Installed-Size\" %zu bytes\n", new_size);
+            break;
 
-    pkg_size_kbs = (pkg->installed_size + 1023) / 1024;
+        case USE_RATIO_ESTIMATION: // Get size according to compress ratio
+            {
+                struct stat st;
+
+                if (stat(pkg->local_filename, &st) == -1)
+                {
+                    opkg_msg(DEBUG, "Warning: unable to fetch package local filename: %s\n", strerror(errno));
+                    longjmp(env, USE_REAL_CALCULATION); // jump next
+                }
+                opkg_msg(DEBUG, "File %s size is %zu bytes\n", pkg->local_filename, (size_t) st.st_size);
+
+                new_size = st.st_size * IPK_COMPRESS_RATIO;
+                pkg->use_compress_ratio_estimation = 1;
+
+                opkg_msg(DEBUG, "With compress ratio %.1f "
+                        "the size of package should be %zu bytes\n",
+                        IPK_COMPRESS_RATIO, new_size);
+            }
+            break;
+
+        case USE_REAL_CALCULATION: // Get size through calculation. The longest path.
+            new_size = opkg_get_pkg_size_to_install(pkg);
+
+            // Reset compress ratio estimation flag, it could be set previously
+            pkg->use_compress_ratio_estimation = 0;
+            break;
+    }
+
+    bytes_needed = (installed_size >= new_size) ? 0 : new_size - installed_size;
+    opkg_msg(DEBUG, "Installed size %zu, new size %zu, %zu bytes needed\n",
+            installed_size, new_size, bytes_needed);
+
+    // The package size does not consider the actual size of file system clusters
+    if (bytes_needed >= bytes_available)
+    {
+        // Try to calculate a real installed size
+        // If heuristical calculation didn't succeed
+        if (jmp_selector == USE_RATIO_ESTIMATION)
+            longjmp(env, USE_REAL_CALCULATION);
+
+        opkg_msg(ERROR, "Only have %zuK bytes available on filesystem, needs %zuK bytes\n",
+                bytes_available / 1024, bytes_needed / 1024);
 
-    if (pkg_size_kbs >= kbs_available) {
-        opkg_msg(ERROR,
-                 "Only have %ldkb available on filesystem %s, "
-                 "pkg %s needs %ld\n", kbs_available, root_dir, pkg->name,
-                 pkg_size_kbs);
         return -1;
     }
 
+    // Update package size to be saved to control file after installation
+    pkg->installed_size = new_size;
+
     return 0;
 }
 
@@ -996,9 +1149,8 @@ int opkg_install_pkg(pkg_t * pkg)
     opkg_msg(INFO, "Installing maintainer scripts.\n");
     err = install_maintainer_scripts(pkg, old_pkg);
     if (err) {
-        opkg_msg(ERROR,
-                 "Failed to extract maintainer scripts for %s."
-                 " Package debris may remain!\n", pkg->name);
+        opkg_msg(ERROR, "Failed to extract maintainer scripts for %s. There is not enough free disk space.\n", pkg->name);
+        remove_maintainer_scripts(pkg);
         goto pkg_is_hosed;
     }
 
@@ -1009,9 +1161,9 @@ int opkg_install_pkg(pkg_t * pkg)
 
     err = install_data_files(pkg);
     if (err) {
-        opkg_msg(ERROR,
-                 "Failed to extract data files for %s. "
-                 "Package debris may remain!\n", pkg->name);
+        opkg_msg(ERROR, "Failed to extract data files for %s. There is not enough free disk space.\n", pkg->name);
+        remove_data_files_and_list(pkg);
+        remove_maintainer_scripts(pkg);
         goto pkg_is_hosed;
     }
 
@@ -1041,6 +1193,12 @@ int opkg_install_pkg(pkg_t * pkg)
         ab_pkg->state_status = pkg->state_status;
 
     sigprocmask(SIG_UNBLOCK, &newset, &oldset);
+
+    // Save calculated value to the control file of a package
+    // Only If we not used a compress ratio estimation
+    if (!pkg->use_compress_ratio_estimation)
+        save_field_to_control_file(pkg, "Installed-Size: %lu\n", pkg->installed_size);
+
     return 0;
 
  UNWIND_POSTRM_UPGRADE_OLD_PKG:
diff --git a/libopkg/opkg_install.h b/libopkg/opkg_install.h
index 8b17105..ffc878f 100644
--- a/libopkg/opkg_install.h
+++ b/libopkg/opkg_install.h
@@ -27,6 +27,8 @@ extern "C" {
 #endif
 
 int opkg_install_pkg(pkg_t * pkg);
+size_t opkg_get_pkg_size_to_install(pkg_t *pkg);
+size_t opkg_get_pkg_installed_size(pkg_t *pkg);
 
 #ifdef __cplusplus
 }
diff --git a/libopkg/pkg.c b/libopkg/pkg.c
index 81732f1..4b94939 100644
--- a/libopkg/pkg.c
+++ b/libopkg/pkg.c
@@ -24,7 +24,9 @@
 #include <unistd.h>
 #include <libgen.h>
 #include <stdlib.h>
-#include <sys/stat.h>
+#include <sys/statvfs.h>
+#include <errno.h>
+#include <stdarg.h>
 
 #include "pkg.h"
 
@@ -119,6 +121,8 @@ static void pkg_init(pkg_t * pkg)
     pkg->sha256sum = NULL;
     pkg->size = 0;
     pkg->installed_size = 0;
+    pkg->prev_installed_size = 0;
+    pkg->use_compress_ratio_estimation = 0;
     pkg->priority = NULL;
     pkg->source = NULL;
     conffile_list_init(&pkg->conffiles);
@@ -393,7 +397,10 @@ int pkg_merge(pkg_t * oldpkg, pkg_t * newpkg)
         oldpkg->sha256sum = xstrdup(newpkg->sha256sum);
     if (!oldpkg->size)
         oldpkg->size = newpkg->size;
-    if (!oldpkg->installed_size)
+
+     // oldpkg installed_size moved to prev_installed_size
+     // so override this field
+    if (!oldpkg->installed_size || newpkg->prev_installed_size > 0)
         oldpkg->installed_size = newpkg->installed_size;
     if (!oldpkg->priority)
         oldpkg->priority = xstrdup(newpkg->priority);
@@ -441,6 +448,165 @@ abstract_pkg_t *abstract_pkg_new(void)
     return ab_pkg;
 }
 
+int save_field_to_control_file(pkg_t *pkg, const char *fmt, ...)
+{
+    char *filename;
+    sprintf_alloc(&filename,"%s/%s.control", pkg->dest->info_dir, pkg->name);
+    FILE *fp;
+
+    fp = fopen(filename, "a");
+    if (!fp) {
+        opkg_perror(ERROR, "Failed to open %s: %s\n", filename, strerror(errno));
+        goto done;
+    }
+
+    va_list args; // set arguments pointer
+    va_start(args, fmt);
+
+    if (vfprintf(fp, fmt, args) < 0)
+        opkg_perror(ERROR, "Failed to write to %s: %s\n", filename, strerror(errno));
+    else
+        opkg_msg(DEBUG, "Field added to %s\n", filename);
+
+    va_end(args);
+
+    fclose(fp);
+
+done:
+    free(filename);
+    return errno;
+}
+
+int
+load_fields_from_control(pkg_t *pkg, uint pfm)
+{
+    char *file_name;
+    FILE *fp;
+    int r;
+
+    sprintf_alloc(&file_name, "%s/%s.control", pkg->dest->info_dir, pkg->name);
+
+    fp = fopen(file_name, "r");
+    if (fp == NULL) {
+        opkg_perror(ERROR, "Failed to open %s", file_name);
+        free(file_name);
+        return errno;
+    }
+
+    free(file_name);
+
+    r = pkg_parse_from_stream(pkg, fp, PFM_ALL ^ pfm);
+    if (r != 0) {
+        opkg_msg(DEBUG, "Unable to read control file for %s. May be empty.\n",
+                 pkg->name);
+    }
+
+    fclose(fp);
+
+    return 0;
+}
+
+int
+set_flags_from_control(pkg_t *pkg)
+{
+    return load_fields_from_control(pkg, PFM_ESSENTIAL);
+}
+
+str_list_t *
+pkg_get_installed_files_and_size_list(pkg_t *pkg)
+{
+     int err, fd;
+     char *list_file_name = NULL;
+     FILE *list_file = NULL;
+     char *line = NULL;
+     char *installed_file_name = NULL;
+     char *installed_file_size = NULL;
+     struct statvfs st;
+
+     pkg->installed_files = str_list_alloc();
+
+     sprintf_alloc(&list_file_name, "%s/%s.list.XXXXXX", opkg_config->tmp_dir, pkg->name);
+     fd = mkstemp(list_file_name);
+     if (fd == -1) {
+	  opkg_perror(ERROR, "Failed to make temp file %s.", list_file_name);
+	  free(list_file_name);
+	  str_list_deinit(pkg->installed_files);
+	  pkg->installed_files = NULL;
+	  return NULL;
+     }
+     list_file = fdopen(fd, "r+");
+     if (list_file == NULL) {
+	  opkg_perror(ERROR, "Failed to fdopen temp file %s.", list_file_name);
+	  close(fd);
+	  unlink(list_file_name);
+	  free(list_file_name);
+	  str_list_deinit(pkg->installed_files);
+	  pkg->installed_files = NULL;
+	  return NULL;
+     }
+
+     if(pkg->local_filename == NULL) {
+          opkg_msg(DEBUG2, "Null package.\n");
+          fclose(list_file);
+          unlink(list_file_name);
+          free(list_file_name);
+          str_list_deinit(pkg->installed_files);
+          pkg->installed_files = NULL;
+          return NULL;
+     }
+
+     err = pkg_extract_data_file_size_to_stream(pkg, list_file);
+     if (err) {
+	  opkg_msg(ERROR, "Error extracting file list from %s.\n", pkg->local_filename);
+	  fclose(list_file);
+	  unlink(list_file_name);
+	  free(list_file_name);
+	  str_list_deinit(pkg->installed_files);
+	  pkg->installed_files = NULL;
+	  return NULL;
+     }
+     rewind(list_file);
+
+     while (1) {
+	  line = file_read_line_alloc(list_file);
+	  if (line == NULL) {
+	       break;
+	  }
+	  if (opkg_config->offline_root) // Check whether option '-o' was used
+		  sprintf_alloc(&installed_file_name, "%s/%s", opkg_config->offline_root, line);
+	  else
+		  sprintf_alloc(&installed_file_name, "/%s", line);
+	  free(line);
+	  line = file_read_line_alloc(list_file);
+	  sprintf_alloc(&installed_file_size, "%s", line);
+	  free(line);
+
+	  if (installed_file_size[0] == '0') {
+		if (!statvfs(installed_file_name, &st)) {
+			if (st.f_flag & ST_RDONLY) {
+				opkg_msg(ERROR, "%s Read-only file system.\n", pkg->local_filename);
+				free(installed_file_name);
+				free(installed_file_size);
+				fclose(list_file);
+				unlink(list_file_name);
+				free(list_file_name);
+				return NULL;
+			}
+		}
+	  }
+	  free(installed_file_name);
+	  str_list_append(pkg->installed_files, installed_file_size);
+	  free(installed_file_size);
+     }
+
+     fclose(list_file);
+
+     unlink(list_file_name);
+     free(list_file_name);
+
+     return pkg->installed_files;
+}
+
 static const char *pkg_state_want_to_str(pkg_state_want_t sw)
 {
     unsigned int i;
diff --git a/libopkg/pkg.h b/libopkg/pkg.h
index d269528..f38dc4e 100644
--- a/libopkg/pkg.h
+++ b/libopkg/pkg.h
@@ -160,6 +160,8 @@ struct pkg {
     char *sha256sum;
     unsigned long size;     /* in bytes */
     unsigned long installed_size;   /* in bytes */
+    size_t prev_installed_size; // Previous package installed size
+    int use_compress_ratio_estimation;
     char *priority;
     char *source;
     conffile_list_t conffiles;
@@ -204,9 +206,12 @@ int abstract_pkg_name_compare(const void *a, const void *b);
 
 void pkg_formatted_info(FILE * fp, pkg_t * pkg, const char *fields_filter);
 
-void set_flags_from_control(pkg_t * pkg);
+int save_field_to_control_file(pkg_t *pkg, const char *fmt, ...);
+int load_fields_from_control(pkg_t *pkg, uint pfm);
+int set_flags_from_control(pkg_t *pkg);
 
 void pkg_print_status(pkg_t * pkg, FILE * file);
+file_list_t *pkg_get_installed_files_and_size_list(pkg_t *pkg);
 file_list_t *pkg_get_installed_files(pkg_t * pkg);
 void pkg_free_installed_files(pkg_t * pkg);
 void pkg_remove_installed_files_list(pkg_t * pkg);
diff --git a/libopkg/pkg_extract.c b/libopkg/pkg_extract.c
index 001851c..0202d1a 100644
--- a/libopkg/pkg_extract.c
+++ b/libopkg/pkg_extract.c
@@ -123,3 +123,26 @@ int pkg_extract_data_file_names_to_stream(pkg_t * pkg, FILE * stream)
     ar_close(ar);
     return r;
 }
+
+int pkg_extract_data_file_size_to_stream(pkg_t *pkg, FILE *stream)
+{
+    int r;
+    struct opkg_ar *ar;
+
+    ar = ar_open_pkg_data_archive(pkg->local_filename);
+    if (!ar) {
+        opkg_msg(ERROR, "Failed to extract data.tar.gz from package '%s'.\n",
+                 pkg->local_filename);
+        return -1;
+    }
+
+    r = ar_extract_data_file_size_to_stream(ar, stream);
+
+    if (r < 0)
+        opkg_msg(ERROR,
+                 "Failed to extract file size from package '%s'.\n",
+                 pkg->local_filename);
+
+    ar_close(ar);
+    return r;
+}
diff --git a/libopkg/pkg_extract.h b/libopkg/pkg_extract.h
index 2f5cca6..d690044 100644
--- a/libopkg/pkg_extract.h
+++ b/libopkg/pkg_extract.h
@@ -32,6 +32,7 @@ int pkg_extract_control_files_to_dir_with_prefix(pkg_t * pkg,
                                                  const char *prefix);
 int pkg_extract_data_files_to_dir(pkg_t * pkg, const char *dir);
 int pkg_extract_data_file_names_to_stream(pkg_t * pkg, FILE * file);
+int pkg_extract_data_file_size_to_stream(pkg_t *pkg, FILE *stream);
 
 #ifdef __cplusplus
 }
