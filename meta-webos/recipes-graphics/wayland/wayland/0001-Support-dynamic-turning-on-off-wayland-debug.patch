From 3bb652a346dd8ea9819138d0537a96c3d74cabac Mon Sep 17 00:00:00 2001
From: "hyunsook.park" <hyunsook.park@lge.com>
Date: Tue, 27 Jan 2015 16:45:01 +0900
Subject: [PATCH] Support dynamic turning on/off wayland debug

Use named pipe to command on a process

Upstream-Status: Inappropriate [webOS specific]
---
 src/wayland-server.c | 70 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 70 insertions(+)

diff --git a/src/wayland-server.c b/src/wayland-server.c
index 3f48dfe..12a0464 100644
--- a/src/wayland-server.c
+++ b/src/wayland-server.c
@@ -140,6 +140,7 @@ struct wl_protocol_logger {
 };
 
 static int debug_server = 0;
+static char debug_fifo_path[UNIX_PATH_MAX];
 
 static void
 log_closure(struct wl_resource *resource,
@@ -1031,6 +1032,71 @@ bind_display(struct wl_client *client, struct wl_display *display)
 	return 0;
 }
 
+#define CMD_LINE_MAX_LEN 1024
+
+static int
+cmd_line_data(int fd, uint32_t mask, void *data)
+{
+	int len;
+	struct wl_display *display = data;
+	char cmd_buf[CMD_LINE_MAX_LEN];
+
+	len = read(fd, cmd_buf, sizeof(cmd_buf));
+	if (len < 0) {
+		wl_log("error:read file errno(%d), strerror(%s)",errno,strerror(errno));
+		close(fd);
+		return 1;
+	}
+
+	if (len > 2)
+		return 1;
+
+	if (cmd_buf[0] == '0')
+		debug_server = 0;
+	else if (cmd_buf[0] == '1')
+		debug_server = 1;
+	return 1;
+}
+
+static void
+create_cmd_line(struct wl_display *display)
+{
+	int fd;
+	const char *runtime_dir;
+	struct wl_event_source *cmd_source;
+
+	runtime_dir = getenv("XDG_RUNTIME_DIR");
+	if (!runtime_dir) {
+		return;
+	}
+
+	snprintf(debug_fifo_path, sizeof debug_fifo_path,
+			"%s/%s", runtime_dir, "wayland_debug");
+
+	unlink(debug_fifo_path);
+	if (mkfifo(debug_fifo_path, 0600) < 0) {
+		wl_log("error: failed to mkfifo %d\n", errno);
+		return;
+	}
+
+	fd = open(debug_fifo_path, O_RDWR|O_CLOEXEC);
+	if (fd < 0) {
+		wl_log("error: cannot open FIFO file for cmd line %d\n", errno);
+		unlink(debug_fifo_path);
+		return;
+	}
+
+	cmd_source = wl_event_loop_add_fd(display->loop, fd,
+			WL_EVENT_READABLE,
+			cmd_line_data, debug_fifo_path);
+	if (!cmd_source) {
+		wl_log("error: failed to wl_event_loop_add_fd %d %s\n", fd, debug_fifo_path);
+		unlink(debug_fifo_path);
+		close(fd);
+		return;
+	}
+}
+
 /** Create Wayland display object.
  *
  * \return The Wayland display object. Null if failed to create
@@ -1076,6 +1142,8 @@ wl_display_create(void)
 
 	wl_array_init(&display->additional_shm_formats);
 
+	create_cmd_line(display);
+
 	return display;
 }
 
@@ -1145,6 +1213,8 @@ wl_display_destroy(struct wl_display *display)
 
 	wl_list_remove(&display->protocol_loggers);
 
+	unlink(debug_fifo_path);
+
 	free(display);
 }
 
