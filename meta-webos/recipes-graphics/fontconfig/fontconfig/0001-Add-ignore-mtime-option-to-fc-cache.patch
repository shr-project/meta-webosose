From dc0561fee369d57bb229f1b0e9f30eada9e4e7a3 Mon Sep 17 00:00:00 2001
From: Martin Unsal <martin.unsal@lge.com>
Date: Thu, 12 Dec 2013 16:42:37 -0800
Subject: [PATCH] Add --ignore-mtime option to fc-cache

This option generates a font cache file which does not record
the mtime of the font cache directory. As a result, the cache
will continue to be valid regardless of any changes to the fonts
directory. This is only desirable if the font cache directory
is guaranteed to never change (e.g. readonly filesystem).

Also libfontcache is modified to respect this option in font
cache file.

Imported from:
https://github.com/openwebos/meta-webos/blob/master/recipes-graphics/fontconfig/fontconfig/Add-ignore-mtime-option-to-fc-cache.patch
and rebased from fontconfig-2.10.2 to 2.11.1

This isn't needed anymore after this commit:
  commit f098adac54ab86b75a38f2d23fa706a1348f55ba
  Author: Chris Lamb <chris@chris-lamb.co.uk>
  Date:   Tue May 15 22:11:24 2018 +0200

    Ensure cache checksums are deterministic

    Whilst working on the Reproducible Builds[0] effort, we noticed that
    fontconfig generates unreproducible cache files.

    This is due to fc-cache uses the modification timestamps of each
    directory in the "checksum" and "checksum_nano" members of the _FcCache
    struct. This is so that it can identify which cache files are valid
    and/or require regeneration.

    This patch changes the behaviour of the checksum calculations to prefer
    the value of the SOURCE_DATE_EPOCH[1] environment variable over the
    directory's own mtime. This variable can then be exported by build
    systems to ensure reproducible output.

    If SOURCE_DATE_EPOCH is not set or is newer than the mtime of the
    directory, the existing behaviour is unchanged.

    This work was sponsored by Tails[2].

     [0] https://reproducible-builds.org/
     [1] https://reproducible-builds.org/specs/source-date-epoch/
     [2] https://tails.boum.org/

  now we should be able to just set SOURCE_DATE_EPOCH.

Upstream-Status: Pending

Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
---
 fc-cache/fc-cache.c     | 18 ++++++++++++++----
 fontconfig/fontconfig.h |  6 ++++++
 src/fccache.c           | 12 ++++++++----
 src/fccfg.c             | 13 +++++++++++++
 src/fcint.h             |  7 +++++++
 5 files changed, 48 insertions(+), 8 deletions(-)

diff --git a/fc-cache/fc-cache.c b/fc-cache/fc-cache.c
index 87e3020..eed0404 100644
--- a/fc-cache/fc-cache.c
+++ b/fc-cache/fc-cache.c
@@ -78,6 +78,7 @@ const struct option longopts[] = {
     {"force", 0, 0, 'f'},
     {"really-force", 0, 0, 'r'},
     {"sysroot", required_argument, 0, 'y'},
+    {"ignore-mtime", 0, 0, 'i'},
     {"system-only", 0, 0, 's'},
     {"version", 0, 0, 'V'},
     {"verbose", 0, 0, 'v'},
@@ -96,10 +97,10 @@ usage (char *program, int error)
 {
     FILE *file = error ? stderr : stdout;
 #if HAVE_GETOPT_LONG
-    fprintf (file, _("usage: %s [-EfrsvVh] [-y SYSROOT] [--error-on-no-fonts] [--force|--really-force] [--sysroot=SYSROOT] [--system-only] [--verbose] [--version] [--help] [dirs]\n"),
+    fprintf (file, _("usage: %s [-EfrsivVh] [-y SYSROOT] [--ignore-mtime] [--error-on-no-fonts] [--force|--really-force] [--sysroot=SYSROOT] [--system-only] [--verbose] [--version] [--help] [dirs]\n"),
 	     program);
 #else
-    fprintf (file, _("usage: %s [-EfrsvVh] [-y SYSROOT] [dirs]\n"),
+    fprintf (file, _("usage: %s [-EfrsivVh] [-y SYSROOT] [dirs]\n"),
 	     program);
 #endif
     fprintf (file, _("Build font information caches in [dirs]\n"
@@ -111,6 +112,7 @@ usage (char *program, int error)
     fprintf (file, _("  -r, --really-force       erase all existing caches, then rescan\n"));
     fprintf (file, _("  -s, --system-only        scan system-wide directories only\n"));
     fprintf (file, _("  -y, --sysroot=SYSROOT    prepend SYSROOT to all paths for scanning\n"));
+    fprintf (file, _("  -i, --ignore-mtime       always use cache file regardless of font directory mtime\n"));
     fprintf (file, _("  -v, --verbose            display status information while busy\n"));
     fprintf (file, _("  -V, --version            display font config version and exit\n"));
     fprintf (file, _("  -h, --help               display this help and exit\n"));
@@ -121,6 +123,7 @@ usage (char *program, int error)
     fprintf (file, _("  -r,   (really force) erase all existing caches, then rescan\n"));
     fprintf (file, _("  -s         (system)  scan system-wide directories only\n"));
     fprintf (file, _("  -y SYSROOT (sysroot) prepend SYSROOT to all paths for scanning\n"));
+    fprintf (file, _("  -i    (ignore-mtime) always use cache file regardless of font directory mtime\n"));
     fprintf (file, _("  -v         (verbose) display status information while busy\n"));
     fprintf (file, _("  -V         (version) display font config version and exit\n"));
     fprintf (file, _("  -h         (help)    display this help and exit\n"));
@@ -295,6 +298,7 @@ main (int argc, char **argv)
     FcBool	really_force = FcFalse;
     FcBool	systemOnly = FcFalse;
     FcBool	error_on_no_fonts = FcFalse;
+    FcBool	ignoreMtime = FcFalse;
     FcConfig	*config;
     FcChar8     *sysroot = NULL;
     int		i;
@@ -305,9 +309,9 @@ main (int argc, char **argv)
 
     setlocale (LC_ALL, "");
 #if HAVE_GETOPT_LONG
-    while ((c = getopt_long (argc, argv, "Efrsy:Vvh", longopts, NULL)) != -1)
+    while ((c = getopt_long (argc, argv, "Efrsy:iVvh", longopts, NULL)) != -1)
 #else
-    while ((c = getopt (argc, argv, "Efrsy:Vvh")) != -1)
+    while ((c = getopt (argc, argv, "Efrsy:iVvh")) != -1)
 #endif
     {
 	switch (c) {
@@ -326,6 +330,9 @@ main (int argc, char **argv)
 	case 'y':
 	    sysroot = FcStrCopy ((const FcChar8 *)optarg);
 	    break;
+	case 'i':
+	    ignoreMtime = FcTrue;
+	    break;
 	case 'V':
 	    fprintf (stderr, "fontconfig version %d.%d.%d\n",
 		     FC_MAJOR, FC_MINOR, FC_REVISION);
@@ -344,6 +351,9 @@ main (int argc, char **argv)
     i = 1;
 #endif
 
+    if (ignoreMtime)
+       FcConfigSetIgnoreMtime(FcTrue);
+
     if (systemOnly)
 	FcConfigEnableHome (FcFalse);
     if (sysroot)
diff --git a/fontconfig/fontconfig.h b/fontconfig/fontconfig.h
index bac1dda..c9bc049 100644
--- a/fontconfig/fontconfig.h
+++ b/fontconfig/fontconfig.h
@@ -488,6 +488,12 @@ FcConfigFileInfoIterGet (FcConfig		*config,
 			 FcChar8		**description,
 			 FcBool			*enabled);
 
+FcPublic void
+FcConfigSetIgnoreMtime (const FcBool ignoreMtime);
+
+FcPublic FcBool
+FcConfigGetIgnoreMtime (void);
+
 /* fccharset.c */
 FcPublic FcCharSet*
 FcCharSetCreate (void);
diff --git a/src/fccache.c b/src/fccache.c
index 2b60401..f8f01f8 100644
--- a/src/fccache.c
+++ b/src/fccache.c
@@ -831,8 +831,9 @@ FcCacheTimeValid (FcConfig *config, FcCache *cache, struct stat *dir_stat)
 	printf ("FcCacheTimeValid dir \"%s\" cache checksum %d dir checksum %d\n",
 		FcCacheDir (cache), cache->checksum, (int) dir_stat->st_mtime);
 #endif
-
-    return cache->checksum == (int) dir_stat->st_mtime && fnano;
+    /* cache checksum may instruct us to ignore font dir mtime, used
+       with readonly root filesystem and pre-generated font cache */
+    return (cache->checksum == (int) dir_stat->st_mtime && fnano) || (cache->checksum == FC_INVALID_TIME);
 }
 
 static FcBool
@@ -1135,7 +1136,7 @@ FcDirCacheValidateHelper (FcConfig *config, int fd, struct stat *fd_stat, struct
 	ret = FcFalse;
     else if (fd_stat->st_size != c.size)
 	ret = FcFalse;
-    else if (c.checksum != FcDirChecksum (dir_stat))
+    else if ( (c.checksum != FcDirChecksum (dir_stat)) && (c.checksum != FC_INVALID_TIME) )
 	ret = FcFalse;
 #ifdef HAVE_STRUCT_STAT_ST_MTIM
     else if (c.checksum_nano != FcDirChecksumNano (dir_stat))
@@ -1214,7 +1215,10 @@ FcDirCacheBuild (FcFontSet *set, const FcChar8 *dir, struct stat *dir_stat, FcSt
     cache->magic = FC_CACHE_MAGIC_ALLOC;
     cache->version = FC_CACHE_VERSION_NUMBER;
     cache->size = serialize->size;
-    cache->checksum = FcDirChecksum (dir_stat);
+    if (FcConfigGetIgnoreMtime())
+	cache->checksum = (int) FC_INVALID_TIME;
+    else
+        cache->checksum = FcDirChecksum (dir_stat);
     cache->checksum_nano = FcDirChecksumNano (dir_stat);
 
     /*
diff --git a/src/fccfg.c b/src/fccfg.c
index d7c48e8..5951161 100644
--- a/src/fccfg.c
+++ b/src/fccfg.c
@@ -33,6 +33,7 @@
 #endif
 
 static FcConfig    *_fcConfig; /* MT-safe */
+static FcBool _FcConfigIgnoreMtime = FcFalse;
 
 static FcConfig *
 FcConfigEnsure (void)
@@ -2707,6 +2708,18 @@ FcConfigFileInfoIterGet (FcConfig		*config,
     return FcTrue;
 }
 
+FcPublic void
+FcConfigSetIgnoreMtime (const FcBool ignoreMtime)
+{
+    _FcConfigIgnoreMtime = ignoreMtime;
+}
+
+FcPublic FcBool
+FcConfigGetIgnoreMtime ()
+{
+    return _FcConfigIgnoreMtime;
+}
+
 #define __fccfg__
 #include "fcaliastail.h"
 #undef __fccfg__
diff --git a/src/fcint.h b/src/fcint.h
index de78cd8..e7ce36d 100644
--- a/src/fcint.h
+++ b/src/fcint.h
@@ -421,6 +421,13 @@ struct _FcCache {
 					   FcChar8)
 
 /*
+ * Provide an invalid value for _FcCache.checksum. (time_t)(-1) is
+ * guaranteed not to be a valid time, see "man mktime". This value
+ * is used to skip mtime check.
+ */
+#define FC_INVALID_TIME	(time_t)(-1)
+
+/*
  * Used while constructing a directory cache object
  */
 
