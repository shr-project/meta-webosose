From 86caa8389027c56f29ba1a3814989fdde98a1024 Mon Sep 17 00:00:00 2001
From: "sungmok.shin" <sungmok.shin@lge.com>
Date: Tue, 25 Jun 2019 13:11:11 +0900
Subject: [PATCH] Support additional feature for tethering

Support additional feature for tethering
---
 gdhcp/server.c       |   3 ++
 include/technology.h |   2 +
 plugins/wifi.c       |  14 +++--
 src/connman.h        |   1 +
 src/technology.c     | 109 +++++++++++++++++++++++++++++++++----
 src/tethering.c      | 125 +++++++++++++++++++++++++++++++++++++++++++
 6 files changed, 239 insertions(+), 15 deletions(-)

diff --git a/gdhcp/server.c b/gdhcp/server.c
index 52ea2a55..f82c4bbd 100644
--- a/gdhcp/server.c
+++ b/gdhcp/server.c
@@ -255,6 +255,9 @@ static uint32_t find_free_or_expired_nip(GDHCPServer *dhcp_server,
 		if ((ip_addr & 0xff) == 0xff)
 			continue;
 
+		if (htonl(ip_addr) == dhcp_server->server_nip)
+			continue;
+
 		lease = find_lease_by_nip(dhcp_server, ip_addr);
 		if (lease)
 			continue;
diff --git a/include/technology.h b/include/technology.h
index ed919874..61e3371f 100644
--- a/include/technology.h
+++ b/include/technology.h
@@ -48,6 +48,8 @@ enum connman_service_type connman_technology_get_type
 bool connman_technology_get_wifi_tethering(const struct connman_technology *technology,
 					const char **ssid, const char **psk, int *freq);
 
+unsigned int connman_technology_get_wifi_tethering_channel(void);
+
 bool connman_technology_is_tethering_allowed(enum connman_service_type type);
 
 void connman_technology_wps_failed_notify(struct connman_technology *technology);
diff --git a/plugins/wifi.c b/plugins/wifi.c
index 296ac113..42e8bbf2 100644
--- a/plugins/wifi.c
+++ b/plugins/wifi.c
@@ -3684,8 +3684,9 @@ static GSupplicantSSID *ssid_ap_init(const struct connman_technology *technology
 {
 	GSupplicantSSID *ap;
 	const char *ssid, *passphrase;
-	int freq;
 	bool ret;
+	unsigned int channel;
+	unsigned int freq;
 
 	ap = g_try_malloc0(sizeof(GSupplicantSSID));
 	if (!ap)
@@ -3696,15 +3697,18 @@ static GSupplicantSSID *ssid_ap_init(const struct connman_technology *technology
 						&freq);
 	if (ret == false)
 		return NULL;
+	channel = connman_technology_get_wifi_tethering_channel();
+
+	if (channel)
+		freq = 2412 + ((channel - 1) * 5);
+	else
+		freq = 2412;
 
 	ap->mode = G_SUPPLICANT_MODE_MASTER;
 	ap->ssid = ssid;
 	ap->ssid_len = strlen(ssid);
 	ap->scan_ssid = 0;
-	if (freq)
-		ap->freq = freq;
-	else
-		ap->freq = 2412;
+	ap->freq = freq;
 
 	if (!passphrase || strlen(passphrase) == 0) {
 		ap->security = G_SUPPLICANT_SECURITY_NONE;
diff --git a/src/connman.h b/src/connman.h
index a37d574b..741ce028 100644
--- a/src/connman.h
+++ b/src/connman.h
@@ -647,6 +647,7 @@ const char *__connman_tethering_get_bridge(void);
 int __connman_tethering_set_enabled(void);
 void __connman_tethering_set_disabled(void);
 void __connman_tethering_list_clients(DBusMessageIter *array);
+int __connman_tethering_set_enabled_with_ip(const char *ip);
 
 int __connman_private_network_request(DBusMessage *msg, const char *owner);
 int __connman_private_network_release(const char *path);
diff --git a/src/technology.c b/src/technology.c
index ed61d8b3..b061b2ce 100644
--- a/src/technology.c
+++ b/src/technology.c
@@ -67,6 +67,8 @@ struct connman_technology {
 	char *tethering_ident;
 	char *tethering_passphrase;
 	int tethering_freq;
+	char *tethering_ipaddress;
+	unsigned int tethering_channel;
 
 	bool enable_persistent; /* Save the tech state */
 
@@ -199,6 +201,15 @@ static void technology_save(struct connman_technology *technology)
 	g_key_file_set_integer(keyfile, identifier,
 				"Tethering.Freq",
 				technology->tethering_freq);
+	if (technology->tethering_channel)
+		g_key_file_set_integer(keyfile, identifier,
+					"Tethering.Channel",
+					technology->tethering_channel);
+
+	if (technology->tethering_ipaddress)
+		g_key_file_set_string(keyfile, identifier,
+					"Tethering.IP",
+					technology->tethering_ipaddress);
 
 done:
 	g_free(identifier);
@@ -223,14 +234,21 @@ int connman_technology_tethering_notify(struct connman_technology *technology,
 							bool enabled)
 {
 	int err;
+	const char *ip;
 
 	DBG("technology %p enabled %u", technology, enabled);
 
 	if (technology->tethering == enabled)
 		return -EALREADY;
 
+	ip = technology->tethering_ipaddress;
+
 	if (enabled) {
-		err = __connman_tethering_set_enabled();
+		if (!ip || strlen(ip) == 0)
+			err = __connman_tethering_set_enabled();
+		else
+			err = __connman_tethering_set_enabled_with_ip(ip);
+
 		if (err < 0)
 			return err;
 	} else
@@ -261,8 +279,7 @@ static int set_tethering(struct connman_technology *technology,
 	if (!bridge)
 		return -EOPNOTSUPP;
 
-	if (technology->type == CONNMAN_SERVICE_TYPE_WIFI &&
-	    (!ident || !passphrase))
+	if (technology->type == CONNMAN_SERVICE_TYPE_WIFI && !ident)
 		return -EINVAL;
 
 	for (tech_drivers = technology->driver_list; tech_drivers;
@@ -393,6 +410,17 @@ bool connman_technology_get_wifi_tethering(const struct connman_technology *tech
 	return true;
 }
 
+unsigned int connman_technology_get_wifi_tethering_channel(void)
+{
+	struct connman_technology *technology;
+
+	technology = technology_find(CONNMAN_SERVICE_TYPE_WIFI);
+	if (!technology)
+		return 0;
+
+	return technology->tethering_channel;
+}
+
 static void free_rfkill(gpointer data)
 {
 	struct connman_rfkill *rfkill = data;
@@ -461,6 +489,11 @@ static void technology_load(struct connman_technology *technology)
 	technology->tethering_freq = g_key_file_get_integer(keyfile,
 				identifier, "Tethering.Freq", NULL);
 
+	technology->tethering_channel = g_key_file_get_integer(keyfile,
+				identifier, "Tethering.Channel", NULL);
+
+	technology->tethering_ipaddress = g_key_file_get_string(keyfile,
+				identifier, "Tethering.IP", NULL);
 done:
 	g_free(identifier);
 
@@ -575,6 +608,15 @@ static void append_properties(DBusMessageIter *iter,
 	connman_dbus_dict_append_basic(&dict, "TetheringFreq",
 				DBUS_TYPE_INT32,
 				&technology->tethering_freq);
+	if (technology->tethering_ipaddress)
+		connman_dbus_dict_append_basic(&dict, "TetheringIPAddress",
+					DBUS_TYPE_STRING,
+					&technology->tethering_ipaddress);
+
+	if (technology->tethering_channel)
+		connman_dbus_dict_append_basic(&dict, "TetheringChannel",
+					DBUS_TYPE_UINT32,
+					&technology->tethering_channel);
 
 	connman_dbus_dict_close(iter, &dict);
 }
@@ -974,10 +1016,19 @@ static DBusMessage *set_property(DBusConnection *conn,
 		if (technology->type != CONNMAN_SERVICE_TYPE_WIFI)
 			return __connman_error_not_supported(msg);
 
-		err = __connman_service_check_passphrase(CONNMAN_SERVICE_SECURITY_PSK,
-							str);
-		if (err < 0)
-			return __connman_error_passphrase_required(msg);
+		/* Allow empty passphrases for setting up an AP with open
+		 * security type */
+
+		if (strlen(str) == 0) {
+			g_free(technology->tethering_passphrase);
+			technology->tethering_passphrase = NULL;
+		}
+		else {
+			err = __connman_service_check_passphrase(CONNMAN_SERVICE_SECURITY_PSK,
+								str);
+			if (err < 0)
+				return __connman_error_passphrase_required(msg);
+		}
 
 		if (g_strcmp0(technology->tethering_passphrase, str) != 0) {
 			g_free(technology->tethering_passphrase);
@@ -997,19 +1048,56 @@ static DBusMessage *set_property(DBusConnection *conn,
 			return __connman_error_invalid_arguments(msg);
 
 		dbus_message_iter_get_basic(&value, &freq);
+	} else if (g_str_equal(name, "TetheringChannel")) {
+		dbus_uint32_t channel;
+
+		if (type != DBUS_TYPE_UINT32)
+			return __connman_error_invalid_arguments(msg);
+
+		dbus_message_iter_get_basic(&value, &channel);
 
 		if (technology->type != CONNMAN_SERVICE_TYPE_WIFI)
 			return __connman_error_not_supported(msg);
 
 		if (freq >= 0) {
 			technology->tethering_freq = freq;
+		if (channel == 0 || channel > 13)
+			return __connman_error_invalid_arguments(msg);
+
+		if (technology->tethering_channel != channel) {
+
+			technology->tethering_channel = channel;
 			technology_save(technology);
 
 			connman_dbus_property_changed_basic(technology->path,
 					CONNMAN_TECHNOLOGY_INTERFACE,
-					"TetheringFreq",
-					DBUS_TYPE_INT32,
-					&technology->tethering_freq);
+					"TetheringChannel",
+					DBUS_TYPE_UINT32,
+					&technology->tethering_channel);
+		}
+	} else if (g_str_equal(name, "TetheringIPAddress")) {
+		const char *str;
+
+		dbus_message_iter_get_basic(&value, &str);
+
+		if (technology->type != CONNMAN_SERVICE_TYPE_WIFI)
+			return __connman_error_not_supported(msg);
+
+		if (strlen(str) == 0) {
+				g_free(technology->tethering_ipaddress);
+				technology->tethering_ipaddress = NULL;
+		}
+
+		if (g_strcmp0(technology->tethering_ipaddress, str) != 0) {
+			g_free(technology->tethering_ipaddress);
+			technology->tethering_ipaddress = g_strdup(str);
+			technology_save(technology);
+
+			connman_dbus_property_changed_basic(technology->path,
+					CONNMAN_TECHNOLOGY_INTERFACE,
+					"TetheringIPAddress",
+					DBUS_TYPE_STRING,
+					&technology->tethering_ipaddress);
 		}
 	} else if (g_str_equal(name, "Powered")) {
 		dbus_bool_t enable;
@@ -1280,6 +1368,7 @@ static void technology_put(struct connman_technology *technology)
 	g_free(technology->regdom);
 	g_free(technology->tethering_ident);
 	g_free(technology->tethering_passphrase);
+	g_free(technology->tethering_ipaddress);
 	g_free(technology);
 }
 
diff --git a/src/tethering.c b/src/tethering.c
index f930a26b..52baebdd 100644
--- a/src/tethering.c
+++ b/src/tethering.c
@@ -49,6 +49,7 @@
 #endif
 
 #define BRIDGE_NAME "tether"
+#define SUBNET_MASK_24 "255.255.255.0"
 
 #define DEFAULT_MTU	1500
 
@@ -363,6 +364,130 @@ void __connman_tethering_list_clients(DBusMessageIter *array)
 	g_hash_table_foreach(clients_table, append_client, array);
 }
 
+static char *get_ip(uint32_t ip)
+{
+	struct in_addr addr;
+
+	addr.s_addr = htonl(ip);
+
+	return g_strdup(inet_ntoa(addr));
+}
+int __connman_tethering_set_enabled_with_ip(const char *ip)
+{
+	int index;
+	int err;
+	const char *gateway;
+	const char *broadcast;
+	const char *subnet_mask;
+	const char *start_ip;
+	const char *end_ip;
+	const char *dns;
+	unsigned char prefixlen;
+	char **ns;
+
+	DBG("enabled %d", tethering_enabled + 1);
+
+	if (__sync_fetch_and_add(&tethering_enabled, 1) != 0)
+		return 0;
+
+	err = __connman_bridge_create(BRIDGE_NAME);
+	if (err < 0) {
+		__sync_fetch_and_sub(&tethering_enabled, 1);
+		return 0;
+	}
+
+	index = connman_inet_ifindex(BRIDGE_NAME);
+
+	__connman_ippool_newaddr(index, ip, 24);
+
+	struct in_addr inp;
+	uint32_t start, mask;
+
+	if (inet_aton(ip, &inp) == 0)
+		return 0;
+
+	start = ntohl(inp.s_addr);
+	mask = ~(0xffffffff >> 24);
+
+	start = start & mask;
+
+	gateway = ip;
+	broadcast = get_ip(start + 255);
+	subnet_mask = SUBNET_MASK_24;
+	start_ip = get_ip(start + 2);
+	end_ip = get_ip(start + 254);
+
+	err = __connman_bridge_enable(BRIDGE_NAME, gateway,
+			connman_ipaddress_calc_netmask_len(subnet_mask),
+			broadcast);
+	if (err < 0 && err != -EALREADY) {
+		__connman_ippool_free(dhcp_ippool);
+		__connman_ippool_deladdr(index, ip, 24);
+		__connman_bridge_remove(BRIDGE_NAME);
+		__sync_fetch_and_sub(&tethering_enabled, 1);
+		return -EADDRNOTAVAIL;
+	}
+
+	ns = connman_setting_get_string_list("FallbackNameservers");
+	if (ns) {
+		if (ns[0]) {
+			g_free(private_network_primary_dns);
+			private_network_primary_dns = g_strdup(ns[0]);
+		}
+		if (ns[1]) {
+			g_free(private_network_secondary_dns);
+			private_network_secondary_dns = g_strdup(ns[1]);
+		}
+
+		DBG("Fallback ns primary %s secondary %s",
+			private_network_primary_dns,
+			private_network_secondary_dns);
+	}
+
+	dns = gateway;
+	if (__connman_dnsproxy_add_listener(index) < 0) {
+		connman_error("Can't add listener %s to DNS proxy",
+								BRIDGE_NAME);
+		dns = private_network_primary_dns;
+		DBG("Serving %s nameserver to clients", dns);
+	}
+
+	tethering_dhcp_server = dhcp_server_start(BRIDGE_NAME,
+						gateway, subnet_mask,
+						start_ip, end_ip,
+						24 * 3600, dns);
+	if (!tethering_dhcp_server) {
+		__connman_bridge_disable(BRIDGE_NAME);
+		__connman_ippool_free(dhcp_ippool);
+		__connman_ippool_deladdr(index, ip, 24);
+		__connman_bridge_remove(BRIDGE_NAME);
+		__sync_fetch_and_sub(&tethering_enabled, 1);
+		return -EOPNOTSUPP;
+	}
+
+	prefixlen = connman_ipaddress_calc_netmask_len(subnet_mask);
+	err = __connman_nat_enable(BRIDGE_NAME, start_ip, prefixlen);
+	if (err < 0) {
+		connman_error("Cannot enable NAT %d/%s", err, strerror(-err));
+		dhcp_server_stop(tethering_dhcp_server);
+		__connman_bridge_disable(BRIDGE_NAME);
+		__connman_ippool_free(dhcp_ippool);
+		__connman_ippool_deladdr(index, ip, 24);
+		__connman_bridge_remove(BRIDGE_NAME);
+		__sync_fetch_and_sub(&tethering_enabled, 1);
+		return -EOPNOTSUPP;
+	}
+
+	err = __connman_ipv6pd_setup(BRIDGE_NAME);
+	if (err < 0 && err != -EINPROGRESS)
+		DBG("Cannot setup IPv6 prefix delegation %d/%s", err,
+			strerror(-err));
+
+	DBG("tethering started");
+
+	return 0;
+}
+
 static void setup_tun_interface(unsigned int flags, unsigned change,
 		void *data)
 {
