From 3eb7e531625c7cbca6cc21d1d080eb7bc90b82eb Mon Sep 17 00:00:00 2001
From: "sungmok.shin" <sungmok.shin@lge.com>
Date: Tue, 4 Aug 2020 09:42:25 +0900
Subject: [PATCH] Read WpaSupplicantConfigFile from main configuration

connman_setting_get_string API was added in upstream 1.40 with:

  commit 1b86c9e256d103c8f483085878149ba6b168ead6
  Author: VAUTRIN Emmanuel (Canal Plus Prestataire) <Emmanuel.VAUTRIN@cpexterne.org>
  Date:   Thu May 6 09:45:01 2021 +0000

    main: Cleanup of vendor class id and wifi config options

    Ensure homogeneity of config options management by replacing
    connman_option_get_string() by connman_setting_get_string(), and
    removing irrelevant option.h header file.
---
 plugins/wifi.c | 23 +----------------------
 src/main.c     | 12 ++++++++++++
 2 files changed, 13 insertions(+), 22 deletions(-)

diff --git a/plugins/wifi.c b/plugins/wifi.c
index 6b38df9e..6c1cd2d6 100644
--- a/plugins/wifi.c
+++ b/plugins/wifi.c
@@ -1628,27 +1628,6 @@ static void interface_create_callback(int result,
 	}
 }
 
-static const char* load_wpas_config_file_path()
-{
-       GKeyFile *keyfile;
-       gchar *identifier;
-       const char *wpas_config_file = NULL;
-
-       keyfile = __connman_storage_load_global();
-       if(keyfile == NULL)
-               return NULL;
-
-       identifier = g_strdup_printf("%s", "WiFi");
-       if (identifier == NULL)
-               return NULL;
-
-       wpas_config_file = g_key_file_get_string(keyfile, identifier, "WpaSupplicantConfigFile", NULL);
-
-       g_key_file_free(keyfile);
-
-       return wpas_config_file;
-}
-
 static int wifi_enable(struct connman_device *device)
 {
 	struct wifi_data *wifi = connman_device_get_data(device);
@@ -1667,7 +1646,7 @@ static int wifi_enable(struct connman_device *device)
 		return -EINPROGRESS;
 
 	interface = connman_inet_ifname(index);
-	const char *wpas_config_file = load_wpas_config_file_path();
+	const char *wpas_config_file = connman_setting_get_string("WpaSupplicantConfigFile");
 	ret = g_supplicant_interface_create(interface, driver, NULL, wpas_config_file,
 						interface_create_callback,
 							wifi);
diff --git a/src/main.c b/src/main.c
index 6480caa6..88f5fe24 100644
--- a/src/main.c
+++ b/src/main.c
@@ -91,6 +91,7 @@ static struct {
 	bool allow_hostname_updates;
 	bool allow_domainname_updates;
 	bool single_tech;
+	char *wpas_config_file;
 	char **tethering_technologies;
 	bool persistent_tethering_mode;
 	bool enable_6to4;
@@ -116,6 +117,7 @@ static struct {
 	.allow_hostname_updates = true,
 	.allow_domainname_updates = true,
 	.single_tech = false,
+	.wpas_config_file = NULL,
 	.tethering_technologies = NULL,
 	.persistent_tethering_mode = false,
 	.enable_6to4 = false,
@@ -142,6 +144,7 @@ static struct {
 #define CONF_ALLOW_HOSTNAME_UPDATES     "AllowHostnameUpdates"
 #define CONF_ALLOW_DOMAINNAME_UPDATES   "AllowDomainnameUpdates"
 #define CONF_SINGLE_TECH                "SingleConnectedTechnology"
+#define CONF_WPA_SUPPLICANT_CONF_FILE   "WpaSupplicantConfigFile"
 #define CONF_TETHERING_TECHNOLOGIES      "TetheringTechnologies"
 #define CONF_PERSISTENT_TETHERING_MODE  "PersistentTetheringMode"
 #define CONF_ENABLE_6TO4                "Enable6to4"
@@ -168,6 +171,7 @@ static const char *supported_options[] = {
 	CONF_ALLOW_HOSTNAME_UPDATES,
 	CONF_ALLOW_DOMAINNAME_UPDATES,
 	CONF_SINGLE_TECH,
+	CONF_WPA_SUPPLICANT_CONF_FILE,
 	CONF_TETHERING_TECHNOLOGIES,
 	CONF_PERSISTENT_TETHERING_MODE,
 	CONF_ENABLE_6TO4,
@@ -300,6 +304,7 @@ static void parse_config(GKeyFile *config)
 	char **timeservers;
 	char **interfaces;
 	char **str_list;
+	char *wpas_config_file;
 	char **tethering;
 	char *string;
 	gsize len;
@@ -438,6 +443,13 @@ static void parse_config(GKeyFile *config)
 
 	g_clear_error(&error);
 
+	wpas_config_file = g_key_file_get_string(config, "General",
+											CONF_WPA_SUPPLICANT_CONF_FILE, &error);
+	if (error == NULL)
+		connman_settings.wpas_config_file = wpas_config_file;
+
+	g_clear_error(&error);
+
 	tethering = __connman_config_get_string_list(config, "General",
 			CONF_TETHERING_TECHNOLOGIES, &len, &error);
 
