From 7a20a99ee8e55cbbaf9619615b52aaa77814d615 Mon Sep 17 00:00:00 2001
From: Rakes Pani <rakes.pani@lge.com>
Date: Tue, 5 Jan 2021 13:55:12 +0530
Subject: [PATCH] Added new method SetDefault for Interface net.connman.Service

:Release Notes:
Added new method SetDefault for Interface net.connman.Service

:Detailed Notes:
Added new method SetDefault for Interface net.connman.Service

MJ: set_split_routing was changed in 1.39 with:
commit cc32d1aae11ee79dd5dcf92bf4691952792531ad
Author: Jussi Laakkonen <jussi.laakkonen@jolla.com>
Date:   Tue Dec 8 12:17:53 2020 +0200

    service: Expose set_split_routing() for internal use

:Testing Performed:
Built and Tested

:QA Notes:
NA

:Issues Addressed:
[PLAT-123919] Implement setDefaultInterface API as per approved
              design in connman

Upstream-Status: Inappropriate[webos specific]
---
 src/service.c | 111 ++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 111 insertions(+)

diff --git a/src/service.c b/src/service.c
index 2f354c3b..c63c1edc 100644
--- a/src/service.c
+++ b/src/service.c
@@ -5038,6 +5038,108 @@ static DBusMessage *move_service(DBusConnection *conn,
 	return g_dbus_create_reply(msg, DBUS_TYPE_INVALID);
 }
 
+static DBusMessage *move_default(DBusConnection *conn,
+					DBusMessage *msg, void *user_data)
+{
+
+	struct connman_service *service = user_data;
+	struct connman_service *target;
+	enum connman_ipconfig_method target4, target6;
+	enum connman_ipconfig_method service4, service6;
+
+	DBG("service %p", service);
+
+	target = connman_service_get_default();
+	if (!target || target == service)
+		return __connman_error_already_exists(msg);
+
+	if (target->type == CONNMAN_SERVICE_TYPE_VPN) {
+		/*
+		 * We only allow VPN route splitting if there are
+		 * routes defined for a given VPN.
+		 */
+		if (!__connman_provider_check_routes(target->provider)) {
+			connman_info("Cannot move service. "
+				"No routes defined for provider %s",
+				__connman_provider_get_ident(target->provider));
+			return __connman_error_invalid_service(msg);
+		}
+
+		__connman_service_set_split_routing(target, true);
+	} else
+		__connman_service_set_split_routing(target, false);
+
+	__connman_service_set_split_routing(service, false);
+
+	target4 = __connman_ipconfig_get_method(target->ipconfig_ipv4);
+	target6 = __connman_ipconfig_get_method(target->ipconfig_ipv6);
+	service4 = __connman_ipconfig_get_method(service->ipconfig_ipv4);
+	service6 = __connman_ipconfig_get_method(service->ipconfig_ipv6);
+
+	DBG("target %s method %d/%d state %d/%d split %d", target->identifier,
+		target4, target6, target->state_ipv4, target->state_ipv6,
+		target->do_split_routing);
+
+	DBG("service %s method %d/%d state %d/%d", service->identifier,
+				service4, service6,
+				service->state_ipv4, service->state_ipv6);
+
+	/*
+	 * If method is OFF, then we do not need to check the corresponding
+	 * ipconfig state.
+	 */
+	if (target4 == CONNMAN_IPCONFIG_METHOD_OFF) {
+		if (service6 != CONNMAN_IPCONFIG_METHOD_OFF) {
+			if (!check_suitable_state(target->state_ipv6,
+							service->state_ipv6))
+				return __connman_error_invalid_service(msg);
+		}
+	}
+
+	if (target6 == CONNMAN_IPCONFIG_METHOD_OFF) {
+		if (service4 != CONNMAN_IPCONFIG_METHOD_OFF) {
+			if (!check_suitable_state(target->state_ipv4,
+							service->state_ipv4))
+				return __connman_error_invalid_service(msg);
+		}
+	}
+
+	if (service4 == CONNMAN_IPCONFIG_METHOD_OFF) {
+		if (target6 != CONNMAN_IPCONFIG_METHOD_OFF) {
+			if (!check_suitable_state(target->state_ipv6,
+							service->state_ipv6))
+				return __connman_error_invalid_service(msg);
+		}
+	}
+
+	if (service6 == CONNMAN_IPCONFIG_METHOD_OFF) {
+		if (target4 != CONNMAN_IPCONFIG_METHOD_OFF) {
+			if (!check_suitable_state(target->state_ipv4,
+							service->state_ipv4))
+				return __connman_error_invalid_service(msg);
+		}
+	}
+
+	g_get_current_time(&service->modified);
+	service_save(service);
+	service_save(target);
+
+	/*
+	 * If the service which goes down is the default service and is
+	 * online, we downgrade directly its state to ready so:
+	 * the service which goes up, needs to recompute its state which
+	 * is triggered via downgrading it - if relevant - to state ready.
+	 */
+	switch_default_service(target, service);
+
+	__connman_connection_update_gateway();
+
+	service_schedule_changed();
+
+	return g_dbus_create_reply(msg, DBUS_TYPE_INVALID);
+
+}
+
 static DBusMessage *move_before(DBusConnection *conn,
 					DBusMessage *msg, void *user_data)
 {
@@ -5060,6 +5162,13 @@ static DBusMessage *reset_counters(DBusConnection *conn,
 	return g_dbus_create_reply(msg, DBUS_TYPE_INVALID);
 }
 
+static DBusMessage *set_default(DBusConnection *conn,
+					DBusMessage *msg, void *user_data)
+{
+	return move_default(conn, msg, user_data);
+}
+
+
 static void service_schedule_added(struct connman_service *service)
 {
 	DBG("service %p", service);
@@ -5117,6 +5226,8 @@ static const GDBusMethodTable service_methods[] = {
 			GDBUS_ARGS({ "service", "o" }), NULL,
 			move_after) },
 	{ GDBUS_METHOD("ResetCounters", NULL, NULL, reset_counters) },
+	{ GDBUS_ASYNC_METHOD("SetDefault", NULL, NULL,
+			      set_default) },
 	{ },
 };
 
