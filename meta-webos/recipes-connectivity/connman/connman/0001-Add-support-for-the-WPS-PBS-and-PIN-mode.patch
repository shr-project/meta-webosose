From 3220782200bcb40d4f906733b5e4d0f96f5bb312 Mon Sep 17 00:00:00 2001
From: Vibhanshu Dhote <vibhanshu.dhote@lge.com>
Date: Wed, 21 Feb 2018 16:36:23 +0530
Subject: [PATCH] Add support for the WPS PBS and PIN mode

:Release Notes:
This adds the WPS blind connection functionality to connman.

:Detailed Notes:
By default connman doesn't support to connect blindly to a WPS based AP.
When a connection gets established by using WPS connman always requires
the user to connect to specific AP and verifies after the connection
happened that it was exactly connected to the specified AP and disconnects
from the AP otherwise. This implements the WPS blind connection by adding
another method to the technology interface which starts the WPS connection
process without requiring a specific SSID.

Upstream-Status : Inappropriate [webOS specific]
---
 gsupplicant/gsupplicant.h |   5 +
 gsupplicant/supplicant.c  |  66 +++++++
 include/device.h          |   2 +
 include/technology.h      |   2 +
 plugins/wifi.c            | 387 ++++++++++++++++++++++++++++++++++++--
 src/connman.h             |   3 +
 src/device.c              | 116 ++++++++++++
 src/service.c             |   2 +
 src/technology.c          |  49 +++++
 9 files changed, 612 insertions(+), 20 deletions(-)

diff --git a/gsupplicant/gsupplicant.h b/gsupplicant/gsupplicant.h
index db61595b..77dfe56e 100644
--- a/gsupplicant/gsupplicant.h
+++ b/gsupplicant/gsupplicant.h
@@ -268,6 +268,10 @@ int g_supplicant_interface_disconnect(GSupplicantInterface *interface,
 					GSupplicantInterfaceCallback callback,
 							void *user_data);
 
+int g_supplicant_interface_wps_cancel(GSupplicantInterface *interface,
+					GSupplicantInterfaceCallback callback,
+							void *user_data);
+
 int g_supplicant_interface_set_apscan(GSupplicantInterface *interface,
 							unsigned int ap_scan);
 
@@ -357,6 +361,7 @@ struct _GSupplicantCallbacks {
 	void (*peer_changed) (GSupplicantPeer *peer,
 					GSupplicantPeerState state);
 	void (*peer_request) (GSupplicantPeer *peer);
+        void (*wps_state)(GSupplicantInterface *interface);
 	void (*debug) (const char *str);
 	void (*disconnect_reasoncode)(GSupplicantInterface *interface,
 				int reasoncode);
diff --git a/gsupplicant/supplicant.c b/gsupplicant/supplicant.c
index 5246c80b..1a35d00a 100644
--- a/gsupplicant/supplicant.c
+++ b/gsupplicant/supplicant.c
@@ -699,6 +699,17 @@ static void remove_group(gpointer data)
 	g_free(group);
 }
 
+static void callback_wps_state(GSupplicantInterface *interface)
+{
+	if (callbacks_pointer == NULL)
+		return;
+
+	if (callbacks_pointer->wps_state == NULL)
+		return;
+
+	callbacks_pointer->wps_state(interface);
+}
+
 static void remove_interface(gpointer data)
 {
 	GSupplicantInterface *interface = data;
@@ -2945,6 +2956,8 @@ static void signal_wps_event(const char *path, DBusMessageIter *iter)
 	dbus_message_iter_next(iter);
 
 	supplicant_dbus_property_foreach(iter, wps_event_args, interface);
+
+	callback_wps_state(interface);
 }
 
 static void create_peer_identifier(GSupplicantPeer *peer)
@@ -5066,6 +5079,59 @@ int g_supplicant_interface_connect(GSupplicantInterface *interface,
 	return -EINPROGRESS;
 }
 
+static void interface_wps_cancel_result(const char *error,
+		DBusMessageIter *iter, void *user_data)
+{
+	struct interface_data *data = user_data;
+	int err = 0;
+
+	SUPPLICANT_DBG("");
+
+	if (error != NULL) {
+		SUPPLICANT_DBG("error: %s", error);
+		err = parse_supplicant_error(iter);
+	}
+
+	if (data->callback != NULL)
+		data->callback(err, data->interface, data->user_data);
+
+	dbus_free(data);
+}
+
+int g_supplicant_interface_wps_cancel(GSupplicantInterface *interface,
+		GSupplicantInterfaceCallback callback,
+			void *user_data)
+{
+	struct interface_data *data;
+	int ret;
+
+	if (interface == NULL)
+		return -EINVAL;
+
+	if (system_available == FALSE)
+		return -EFAULT;
+
+	data = dbus_malloc0(sizeof(*data));
+	if (data == NULL)
+		return -ENOMEM;
+
+	data->interface = interface;
+	data->callback = callback;
+	data->user_data = user_data;
+
+	ret = supplicant_dbus_method_call(interface->path,
+		SUPPLICANT_INTERFACE ".Interface.WPS", "Cancel",
+		NULL,
+		interface_wps_cancel_result, data, interface);
+
+	if (ret < 0) {
+		g_free(data);
+		return ret;
+	}
+
+	return -EINPROGRESS;
+}
+
 static void network_remove_result(const char *error,
 				DBusMessageIter *iter, void *user_data)
 {
diff --git a/include/device.h b/include/device.h
index 5a3ddc22..ceb50a29 100644
--- a/include/device.h
+++ b/include/device.h
@@ -129,6 +129,8 @@ struct connman_device_driver {
 			struct connman_device *device);
 	int (*set_regdom) (struct connman_device *device,
 						const char *alpha2);
+	int (*start_wps) (struct connman_device *device, const char *pin);
+	int (*cancel_wps) (struct connman_device *device);
 };
 
 int connman_device_driver_register(struct connman_device_driver *driver);
diff --git a/include/technology.h b/include/technology.h
index 97db6607..54f3b4da 100644
--- a/include/technology.h
+++ b/include/technology.h
@@ -46,6 +46,8 @@ bool connman_technology_get_wifi_tethering(const char **ssid,
 							const char **psk);
 bool connman_technology_is_tethering_allowed(enum connman_service_type type);
 
+void connman_technology_wps_failed_notify(struct connman_technology *technology);
+
 struct connman_technology_driver {
 	const char *name;
 	enum connman_service_type type;
diff --git a/plugins/wifi.c b/plugins/wifi.c
index 46e4cca4..06b01ee6 100644
--- a/plugins/wifi.c
+++ b/plugins/wifi.c
@@ -61,6 +61,7 @@
 #define CLEANUP_TIMEOUT   8	/* in seconds */
 #define INACTIVE_TIMEOUT  12	/* in seconds */
 #define FAVORITE_MAXIMUM_RETRIES 2
+#define WPS_CONNECT_TIMEOUT 120 /* in seconds */
 
 #define BGSCAN_DEFAULT "simple:30:-45:300"
 #define AUTOSCAN_EXPONENTIAL "exponential:3:300"
@@ -77,6 +78,8 @@
 static struct connman_technology *wifi_technology = NULL;
 static struct connman_technology *p2p_technology = NULL;
 
+extern bool block_auto_connect;
+
 enum wifi_ap_capability{
 	WIFI_AP_UNKNOWN 	= 0,
 	WIFI_AP_SUPPORTED 	= 1,
@@ -160,6 +163,11 @@ struct wifi_data {
 	int servicing;
 	int disconnect_code;
 	int assoc_code;
+
+	bool wps_active;
+	GSupplicantSSID *wps_ssid;
+	guint wps_timeout;
+	bool wps_start_deferred;
 };
 
 static GList *iface_list = NULL;
@@ -206,6 +214,17 @@ static bool is_p2p_connecting(void)
 	return false;
 }
 
+static void enable_auto_connect_block(bool block)
+{
+	DBG("block %d", block);
+	if (block)
+		block_auto_connect = true;
+	else {
+		block_auto_connect = false;
+		__connman_service_auto_connect(CONNMAN_SERVICE_CONNECT_REASON_AUTO);
+	}
+}
+
 static void add_pending_wifi_device(struct wifi_data *wifi)
 {
 	if (g_list_find(pending_wifi_device, wifi))
@@ -786,6 +805,9 @@ static int wifi_probe(struct connman_device *device)
 
 	wifi->watch = connman_rtnl_add_newlink_watch(wifi->index,
 							wifi_newlink, device);
+
+	wifi->wps_active = FALSE;
+
 	if (is_p2p_connecting())
 		add_pending_wifi_device(wifi);
 	else
@@ -2033,6 +2055,217 @@ static int wifi_set_regdom(struct connman_device *device, const char *alpha2)
 	return ret;
 }
 
+static gboolean start_wps_timeout(gpointer user_data)
+{
+	struct wifi_data *wifi = user_data;
+
+	DBG("");
+
+	wifi->wps_timeout = 0;
+	wifi->wps_active = FALSE;
+
+	/* if we already assigned a network we have to remove it too */
+	wifi->network = NULL;
+
+	connman_technology_wps_failed_notify(wifi_technology);
+
+	return FALSE;
+}
+
+static bool is_wifi_valid (struct wifi_data *wifi)
+{
+	GList *list;
+
+	DBG("");
+
+	if (wifi == NULL)
+		return FALSE;
+
+	for (list = iface_list; list; list = list->next) {
+		if (list->data == wifi)
+			return TRUE;
+	}
+
+	DBG("wifi %p not found", wifi);
+
+	return FALSE;
+}
+
+static void cancel_wps_callback(int result, GSupplicantInterface *interface,
+                            void *user_data)
+{
+	struct wifi_data *wifi = user_data;
+
+	DBG("result %d", result);
+
+	if (!is_wifi_valid(wifi))
+		return;
+
+	/* if we already assigned a network we have to remove it too */
+	if (wifi->network) {
+		connman_network_set_bool(wifi->network, "WiFi.UseWPS", FALSE);
+		connman_network_set_connected(wifi->network, FALSE);
+		wifi->network = NULL;
+	}
+
+	if (wifi->wps_timeout > 0) {
+		g_source_remove(wifi->wps_timeout);
+		wifi->wps_timeout = 0;
+	}
+
+	wifi->wps_active = FALSE;
+	/* already freed within gsupplicant layer */
+	wifi->wps_ssid = NULL;
+
+	enable_auto_connect_block(FALSE);
+}
+
+static int cancel_wps(struct wifi_data *wifi)
+{
+	int ret;
+
+	DBG("wifi %p", wifi);
+
+	ret = g_supplicant_interface_wps_cancel(wifi->interface, cancel_wps_callback, wifi);
+	if (ret == -EALREADY || ret == -EINPROGRESS)
+		ret = 0;
+
+	return ret;
+}
+
+static gboolean wps_timeout_cb(gpointer user_data)
+{
+	struct wifi_data *wifi = user_data;
+
+	DBG("");
+
+	if (!is_wifi_valid(wifi))
+		return FALSE;
+
+	cancel_wps(wifi);
+
+	connman_technology_wps_failed_notify(wifi_technology);
+
+	return FALSE;
+}
+
+static void wps_start_callback(int result, GSupplicantInterface *interface,
+                            void *user_data)
+{
+	struct wifi_data *wifi = user_data;
+
+	DBG("result %d", result);
+
+	if (result == 0)
+		return;
+
+	if (!is_wifi_valid(wifi))
+		return;
+
+	/* if we're at this place something went wrong an we have to clean up */
+	if (wifi->wps_timeout > 0) {
+		g_source_remove(wifi->wps_timeout);
+		wifi->wps_timeout = 0;
+	}
+
+	wifi->wps_active = FALSE;
+
+	connman_technology_wps_failed_notify(wifi_technology);
+}
+
+static int start_wps(struct wifi_data *wifi)
+{
+	int ret;
+
+	connman_info("start wps connection");
+
+	wifi->wps_timeout = g_timeout_add_seconds(WPS_CONNECT_TIMEOUT,
+							wps_timeout_cb, wifi);
+
+	ret = g_supplicant_interface_connect(wifi->interface, wifi->wps_ssid,
+						wps_start_callback, wifi);
+	if (ret == -EALREADY || ret == -EINPROGRESS)
+		ret = 0;
+
+	return ret;
+}
+
+static gboolean deferred_wps_start(struct wifi_data *wifi)
+{
+	DBG("WPS active %d", wifi->wps_active);
+
+	if(wifi->wps_active == FALSE)
+		return FALSE;
+
+	if(wifi->wps_start_deferred) {
+		wifi->network = NULL;
+		start_wps(wifi);
+		wifi->wps_start_deferred = FALSE;
+		return TRUE;
+	}
+
+	return FALSE;
+}
+
+static int wifi_start_wps(struct connman_device *device, const char *pin)
+{
+	struct wifi_data *wifi = connman_device_get_data(device);
+	GSupplicantSSID *ssid;
+	int ret=0;
+
+	if (wifi->wps_active == TRUE)
+		return -EINPROGRESS;
+
+	DBG("");
+
+	ssid = g_try_malloc0(sizeof(GSupplicantSSID));
+	if (ssid == NULL)
+		return -ENOMEM;
+
+	ssid->use_wps = TRUE;
+	if(strlen(pin) == 0)
+		ssid->pin_wps = NULL;
+	else
+		ssid->pin_wps = g_strdup(pin);
+
+	wifi->wps_active = TRUE;
+	wifi->wps_ssid = ssid;
+
+	enable_auto_connect_block(TRUE);
+
+	/* if we're still disconnecting wait until we're completely disconnected */
+	if (wifi->disconnecting) {
+		DBG("Defering WPS until disconnect is done");
+		wifi->wps_start_deferred = TRUE;
+		return 0;
+	}
+
+	/* This is ahead of what will happen if we have an associating network
+	 * at this point. Once we issue the StartWPS command to wpa-supplicant
+	 * the network will be disconnected and we will receive the interface
+	 * state change signal. As we're in the middle of the WPS process we
+	 * don't handle that there ... */
+	if (wifi->network) {
+		connman_network_set_connected(wifi->network, FALSE);
+		connman_network_set_associating(wifi->network, FALSE);
+		wifi->network = NULL;
+	}
+
+	return start_wps(wifi);
+}
+
+static int wifi_cancel_wps(struct connman_device *device)
+{
+	struct wifi_data *wifi = connman_device_get_data(device);
+
+	DBG("");
+
+	if (wifi->wps_active == FALSE)
+		return 0;
+
+	return cancel_wps(wifi);
+}
+
 static struct connman_device_driver wifi_ng_driver = {
 	.name		= "wifi",
 	.type		= CONNMAN_DEVICE_TYPE_WIFI,
@@ -2044,6 +2277,8 @@ static struct connman_device_driver wifi_ng_driver = {
 	.scan		= wifi_scan,
 	.stop_scan	= wifi_stop_scan,
 	.set_regdom	= wifi_set_regdom,
+	.start_wps	= wifi_start_wps,
+	.cancel_wps	= wifi_cancel_wps
 };
 
 static void system_ready(void)
@@ -2068,6 +2303,23 @@ static int network_probe(struct connman_network *network)
 	return 0;
 }
 
+static int network_connect(struct connman_network *network);
+
+static gboolean perform_deferred_connect_after_disconnect(struct wifi_data *wifi)
+{
+	if (wifi->pending_network != NULL) {
+		network_connect(wifi->pending_network);
+		wifi->pending_network = NULL;
+		return TRUE;
+	}
+
+	if (deferred_wps_start(wifi)) {
+		return TRUE;
+	}
+
+	return FALSE;
+}
+
 static void network_remove(struct connman_network *network)
 {
 	struct connman_device *device = connman_network_get_device(network);
@@ -2081,6 +2333,10 @@ static void network_remove(struct connman_network *network)
 
 	if (wifi->network != network)
 		return;
+	else {
+		wifi->disconnecting = FALSE;
+		perform_deferred_connect_after_disconnect(wifi);
+	}
 
 	wifi->network = NULL;
 }
@@ -2198,6 +2454,9 @@ static int network_connect(struct connman_network *network)
 	if (!wifi)
 		return -ENODEV;
 
+	if (wifi->wps_active)
+		return -EINPROGRESS;
+
 	ssid = g_try_malloc0(sizeof(GSupplicantSSID));
 	if (!ssid)
 		return -ENOMEM;
@@ -2240,12 +2499,10 @@ static void disconnect_callback(int result, GSupplicantInterface *interface,
 	wifi->disconnecting = false;
 	wifi->connected = false;
 
-	if (wifi->pending_network) {
-		network_connect(wifi->pending_network);
-		wifi->pending_network = NULL;
+	if (perform_deferred_connect_after_disconnect(wifi) == FALSE)
+	{
+		start_autoscan(wifi->device);
 	}
-
-	start_autoscan(wifi->device);
 }
 
 static int network_disconnect(struct connman_network *network)
@@ -2380,20 +2637,22 @@ static bool handle_wps_completion(GSupplicantInterface *interface,
 		unsigned int ssid_len, wps_ssid_len;
 		const char *wps_key;
 
-		/* Checking if we got associated with requested
-		 * network */
-		ssid = connman_network_get_blob(network, "WiFi.SSID",
-						&ssid_len);
-
-		wps_ssid = g_supplicant_interface_get_wps_ssid(
-			interface, &wps_ssid_len);
-
-		if (!wps_ssid || wps_ssid_len != ssid_len ||
-				memcmp(ssid, wps_ssid, ssid_len) != 0) {
-			connman_network_set_associating(network, false);
-			g_supplicant_interface_disconnect(wifi->interface,
-						disconnect_callback, wifi);
-			return false;
+		if (wifi->wps_active == FALSE) {
+			/* Checking if we got associated with requested
+			 * network */
+			ssid = connman_network_get_blob(network, "WiFi.SSID",
+							&ssid_len);
+
+			wps_ssid = g_supplicant_interface_get_wps_ssid(
+				interface, &wps_ssid_len);
+
+			if (!wps_ssid || wps_ssid_len != ssid_len ||
+					memcmp(ssid, wps_ssid, ssid_len) != 0) {
+				connman_network_set_associating(network, false);
+				g_supplicant_interface_disconnect(wifi->interface,
+							disconnect_callback, wifi);
+				return false;
+			}
 		}
 
 		wps_key = g_supplicant_interface_get_wps_key(interface);
@@ -2448,6 +2707,65 @@ static bool handle_4way_handshake_failure(GSupplicantInterface *interface,
 	return false;
 }
 
+static void wps_state(GSupplicantInterface *interface)
+{
+	struct wifi_data *wifi;
+	GSupplicantWpsState state = g_supplicant_interface_get_wps_state(interface);
+	const char *wps_ssid, *ssid;
+	unsigned int wps_ssid_len, ssid_len;
+	GSList *list;
+	struct connman_network *found_network = NULL;
+
+	wifi = g_supplicant_interface_get_data(interface);
+
+	if(wifi==NULL)
+		return;
+
+	if (wifi->wps_active == FALSE)
+		return;
+
+	wps_ssid = g_supplicant_interface_get_wps_ssid(interface, &wps_ssid_len);
+
+	DBG("wifi %p wps state %d ssid %s", wifi, state, wps_ssid);
+
+	g_source_remove(wifi->wps_timeout);
+	wifi->wps_timeout = 0;
+
+	switch (state) {
+	case G_SUPPLICANT_WPS_STATE_UNKNOWN:
+		return;
+	case G_SUPPLICANT_WPS_STATE_FAIL:
+	wifi->wps_active = FALSE;
+	connman_technology_wps_failed_notify(wifi_technology);
+	return;
+	}
+
+	for (list = wifi->networks; list != NULL; list = list->next) {
+		struct connman_network *network = list->data;
+
+		ssid = connman_network_get_blob(network, "WiFi.SSID", &ssid_len);
+
+		if (ssid != NULL && wps_ssid_len == ssid_len &&
+		    memcmp(ssid, wps_ssid, ssid_len) == 0) {
+			DBG("found network %s", ssid);
+			connman_network_set_bool(network, "WiFi.UseWPS", TRUE);
+			found_network = network;
+			break;
+		}
+	}
+
+	if (found_network == NULL) {
+		DBG("didn't found a network for ssid %s", wps_ssid);
+		g_supplicant_interface_disconnect(wifi->interface,
+		disconnect_callback, wifi);
+		return;
+	}
+
+	/* we've found the correct network so we connect as normal
+	 * in our connection process */
+	wifi->network = found_network;
+}
+
 static void interface_state(GSupplicantInterface *interface)
 {
 	struct connman_network *network;
@@ -2455,7 +2773,10 @@ static void interface_state(GSupplicantInterface *interface)
 	struct wifi_data *wifi;
 	GSupplicantState state = g_supplicant_interface_get_state(interface);
 	bool wps;
+	GSList *list;
 	bool old_connected;
+	const char *wps_ssid, *ssid;
+	unsigned int wps_ssid_len, ssid_len;
 
 	wifi = g_supplicant_interface_get_data(interface);
 
@@ -2489,6 +2810,23 @@ static void interface_state(GSupplicantInterface *interface)
 	if (!network)
 		return;
 
+	wps_ssid = g_supplicant_interface_get_wps_ssid(interface, &wps_ssid_len);
+	if (!network && wifi->wps_active && wps_ssid_len) {
+		for (list = wifi->networks; list != NULL; list = list->next) {
+			struct connman_network *connected_network = list->data;
+
+			ssid = connman_network_get_blob(connected_network, "WiFi.SSID", &ssid_len);
+			if (ssid != NULL && wps_ssid_len == ssid_len &&
+				memcmp(ssid, wps_ssid, ssid_len) == 0) {
+				DBG("found network %s", ssid);
+				connman_network_set_bool(connected_network, "WiFi.UseWPS", TRUE);
+				wifi->network = connected_network;
+				network = wifi->network;
+				break;
+			}
+		}
+	}
+
 	switch (state) {
 	case G_SUPPLICANT_STATE_SCANNING:
 		if (wifi->connected)
@@ -2500,6 +2838,7 @@ static void interface_state(GSupplicantInterface *interface)
 	case G_SUPPLICANT_STATE_ASSOCIATING:
 		stop_autoscan(device);
 
+		connman_device_set_scanning(device, CONNMAN_SERVICE_TYPE_WIFI,FALSE);
 		if (!wifi->connected)
 			connman_network_set_associating(network, true);
 
@@ -2509,6 +2848,7 @@ static void interface_state(GSupplicantInterface *interface)
 		/* though it should be already stopped: */
 		stop_autoscan(device);
 
+		connman_device_set_scanning(device,CONNMAN_SERVICE_TYPE_WIFI,FALSE);
 		if (!handle_wps_completion(interface, network, device, wifi))
 			break;
 
@@ -2517,6 +2857,7 @@ static void interface_state(GSupplicantInterface *interface)
 		wifi->disconnect_code = 0;
 		wifi->assoc_code = 0;
 		wifi->load_shaping_retries = 0;
+		wifi->wps_active = FALSE;
 		break;
 
 	case G_SUPPLICANT_STATE_DISCONNECTED:
@@ -2565,7 +2906,12 @@ static void interface_state(GSupplicantInterface *interface)
 		}
 		wifi->disconnecting = false;
 
-		start_autoscan(device);
+		if (perform_deferred_connect_after_disconnect(wifi) == FALSE)
+		{
+			/* Set connected to false to allow autoscan to start. */
+			wifi->connected = FALSE;
+		    start_autoscan(device);
+		}
 
 		break;
 
@@ -3215,6 +3561,7 @@ static const GSupplicantCallbacks callbacks = {
 	.peer_lost		= peer_lost,
 	.peer_changed		= peer_changed,
 	.peer_request		= peer_request,
+	.wps_state		= wps_state,
 	.debug			= debug,
 	.disconnect_reasoncode  = disconnect_reasoncode,
 	.assoc_status_code      = assoc_status_code,
diff --git a/src/connman.h b/src/connman.h
index 82e77d37..9dd22157 100644
--- a/src/connman.h
+++ b/src/connman.h
@@ -562,6 +562,9 @@ void __connman_device_list(DBusMessageIter *iter, void *user_data);
 enum connman_service_type __connman_device_get_service_type(struct connman_device *device);
 struct connman_device *__connman_device_find_device(enum connman_service_type type);
 int __connman_device_request_scan(enum connman_service_type type);
+int __connman_device_request_scan_full(enum connman_service_type type);
+int __connman_device_request_start_wps(enum connman_service_type type, const char *pin);
+int __connman_device_request_cancel_wps(enum connman_service_type type);
 int __connman_device_request_hidden_scan(struct connman_device *device,
 				const char *ssid, unsigned int ssid_len,
 				const char *identity, const char *passphrase,
diff --git a/src/device.c b/src/device.c
index 5d343ae8..661523b9 100644
--- a/src/device.c
+++ b/src/device.c
@@ -1154,6 +1154,122 @@ void __connman_device_stop_scan(enum connman_service_type type)
 	}
 }
 
+static int device_start_wps(struct connman_device *device, const char *pin)
+{
+	if (!device->driver || !device->driver->start_wps)
+		return -EOPNOTSUPP;
+
+	if (device->powered == FALSE)
+	        return -ENOLINK;
+
+	__connman_device_disconnect(device);
+
+	return device->driver->start_wps(device, pin);
+}
+
+int __connman_device_request_start_wps(enum connman_service_type type, const char *pin)
+{
+	bool success = FALSE;
+	int last_err = -ENOSYS;
+	GSList *list;
+	int err;
+
+	switch (type) {
+	case CONNMAN_SERVICE_TYPE_UNKNOWN:
+	case CONNMAN_SERVICE_TYPE_SYSTEM:
+	case CONNMAN_SERVICE_TYPE_ETHERNET:
+	case CONNMAN_SERVICE_TYPE_BLUETOOTH:
+	case CONNMAN_SERVICE_TYPE_CELLULAR:
+	case CONNMAN_SERVICE_TYPE_GPS:
+	case CONNMAN_SERVICE_TYPE_VPN:
+	case CONNMAN_SERVICE_TYPE_GADGET:
+		return -EOPNOTSUPP;
+	case CONNMAN_SERVICE_TYPE_WIFI:
+		break;
+	}
+
+	for (list = device_list; list != NULL; list = list->next) {
+		struct connman_device *device = list->data;
+		enum connman_service_type service_type =
+			__connman_device_get_service_type(device);
+
+		if (service_type != CONNMAN_SERVICE_TYPE_UNKNOWN &&
+				service_type != type) {
+			continue;
+		}
+
+		err = device_start_wps(device, pin);
+		if (err == 0) {
+			success = TRUE;
+		} else {
+			last_err = err;
+			DBG("device %p err %d", device, err);
+		}
+	}
+
+	if (success == TRUE)
+		return 0;
+
+	return last_err;
+}
+
+static int device_cancel_wps(struct connman_device *device)
+{
+	if (!device->driver || !device->driver->cancel_wps)
+		return -EOPNOTSUPP;
+
+	if (device->powered == FALSE)
+		return -ENOLINK;
+
+	return device->driver->cancel_wps(device);
+}
+
+int __connman_device_request_cancel_wps(enum connman_service_type type)
+{
+	bool success = FALSE;
+	int last_err = -ENOSYS;
+	GSList *list;
+	int err;
+
+	switch (type) {
+	case CONNMAN_SERVICE_TYPE_UNKNOWN:
+	case CONNMAN_SERVICE_TYPE_SYSTEM:
+	case CONNMAN_SERVICE_TYPE_ETHERNET:
+	case CONNMAN_SERVICE_TYPE_BLUETOOTH:
+	case CONNMAN_SERVICE_TYPE_CELLULAR:
+	case CONNMAN_SERVICE_TYPE_GPS:
+	case CONNMAN_SERVICE_TYPE_VPN:
+	case CONNMAN_SERVICE_TYPE_GADGET:
+		return -EOPNOTSUPP;
+	case CONNMAN_SERVICE_TYPE_WIFI:
+		break;
+	}
+
+	for (list = device_list; list != NULL; list = list->next) {
+		struct connman_device *device = list->data;
+		enum connman_service_type service_type =
+			__connman_device_get_service_type(device);
+
+		if (service_type != CONNMAN_SERVICE_TYPE_UNKNOWN &&
+			service_type != type) {
+			continue;
+		}
+
+		err = device_cancel_wps(device);
+		if (err == 0) {
+			success = TRUE;
+		} else {
+			last_err = err;
+			DBG("device %p err %d", device, err);
+		}
+	}
+
+	if (success == TRUE)
+		return 0;
+
+	return last_err;
+}
+
 static char *index2ident(int index, const char *prefix)
 {
 	struct ifreq ifr;
diff --git a/src/service.c b/src/service.c
index 733c0728..0376f519 100644
--- a/src/service.c
+++ b/src/service.c
@@ -49,6 +49,8 @@ static unsigned int vpn_autoconnect_id = 0;
 static struct connman_service *current_default = NULL;
 static bool services_dirty = false;
 
+bool block_auto_connect = FALSE;
+
 struct connman_stats {
 	bool valid;
 	bool enabled;
diff --git a/src/technology.c b/src/technology.c
index 4c1cbbbb..a92bc43f 100644
--- a/src/technology.c
+++ b/src/technology.c
@@ -1090,6 +1090,50 @@ static DBusMessage *scan(DBusConnection *conn, DBusMessage *msg, void *data)
 	return NULL;
 }
 
+void connman_technology_wps_failed_notify(struct connman_technology *technology)
+{
+	g_dbus_emit_signal(connection, technology->path,
+		CONNMAN_TECHNOLOGY_INTERFACE, "WPSFailed",
+		DBUS_TYPE_INVALID);
+}
+
+static DBusMessage *start_wps(DBusConnection *conn, DBusMessage *msg, void *data)
+{
+	struct connman_technology *technology = data;
+	DBusMessageIter iter;
+	int err;
+	const char *pin;
+
+	DBG("technology %p request from %s", technology,
+		dbus_message_get_sender(msg));
+
+	if (dbus_message_iter_init(msg, &iter) == FALSE)
+		return __connman_error_invalid_arguments(msg);
+
+	if (dbus_message_iter_get_arg_type(&iter) != DBUS_TYPE_STRING)
+		return __connman_error_invalid_arguments(msg);
+
+	dbus_message_iter_get_basic(&iter, &pin);
+
+	err = __connman_device_request_start_wps(technology->type, pin);
+	if (err < 0)
+		return __connman_error_failed(msg, -err);
+
+	return g_dbus_create_reply(msg, DBUS_TYPE_INVALID);
+}
+
+static DBusMessage *cancel_wps(DBusConnection *conn, DBusMessage *msg, void *data)
+{
+	struct connman_technology *technology = data;
+	int err;
+
+	err = __connman_device_request_cancel_wps(technology->type);
+	if (err < 0)
+		return __connman_error_failed(msg, -err);
+
+	return g_dbus_create_reply(msg, DBUS_TYPE_INVALID);
+}
+
 static const GDBusMethodTable technology_methods[] = {
 	{ GDBUS_DEPRECATED_METHOD("GetProperties",
 			NULL, GDBUS_ARGS({ "properties", "a{sv}" }),
@@ -1098,12 +1142,17 @@ static const GDBusMethodTable technology_methods[] = {
 			GDBUS_ARGS({ "name", "s" }, { "value", "v" }),
 			NULL, set_property) },
 	{ GDBUS_ASYNC_METHOD("Scan", NULL, NULL, scan) },
+	{ GDBUS_ASYNC_METHOD("StartWPS",
+			GDBUS_ARGS({ "pin", "s" }),
+			NULL, start_wps) },
+	{ GDBUS_METHOD("CancelWPS", NULL, NULL, cancel_wps) },
 	{ },
 };
 
 static const GDBusSignalTable technology_signals[] = {
 	{ GDBUS_SIGNAL("PropertyChanged",
 			GDBUS_ARGS({ "name", "s" }, { "value", "v" })) },
+	{ GDBUS_SIGNAL("WPSFailed", NULL) },
 	{ },
 };
 
