From df11e4d281552d28aa51f4df2a576a79beae47cd Mon Sep 17 00:00:00 2001
From: Rakes Pani <rakes.pani@lge.com>
Date: Wed, 3 Jun 2020 18:08:39 +0530
Subject: [PATCH] Enabled EMAIL support based on MAPInstance Name Modified
 ObexCtl to support modified API Modified ObexCtl to support lsFolder

:Release Notes:
    Added MAP connection based on instanceName

:Detailed Notes:
    Added MAP connection based on instanceName
    ObexCtl to support modified API Modified ObexCtl to support lsFolder

:QA Notes:
    NA

:Issues Addressed:
    [PLAT-107882] Implement BlueZ API support for MAP connection support

Upstream-Status: Inappropriate[webos specific]

---
 obexd/client/bluetooth.c | 21 ++++++++++++++++++---
 obexd/client/manager.c   | 10 ++++++----
 obexd/client/map.c       | 17 +++++++++++++++++
 obexd/client/session.c   |  9 ++++++++-
 obexd/client/session.h   |  1 +
 obexd/client/transport.h |  2 +-
 tools/obexctl.c          | 13 +++++++++++--
 7 files changed, 62 insertions(+), 11 deletions(-)

diff --git a/obexd/client/bluetooth.c b/obexd/client/bluetooth.c
index 0c043e0..d718e1a 100644
--- a/obexd/client/bluetooth.c
+++ b/obexd/client/bluetooth.c
@@ -57,6 +57,7 @@ struct bluetooth_session {
 	sdp_record_t *sdp_record;
 	GIOChannel *io;
 	char *service;
+	char *instanceName;
 	obc_transport_func func;
 	void *user_data;
 };
@@ -191,6 +192,17 @@ static void search_callback(uint8_t type, uint16_t status,
 		if (data != NULL && (data->val.uint16 & 0x0101) == 0x0001)
 			ch = data->val.uint16;
 
+		data = sdp_data_get(rec, 0x0100);
+		/* PSM must be odd and lsb of upper byte must be 0 */
+		if (data != NULL)
+		{
+			DBG("instance Name %s " ,data->val.str);
+			if(session->instanceName)
+			DBG("instance Name %s " ,session->instanceName);
+			if (session->instanceName && !g_str_has_prefix(data->val.str,session->instanceName))
+				ch = 0;
+		}
+			
 		/* Cache the sdp record associated with the service that we
 		 * attempt to connect. This allows reading its application
 		 * specific service attributes. */
@@ -375,12 +387,14 @@ static int session_connect(struct bluetooth_session *session)
 	DBG("session %p", session);
 
 	if (session->port > 0) {
+		DBG("serviceconnect for PSM Value %d ",session->port);
 		session->io = transport_connect(&session->src, &session->dst,
 							session->port,
 							transport_callback,
 							session);
 		err = (session->io == NULL) ? -EINVAL : 0;
 	} else {
+		DBG("serviceconnect for sdp");
 		session->sdp = service_connect(&session->src, &session->dst,
 						service_callback, session);
 		err = (session->sdp == NULL) ? -ENOMEM : 0;
@@ -390,14 +404,14 @@ static int session_connect(struct bluetooth_session *session)
 }
 
 static guint bluetooth_connect(const char *source, const char *destination,
-				const char *service, uint16_t port,
+				const char *service, const char *instanceName, uint16_t port,
 				obc_transport_func func, void *user_data)
 {
 	struct bluetooth_session *session;
 	static guint id = 0;
 
-	DBG("src %s dest %s service %s port %u",
-				source, destination, service, port);
+	DBG("src %s dest %s service %s instanceName %s port %u",
+				source, destination, service,instanceName, port);
 
 	if (destination == NULL)
 		return 0;
@@ -410,6 +424,7 @@ static guint bluetooth_connect(const char *source, const char *destination,
 	session->func = func;
 	session->port = port;
 	session->user_data = user_data;
+	session->instanceName = g_strdup(instanceName);
 
 	str2ba(destination, &session->dst);
 	str2ba(source, &session->src);
diff --git a/obexd/client/manager.c b/obexd/client/manager.c
index fbcad6d..c24f009 100644
--- a/obexd/client/manager.c
+++ b/obexd/client/manager.c
@@ -120,7 +120,7 @@ done:
 }
 
 static int parse_device_dict(DBusMessageIter *iter,
-		const char **source, const char **target, uint8_t *channel)
+		const char **source, const char **target, uint8_t *channel, const char **instanceName)
 {
 	while (dbus_message_iter_get_arg_type(iter) == DBUS_TYPE_DICT_ENTRY) {
 		DBusMessageIter entry, value;
@@ -138,6 +138,8 @@ static int parse_device_dict(DBusMessageIter *iter,
 				dbus_message_iter_get_basic(&value, source);
 			else if (g_str_equal(key, "Target") == TRUE)
 				dbus_message_iter_get_basic(&value, target);
+			else if (g_str_equal(key, "InstanceName") == TRUE)
+				dbus_message_iter_get_basic(&value, instanceName);
 			break;
 		case DBUS_TYPE_BYTE:
 			if (g_str_equal(key, "Channel") == TRUE)
@@ -171,7 +173,7 @@ static DBusMessage *create_session(DBusConnection *connection,
 	DBusMessageIter iter, dict;
 	struct obc_session *session;
 	struct send_data *data;
-	const char *source = NULL, *dest = NULL, *target = NULL;
+	const char *source = NULL, *dest = NULL, *target = NULL ,*inStanceName = NULL;
 	uint8_t channel = 0;
 
 	dbus_message_iter_init(message, &iter);
@@ -188,7 +190,7 @@ static DBusMessage *create_session(DBusConnection *connection,
 
 	dbus_message_iter_recurse(&iter, &dict);
 
-	parse_device_dict(&dict, &source, &target, &channel);
+	parse_device_dict(&dict, &source, &target, &channel,&inStanceName);
 	if (dest == NULL || target == NULL)
 		return g_dbus_create_error(message,
 				ERROR_INTERFACE ".InvalidArguments", NULL);
@@ -201,7 +203,7 @@ static DBusMessage *create_session(DBusConnection *connection,
 	data->connection = dbus_connection_ref(connection);
 	data->message = dbus_message_ref(message);
 
-	session = obc_session_create(source, dest, target, channel,
+	session = obc_session_create(source, dest, target,inStanceName, channel,
 					dbus_message_get_sender(message),
 					create_callback, data);
 	if (session != NULL) {
diff --git a/obexd/client/map.c b/obexd/client/map.c
index 28e60fe..94e9d64 100644
--- a/obexd/client/map.c
+++ b/obexd/client/map.c
@@ -1595,6 +1595,19 @@ static DBusMessage *map_list_filter_fields(DBusConnection *connection,
 	return reply;
 }
 
+static DBusMessage *map_list_supported_message_types(DBusConnection *connection,
+					DBusMessage *message, void *user_data)
+{
+	DBG("");
+	struct map_data *map = user_data;
+	DBusMessage *reply;
+	uint8_t message_types = map->supported_message_types;
+	reply = dbus_message_new_method_return(message);
+	dbus_message_append_args(reply, DBUS_TYPE_BYTE,
+				&message_types, DBUS_TYPE_INVALID);
+	return reply;
+}
+
 static void update_inbox_cb(struct obc_session *session,
 				struct obc_transfer *transfer,
 				GError *err, void *user_data)
@@ -1831,6 +1844,10 @@ static const GDBusMethodTable map_methods[] = {
 			GDBUS_ARGS({ "transfer", "o" },
 						{ "properties", "a{sv}" }),
 			map_push_message) },
+	{ GDBUS_METHOD("ListSupportedMessageType",
+			NULL,
+			GDBUS_ARGS({ "types", "y" }),
+			map_list_supported_message_types) },
 	{ }
 };
 
diff --git a/obexd/client/session.c b/obexd/client/session.c
index cf4cb2c..8b6660b 100644
--- a/obexd/client/session.c
+++ b/obexd/client/session.c
@@ -100,6 +100,7 @@ struct obc_session {
 	int refcount;
 	char *source;
 	char *destination;
+	char *inStanceName;
 	uint8_t channel;
 	struct obc_transport *transport;
 	struct obc_driver *driver;
@@ -554,7 +555,7 @@ static int session_connect(struct obc_session *session,
 	}
 
 	session->id = transport->connect(session->source, session->destination,
-					driver->uuid, session->channel,
+					driver->uuid,session->inStanceName, session->channel,
 					transport_func, callback);
 	if (session->id == 0) {
 		obc_session_unref(callback->session);
@@ -570,6 +571,7 @@ static int session_connect(struct obc_session *session,
 struct obc_session *obc_session_create(const char *source,
 						const char *destination,
 						const char *service,
+						const char *instanceName,
 						uint8_t channel,
 						const char *owner,
 						session_callback_t function,
@@ -610,6 +612,7 @@ struct obc_session *obc_session_create(const char *source,
 	session->conn = conn;
 	session->source = g_strdup(source);
 	session->destination = g_strdup(destination);
+	//session->inStanceName = g_strdup(instanceName);
 	session->channel = channel;
 	session->queue = g_queue_new();
 	session->folder = g_strdup("/");
@@ -618,6 +621,7 @@ struct obc_session *obc_session_create(const char *source,
 		obc_session_set_owner(session, owner, owner_disconnected);
 
 proceed:
+	session->inStanceName = g_strdup(instanceName);
 	if (session_connect(session, function, user_data) < 0) {
 		obc_session_unref(session);
 		return NULL;
@@ -626,6 +630,9 @@ proceed:
 	DBG("session %p transport %s driver %s", session,
 			session->transport->name, session->driver->service);
 
+	DBG("session %p source %s destination %s", session,
+			session->source, session->destination);
+
 	return session;
 }
 
diff --git a/obexd/client/session.h b/obexd/client/session.h
index b561b7e..5972b9d 100644
--- a/obexd/client/session.h
+++ b/obexd/client/session.h
@@ -34,6 +34,7 @@ typedef void (*session_callback_t) (struct obc_session *session,
 struct obc_session *obc_session_create(const char *source,
 						const char *destination,
 						const char *service,
+						const char *instanceName,
 						uint8_t channel,
 						const char *owner,
 						session_callback_t function,
diff --git a/obexd/client/transport.h b/obexd/client/transport.h
index b035cfc..ff17edf 100644
--- a/obexd/client/transport.h
+++ b/obexd/client/transport.h
@@ -27,7 +27,7 @@ typedef void (*obc_transport_func)(GIOChannel *io, GError *err,
 struct obc_transport {
 	const char *name;
 	guint (*connect) (const char *source, const char *destination,
-				const char *service, uint16_t port,
+				const char *service,const char *instanceName, uint16_t port,
 				obc_transport_func func, void *user_data);
 	int (*getpacketopt) (GIOChannel *io, int *tx_mtu, int *rx_mtu);
 	void (*disconnect) (guint id);
diff --git a/tools/obexctl.c b/tools/obexctl.c
index 9ed336a..275950a 100644
--- a/tools/obexctl.c
+++ b/tools/obexctl.c
@@ -127,6 +127,7 @@ static void connect_reply(DBusMessage *message, void *user_data)
 struct connect_args {
 	char *dev;
 	char *target;
+	char *instanceName;
 };
 
 static void connect_args_free(void *data)
@@ -157,6 +158,8 @@ static void connect_setup(DBusMessageIter *iter, void *user_data)
 
 	g_dbus_dict_append_entry(&dict, "Target",
 					DBUS_TYPE_STRING, &args->target);
+	g_dbus_dict_append_entry(&dict, "InstanceName",
+					DBUS_TYPE_STRING, &args->instanceName);
 
 done:
 	dbus_message_iter_close_container(iter, &dict);
@@ -166,6 +169,7 @@ static void cmd_connect(int argc, char *argv[])
 {
 	struct connect_args *args;
 	const char *target = "opp";
+	const char *instanceName = "";
 
 	if (!client) {
 		bt_shell_printf("Client proxy not available\n");
@@ -175,9 +179,13 @@ static void cmd_connect(int argc, char *argv[])
 	if (argc > 2)
 		target = argv[2];
 
+	if (argc > 3)
+		instanceName = argv[3];
+
 	args = g_new0(struct connect_args, 1);
 	args->dev = g_strdup(argv[1]);
 	args->target = g_strdup(target);
+	args->instanceName = g_strdup(instanceName);
 
 	if (g_dbus_proxy_method_call(client, "CreateSession", connect_setup,
 			connect_reply, args, connect_args_free) == FALSE) {
@@ -1845,7 +1853,7 @@ static void cmd_mkdir(int argc, char *argv[])
 static const struct bt_shell_menu main_menu = {
 	.name = "main",
 	.entries = {
-	{ "connect",      "<dev> [uuid]", cmd_connect, "Connect session" },
+	{ "connect",      "<dev> [uuid] [instanceName]", cmd_connect, "Connect session" },
 	{ "disconnect",   "[session]", cmd_disconnect, "Disconnect session",
 						session_generator },
 	{ "list",         NULL,       cmd_list, "List available sessions" },
@@ -1865,7 +1873,8 @@ static const struct bt_shell_menu main_menu = {
 	{ "pull",	  "<file>",   cmd_pull,
 					"Pull Vobject & stores in file" },
 	{ "cd",           "<path>",   cmd_cd, "Change current folder" },
-	{ "ls",           "<options>", cmd_ls, "List current folder" },
+	{ "ls",           "<options>", cmd_ls, "List current folder Items" },
+	{ "lsFolder",           NULL, cmd_ls, "List current folder" },
 	{ "cp",          "<source file> <destination file>",   cmd_cp,
 				"Copy source file to destination file" },
 	{ "mv",          "<source file> <destination file>",   cmd_mv,
