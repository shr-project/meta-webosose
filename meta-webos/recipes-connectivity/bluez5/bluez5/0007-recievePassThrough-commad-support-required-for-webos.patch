From 2d582220c50951ad23b3bd65f447fcf043cabf95 Mon Sep 17 00:00:00 2001
From: "sameer.mulla" <sameer.mulla@lge.com>
Date: Sun, 13 Jan 2019 13:35:55 +0530
Subject: [PATCH] recievePassThrough commad support required for webos

:Release Notes:
recievePassThrough commad support required for webos

:Detailed Notes:
bluez not supporting recievePassThrough throught properties,
instead directly injecting uinput events
As luna command is required to be supported so
added as properties so that this can read from bluetooth-bluez-sil

:Testing Performed:
Builded and tested

:QA Notes:

:Issues Addressed:
[PLAT-49637] Implement avrcp/receivePassThroughCommand for blueooth-sil-bluez

Upstream-Status: Inappropriate[webos specific]

Change-Id: I9c07aa27f242247b5c3df85e0b3605d2ba055cad
---
 profiles/audio/avctp.c |  5 ++++
 src/device.c           | 57 +++++++++++++++++++++++++++++++++++++++++-
 src/device.h           |  2 ++
 3 files changed, 63 insertions(+), 1 deletion(-)

diff --git a/profiles/audio/avctp.c b/profiles/audio/avctp.c
index 6f64f162b..b002470f9 100644
--- a/profiles/audio/avctp.c
+++ b/profiles/audio/avctp.c
@@ -406,6 +406,7 @@ static size_t handle_panel_passthrough(struct avctp *session,
 
 		DBG("AV/C: %s %s", key_map[i].name, status);
 
+		recieve_passThrough_commands(session->device, key_map[i].name, status);
 		key_quirks = session->key_quirks[key_map[i].avc];
 
 		if (key_quirks & QUIRK_NO_RELEASE) {
@@ -421,9 +422,13 @@ static size_t handle_panel_passthrough(struct avctp *session,
 		}
 
 		if (pressed)
+		{
 			handle_press(session, key_map[i].uinput);
+		}
 		else
+		{
 			handle_release(session, key_map[i].uinput);
+		}
 
 		break;
 	}
diff --git a/src/device.c b/src/device.c
index c3e86b3fc..dde1d936e 100644
--- a/src/device.c
+++ b/src/device.c
@@ -171,6 +171,11 @@ enum {
 	WAKE_FLAG_DISABLED,
 };
 
+struct key_code {
+	const char* key;
+	const char* state;
+};
+
 struct btd_device {
 	int ref_count;
 
@@ -276,6 +281,8 @@ struct btd_device {
 	guint		store_id;
 
 	time_t		name_resolve_failed_time;
+
+	struct key_code passththough_key;
 };
 
 static const uint16_t uuid_list[] = {
@@ -1382,6 +1389,18 @@ dev_property_manufacturer_data_exist(const GDBusPropertyTable *property,
 	return bt_ad_has_manufacturer_data(device->ad, NULL);
 }
 
+static gboolean
+dev_property_key_code_exist(const GDBusPropertyTable *property,
+								void *data)
+{
+	struct btd_device *device = data;
+
+	if (device->passththough_key.key == NULL)
+		return false;
+	else 
+		return true;
+}
+
 static void append_service_data(void *data, void *user_data)
 {
 	struct bt_ad_service_data *sd = data;
@@ -1400,13 +1419,13 @@ dev_property_get_service_data(const GDBusPropertyTable *property,
 	struct btd_device *device = data;
 	DBusMessageIter dict;
 
+
 	dbus_message_iter_open_container(iter, DBUS_TYPE_ARRAY,
 					DBUS_DICT_ENTRY_BEGIN_CHAR_AS_STRING
 					DBUS_TYPE_STRING_AS_STRING
 					DBUS_TYPE_VARIANT_AS_STRING
 					DBUS_DICT_ENTRY_END_CHAR_AS_STRING,
 					&dict);
-
 	bt_ad_foreach_service_data(device->ad, append_service_data, &dict);
 
 	dbus_message_iter_close_container(iter, &dict);
@@ -1414,6 +1433,28 @@ dev_property_get_service_data(const GDBusPropertyTable *property,
 	return TRUE;
 }
 
+static gboolean dev_property_get_key_code(const GDBusPropertyTable *property,
+					DBusMessageIter *iter, void *data)
+{
+	struct btd_device *dev = data;
+	const char* key_code = dev->passththough_key.key;
+	const char *state = dev->passththough_key.state;
+
+	DBusMessageIter dict;
+	dbus_message_iter_open_container(iter, DBUS_TYPE_ARRAY,
+					DBUS_DICT_ENTRY_BEGIN_CHAR_AS_STRING
+					DBUS_TYPE_UINT16_AS_STRING
+					DBUS_TYPE_VARIANT_AS_STRING
+					DBUS_DICT_ENTRY_END_CHAR_AS_STRING,
+					&dict);
+
+	dict_append_array(&dict, key_code, DBUS_TYPE_BYTE, &state, strlen(state) + 1);
+
+	dbus_message_iter_close_container(iter, &dict);
+
+	return TRUE;
+}
+
 static gboolean
 dev_property_service_data_exist(const GDBusPropertyTable *property,
 								void *data)
@@ -2005,6 +2046,15 @@ void device_set_manufacturer_data(struct btd_device *dev, GSList *list,
 	g_slist_foreach(list, add_manufacturer_data, dev);
 }
 
+void recieve_passThrough_commands(struct btd_device *dev, const char* code, const char* state)
+{
+		dev->passththough_key.state = state;
+		dev->passththough_key.key = code;
+
+		g_dbus_emit_property_changed(dbus_conn, dev->path,
+					DEVICE_INTERFACE, "KeyCode");
+}
+
 static void add_service_data(void *data, void *user_data)
 {
 	struct eir_sd *sd = data;
@@ -3214,6 +3264,8 @@ static const GDBusPropertyTable device_properties[] = {
 	{ "Adapter", "o", dev_property_get_adapter },
 	{ "ManufacturerData", "a{qv}", dev_property_get_manufacturer_data,
 				NULL, dev_property_manufacturer_data_exist },
+	{ "KeyCode", "a{sv}", dev_property_get_key_code,
+				NULL, dev_property_key_code_exist},
 	{ "ServiceData", "a{sv}", dev_property_get_service_data,
 				NULL, dev_property_service_data_exist },
 	{ "TxPower", "n", dev_property_get_tx_power, NULL,
@@ -4472,6 +4524,9 @@ static struct btd_device *device_new(struct btd_adapter *adapter,
 	device->adapter = adapter;
 	device->temporary = true;
 
+	device->passththough_key.state = NULL;
+	device->passththough_key.key = NULL;
+
 	device->db_id = gatt_db_register(device->db, gatt_service_added,
 					gatt_service_removed, device, NULL);
 
diff --git a/src/device.h b/src/device.h
index 071576d6b..28597c674 100644
--- a/src/device.h
+++ b/src/device.h
@@ -180,3 +180,5 @@ bool btd_device_all_services_allowed(struct btd_device *dev);
 void btd_device_update_allowed_services(struct btd_device *dev);
 void btd_device_init(void);
 void btd_device_cleanup(void);
+
+void recieve_passThrough_commands(struct btd_device *dev, const char* code, const char* state);
