From 1229b7c218debbd4dde9c5e0247fff9b961a108d Mon Sep 17 00:00:00 2001
From: "ramya.hegde" <ramya.hegde@lge.com>
Date: Mon, 25 Jan 2021 16:27:58 +0530
Subject: [PATCH] Add support for meshd to use RAW channel

:Release Notes:
Add support for meshd to use RAW channel

:Detailed Notes:
Add support for meshd to use RAW channel so that
bluetooth-meshd and bluetoothd can run in parallel

index is no longer private after 5.66 with:
  commit 9966cb8b6999a5f54fc13acbd7e1526512a84342
  Author: Brian Gix <brian.gix@intel.com>
  Date:   Thu Sep 22 15:31:02 2022 -0700
  Subject: mesh: Add new kernel MGMT based IO transport

:Testing Performed:
Built and tested

:QA Notes:
NA

:Issues Addressed:
[PLAT-123995] Analyze bluetooth-meshd and bluetoothd
              working together
---
Upstream-Status: Inappropriate [webos specific]

 mesh/bluetooth-mesh.service.in |  3 ++-
 mesh/main.c                    | 14 ++++++++----
 mesh/mesh-io-generic.c         | 32 ++++++++++++++++++++++++----
 mesh/mesh-io.h                 |  4 ++++
 mesh/mesh-mgmt.c               | 39 ++++++++++++++++++++++++++++++++++
 mesh/mesh-mgmt.h               |  1 +
 6 files changed, 84 insertions(+), 9 deletions(-)

diff --git a/mesh/bluetooth-mesh.service.in b/mesh/bluetooth-mesh.service.in
index c8afbf53e..ee65ce485 100644
--- a/mesh/bluetooth-mesh.service.in
+++ b/mesh/bluetooth-mesh.service.in
@@ -5,7 +5,8 @@ ConditionPathIsDirectory=/sys/class/bluetooth
 [Service]
 Type=dbus
 BusName=org.bluez.mesh
-ExecStart=@pkglibexecdir@/bluetooth-meshd
+ExecStart=@pkglibexecdir@/bluetooth-meshd --nodetach --use_raw
+Capabilities=cap_net_admin,cap_net_bind_service
 NotifyAccess=main
 LimitNPROC=1
 ProtectHome=true
diff --git a/mesh/main.c b/mesh/main.c
index 145bcfa98..489bbef64 100644
--- a/mesh/main.c
+++ b/mesh/main.c
@@ -36,6 +36,7 @@ static const char *storage_dir;
 static const char *mesh_conf_fname;
 static enum mesh_io_type io_type;
 static void *io_opts;
+bool use_raw = false;
 
 static const struct option main_options[] = {
 	{ "io",		required_argument,	NULL, 'i' },
@@ -44,6 +45,7 @@ static const struct option main_options[] = {
 	{ "nodetach",	no_argument,		NULL, 'n' },
 	{ "debug",	no_argument,		NULL, 'd' },
 	{ "dbus-debug",	no_argument,		NULL, 'b' },
+	{ "use_raw",	no_argument,		NULL, 'r' },
 	{ "help",	no_argument,		NULL, 'h' },
 	{ }
 };
@@ -164,10 +166,11 @@ static bool parse_io(const char *optarg, enum mesh_io_type *type, void **opts)
 
 		return false;
 	} else if (strstr(optarg, "generic") == optarg) {
-		int *index = l_new(int, 1);
-
+		struct mesh_io_opts *m_io_opts = l_new(struct mesh_io_opts, 1);
+		int *index = &(m_io_opts->index);
+		m_io_opts->use_raw = use_raw;
+		*opts = m_io_opts;
 		*type = MESH_IO_TYPE_GENERIC;
-		*opts = index;
 
 		optarg += strlen("generic");
 		if (!*optarg || *optarg != ':')
@@ -225,7 +228,7 @@ int main(int argc, char *argv[])
 	for (;;) {
 		int opt;
 
-		opt = getopt_long(argc, argv, "u:i:s:c:ndbh", main_options,
+		opt = getopt_long(argc, argv, "u:i:s:c:ndbhr", main_options,
 									NULL);
 		if (opt < 0)
 			break;
@@ -260,6 +263,9 @@ int main(int argc, char *argv[])
 		case 'b':
 			dbus_debug = true;
 			break;
+		case 'r':
+			use_raw = true;
+			break;
 		case 'h':
 			usage();
 			status = EXIT_SUCCESS;
diff --git a/mesh/mesh-io-generic.c b/mesh/mesh-io-generic.c
index 13a863b48..ccb396a7d 100644
--- a/mesh/mesh-io-generic.c
+++ b/mesh/mesh-io-generic.c
@@ -38,6 +38,7 @@ struct mesh_io_private {
 	uint16_t interval;
 	bool sending;
 	bool active;
+	bool use_raw;
 };
 
 struct process_data {
@@ -250,8 +251,11 @@ static void configure_hci(struct mesh_io_private *io)
 
 	/* TODO: Move to suitable place. Set suitable masks */
 	/* Reset Command */
-	bt_hci_send(io->hci, BT_HCI_CMD_RESET, NULL, 0, hci_generic_callback,
-								NULL, NULL);
+	if (!(io->use_raw)) {
+		/* Reset Command in case of user channel */
+		bt_hci_send(io->hci, BT_HCI_CMD_RESET, NULL, 0, hci_generic_callback,
+									NULL, NULL);
+	}
 
 	/* Read local supported commands */
 	bt_hci_send(io->hci, BT_HCI_CMD_READ_LOCAL_COMMANDS, NULL, 0,
@@ -383,7 +387,22 @@ static void hci_init(void *user_data)
 	/* Clear controller HCI list to suppress mgmt interface warnings */
 	mesh_mgmt_clear();
 
-	io->pvt->hci = bt_hci_new_user_channel(io->index);
+	if (io->pvt->use_raw)
+	{
+		l_debug("Use HCI RAW channel");
+
+		/* Power up HCI device */
+		uint16_t mode = 0x01;
+		if (!set_powered(mode, io->index))
+			return;
+
+		io->pvt->hci = bt_hci_new_raw_device(io->index);
+	}
+	else
+	{
+		l_debug("Use HCI USER channel");
+		io->pvt->hci = bt_hci_new_user_channel(io->index);
+	}
 	if (!io->pvt->hci) {
 		l_error("Failed to start mesh io (hci %u): %s", io->index,
 							strerror(errno));
@@ -411,6 +430,10 @@ static bool dev_init(struct mesh_io *io, void *opts, void *user_data)
 		return false;
 
 	io->pvt = l_new(struct mesh_io_private, 1);
+	struct mesh_io_opts *io_opts;
+	io_opts = (struct mesh_io_opts *)opts;
+	io->index = io_opts->index;
+	io->pvt->use_raw = io_opts->use_raw;
 
 	io->pvt->tx_pkts = l_queue_new();
 
@@ -787,7 +810,8 @@ static bool recv_register(struct mesh_io *io, const uint8_t *filter,
 	if (l_queue_find(io->rx_regs, find_active, NULL))
 		active = true;
 
-	if (!already_scanning || pvt->active != active) {
+	//if (!already_scanning || pvt->active != active)
+	{
 		pvt->active = active;
 		cmd.enable = 0x00;	/* Disable scanning */
 		cmd.filter_dup = 0x00;	/* Report duplicates */
diff --git a/mesh/mesh-io.h b/mesh/mesh-io.h
index f7711e786..17195e4ad 100644
--- a/mesh/mesh-io.h
+++ b/mesh/mesh-io.h
@@ -30,6 +30,10 @@ struct mesh_io_recv_info {
 	uint8_t chan;
 	int8_t rssi;
 };
+struct mesh_io_opts {
+	int index;
+	bool use_raw;
+};
 
 struct mesh_io_send_info {
 	enum mesh_io_timing_type type;
diff --git a/mesh/mesh-mgmt.c b/mesh/mesh-mgmt.c
index fd21a168a..8c599a01c 100644
--- a/mesh/mesh-mgmt.c
+++ b/mesh/mesh-mgmt.c
@@ -86,6 +86,45 @@ static void set_exp_mesh_cb(uint8_t status, uint16_t length,
 				features_cb, L_UINT_TO_PTR(index), NULL);
 }
 
+static void set_powered_complete(uint8_t status, uint16_t length,
+                                        const void *param, void *user_data)
+{
+	int index = L_PTR_TO_UINT(user_data);
+	uint32_t settings;
+
+	if (status != MGMT_STATUS_SUCCESS) {
+		l_error("Failed to set powered: %s (0x%02x)",
+						mgmt_errstr(status), status);
+		return;
+	}
+
+	settings = l_get_le32(param);
+
+	if (!(settings & MGMT_SETTING_POWERED)) {
+		l_error("Controller is not powered");
+                return;
+        }
+
+	l_debug("set powered success on index %d", index);
+	/** <TO-DO> update current settings of adapter */
+}
+
+bool set_powered(uint16_t mode, int index)
+{
+	struct mgmt_mode cp;
+
+	memset(&cp, 0, sizeof(cp));
+	cp.val = mode;
+
+	/** <TO-DO> check current settings of adapter */
+	if (mgmt_send(mgmt_mesh, MGMT_OP_SET_POWERED, index, sizeof(cp), &cp,
+				set_powered_complete, L_UINT_TO_PTR(index), NULL) > 0)
+
+		return true;
+
+	return false;
+}
+
 static void read_info_cb(uint8_t status, uint16_t length,
 					const void *param, void *user_data)
 {
diff --git a/mesh/mesh-mgmt.h b/mesh/mesh-mgmt.h
index 570282297..d72d82ae3 100644
--- a/mesh/mesh-mgmt.h
+++ b/mesh/mesh-mgmt.h
@@ -23,3 +23,4 @@ unsigned int mesh_mgmt_register(uint16_t event, uint16_t index,
 bool mesh_mgmt_unregister(unsigned int id);
 void mesh_mgmt_destroy(void);
 void mesh_mgmt_clear(void);
+bool set_powered(uint16_t mode, int index);
