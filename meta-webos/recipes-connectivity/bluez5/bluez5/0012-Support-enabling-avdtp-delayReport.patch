From f3dc7b286655dfd80ce8f76d0c591e620ce2c7a1 Mon Sep 17 00:00:00 2001
From: "sameer.mulla" <sameer.mulla@lge.com>
Date: Thu, 4 Jun 2020 04:49:48 +0000
Subject: [PATCH] Support enabling avdtp delayReport

:Release Notes:
Support enabling avdtp delayReport

:Detailed Notes:
Support enabling avdtp delayReport

:Testing Performed:
Builded and Tested

:QA Notes:
NA

:Issues Addressed:
[PLAT-98273] Implement AVDTP delay report interface
---
Upstream-Status: Pending

 profiles/audio/a2dp.c  |  8 +++++++
 profiles/audio/a2dp.h  |  1 +
 profiles/audio/avdtp.c |  5 ++++
 profiles/audio/avdtp.h |  1 +
 profiles/audio/media.c | 17 ++++++++++++++
 profiles/audio/media.h |  3 +++
 src/adapter.c          | 52 ++++++++++++++++++++++++++++++++++++++++++
 src/adapter.h          |  3 +++
 src/btd.h              |  1 +
 src/main.c             |  4 ++++
 src/main.conf          |  3 +++
 11 files changed, 98 insertions(+)

diff --git a/profiles/audio/a2dp.c b/profiles/audio/a2dp.c
index a6489a763..fdee0465f 100644
--- a/profiles/audio/a2dp.c
+++ b/profiles/audio/a2dp.c
@@ -2405,6 +2405,14 @@ found:
 	return avdtp_ref(chan->session);
 }
 
+void a2dp_sep_set_delay_reporting(struct a2dp_sep *sep, bool delay_reporting)
+{
+       DBG("");
+       DBG("delay_reporting %d",delay_reporting);
+       sep->delay_reporting = delay_reporting;
+       avdtp_local_sep_set_delay_report(sep->lsep, delay_reporting);
+}
+
 static void connect_cb(GIOChannel *io, GError *err, gpointer user_data)
 {
 	struct a2dp_channel *chan = user_data;
diff --git a/profiles/audio/a2dp.h b/profiles/audio/a2dp.h
index 615b641c9..af67ee6ee 100644
--- a/profiles/audio/a2dp.h
+++ b/profiles/audio/a2dp.h
@@ -77,6 +77,7 @@ gboolean a2dp_cancel(unsigned int id);
 gboolean a2dp_sep_lock(struct a2dp_sep *sep, struct avdtp *session);
 gboolean a2dp_sep_unlock(struct a2dp_sep *sep, struct avdtp *session);
 struct avdtp_stream *a2dp_sep_get_stream(struct a2dp_sep *sep);
+void a2dp_sep_set_delay_reporting(struct a2dp_sep *sep, bool delay_reporting);
 struct btd_device *a2dp_setup_get_device(struct a2dp_setup *setup);
 const char *a2dp_setup_remote_path(struct a2dp_setup *setup);
 struct avdtp *a2dp_avdtp_get(struct btd_device *device);
diff --git a/profiles/audio/avdtp.c b/profiles/audio/avdtp.c
index 0a923ac6c..a03d40c82 100644
--- a/profiles/audio/avdtp.c
+++ b/profiles/audio/avdtp.c
@@ -473,6 +473,11 @@ static gboolean try_send(int sk, void *data, size_t len)
 	return TRUE;
 }
 
+void avdtp_local_sep_set_delay_report(struct avdtp_local_sep *lsep, bool delay_reporting)
+{
+       lsep->delay_reporting = delay_reporting;
+}
+
 static gboolean avdtp_send(struct avdtp *session, uint8_t transaction,
 				uint8_t message_type, uint8_t signal_id,
 				void *data, size_t len)
diff --git a/profiles/audio/avdtp.h b/profiles/audio/avdtp.h
index 102a2603e..b167f2dab 100644
--- a/profiles/audio/avdtp.h
+++ b/profiles/audio/avdtp.h
@@ -311,3 +311,4 @@ struct avdtp_server *avdtp_get_server(struct avdtp_local_sep *lsep);
 struct avdtp *avdtp_new(GIOChannel *chan, struct btd_device *device,
 							struct queue *lseps);
 uint16_t avdtp_get_version(struct avdtp *session);
+void avdtp_local_sep_set_delay_report(struct avdtp_local_sep *lsep, bool delay_reporting);
diff --git a/profiles/audio/media.c b/profiles/audio/media.c
index c39b1846a..02dfc67e6 100644
--- a/profiles/audio/media.c
+++ b/profiles/audio/media.c
@@ -135,6 +135,19 @@ struct media_player {
 
 static GSList *adapters = NULL;
 
+void media_set_delay_reporting(struct media_adapter *media_adapter, bool delay_reporting)
+{
+       GSList *l;
+       for (l = media_adapter->endpoints; l; l = l->next) {
+               struct media_endpoint *endpoint = l->data;
+
+               if ((strcasecmp(endpoint->uuid, "0000110a-0000-1000-8000-00805f9b34fb") == 0) || (strcasecmp(endpoint->uuid, "0000110b-0000-1000-8000-00805f9b34fb") == 0))
+               {
+                       a2dp_sep_set_delay_reporting(endpoint->sep, delay_reporting);
+               }
+       }
+}
+
 static void endpoint_request_free(struct endpoint_request *request)
 {
 	if (request->call)
@@ -1535,6 +1548,9 @@ media_endpoint_create(struct media_adapter *adapter,
 	}
 
 	endpoint->adapter = adapter;
+       delay_reporting = btd_adapter_get_delay_reporting(adapter->btd_adapter);
+
+       DBG("delay_reporting %d", delay_reporting);
 
 	for (i = 0; i < ARRAY_SIZE(init_table); i++) {
 		init = &init_table[i];
@@ -3359,6 +3375,7 @@ int media_register(struct btd_adapter *btd_adapter)
 		return -1;
 	}
 
+	set_media_adapter(btd_adapter, adapter);
 	adapters = g_slist_append(adapters, adapter);
 
 	return 0;
diff --git a/profiles/audio/media.h b/profiles/audio/media.h
index 2b2e8e157..7cdd9a097 100644
--- a/profiles/audio/media.h
+++ b/profiles/audio/media.h
@@ -10,6 +10,7 @@
  */
 
 struct media_endpoint;
+struct media_adapter;
 
 typedef void (*media_endpoint_cb_t) (struct media_endpoint *endpoint,
 					void *ret, int size, void *user_data);
@@ -26,3 +27,5 @@ bool media_endpoint_is_broadcast(struct media_endpoint *endpoint);
 int8_t media_player_get_device_volume(struct btd_device *device);
 
 const struct media_endpoint *media_endpoint_get_asha(void);
+
+void media_set_delay_reporting(struct media_adapter* adapter, bool delay_reporting);
diff --git a/src/adapter.c b/src/adapter.c
index d6c058196..374c4653b 100644
--- a/src/adapter.c
+++ b/src/adapter.c
@@ -67,6 +67,7 @@
 #include "adv_monitor.h"
 #include "eir.h"
 #include "battery.h"
+#include "profiles/audio/media.h"
 
 #define MODE_OFF		0x00
 #define MODE_CONNECTABLE	0x01
@@ -287,6 +288,9 @@ struct btd_adapter {
 	bool filtered_discovery;	/* we are doing filtered discovery */
 	bool no_scan_restart_delay;	/* when this flag is set, restart scan
 					 * without delay */
+        bool delay_report;
+
+        struct media_adapter *media_adapter;
 	uint8_t discovery_type;		/* current active discovery type */
 	uint8_t discovery_enable;	/* discovery enabled/disabled */
 	bool discovery_suspended;	/* discovery has been suspended */
@@ -365,6 +369,11 @@ typedef enum {
 	ADAPTER_AUTHORIZE_CHECK_CONNECTED
 } adapter_authorize_type;
 
+void set_media_adapter(struct btd_adapter *adapter, struct media_adapter *media_adapter)
+{
+       adapter->media_adapter = media_adapter;
+}
+
 static struct btd_adapter *btd_adapter_lookup(uint16_t index)
 {
 	GList *list;
@@ -567,6 +576,8 @@ static void store_adapter_info(struct btd_adapter *adapter)
 
 	g_key_file_set_boolean(key_file, "General", "Discoverable",
 							discoverable);
+        g_key_file_set_boolean(key_file, "General", "DelayReport",
+                                                       adapter->delay_report);
 
 	if (adapter->discoverable_timeout != btd_opts.discovto)
 		g_key_file_set_integer(key_file, "General",
@@ -3510,6 +3521,30 @@ static gboolean property_get_roles(const GDBusPropertyTable *property,
 
 	return TRUE;
 }
+static gboolean property_get_delay_report_feature(const GDBusPropertyTable *property, DBusMessageIter *iter, void *user_data)
+{
+       struct btd_adapter *adapter = user_data;
+       dbus_bool_t delayReportingFeature = adapter->delay_report;
+
+       dbus_message_iter_append_basic(iter, DBUS_TYPE_BOOLEAN, &delayReportingFeature);
+
+       return TRUE;
+}
+
+static void property_set_delay_report_feature(const GDBusPropertyTable *property, DBusMessageIter *iter, GDBusPendingPropertySet id, void *user_data)
+{
+       struct btd_adapter *adapter = user_data;
+       dbus_bool_t enable;
+       dbus_message_iter_get_basic(iter, &enable);
+
+       DBG("DelayReport %d", enable);
+       g_dbus_pending_property_success(id);
+       adapter->delay_report = enable;
+       store_adapter_info(adapter);
+       media_set_delay_reporting(adapter->media_adapter, adapter->delay_report);
+       g_dbus_emit_property_changed(dbus_conn, adapter->path, ADAPTER_INTERFACE, "DelayReport");
+       return;
+}
 
 static void property_append_experimental(void *data, void *user_data)
 {
@@ -3935,6 +3970,7 @@ static const GDBusPropertyTable adapter_properties[] = {
 					property_experimental_exists },
 	{ "Manufacturer", "q", property_get_manufacturer },
 	{ "Version", "y", property_get_version },
+        { "DelayReport", "b", property_get_delay_report_feature, property_set_delay_report_feature },
 	{ }
 };
 
@@ -5361,6 +5397,11 @@ bool btd_adapter_get_bredr(struct btd_adapter *adapter)
 	return false;
 }
 
+bool btd_adapter_get_delay_reporting(struct btd_adapter *adapter)
+{
+       return adapter->delay_report;
+}
+
 struct btd_gatt_database *btd_adapter_get_database(struct btd_adapter *adapter)
 {
 	if (!adapter)
@@ -6916,6 +6957,15 @@ static void load_config(struct btd_adapter *adapter)
 		gerr = NULL;
 	}
 
+       /* Get delay report */
+       adapter->delay_report = g_key_file_get_boolean(key_file,
+                                       "General", "DelayReport", &gerr);
+       if (gerr) {
+               adapter->delay_report = btd_opts.delay_report;
+               g_error_free(gerr);
+               gerr = NULL;
+       }
+
 	g_key_file_free(key_file);
 }
 
@@ -6952,6 +7002,7 @@ static struct btd_adapter *btd_adapter_new(uint16_t index)
 						btd_opts.did_version);
 	adapter->discoverable_timeout = btd_opts.discovto;
 	adapter->pairable_timeout = btd_opts.pairto;
+        adapter->delay_report = btd_opts.delay_report;
 
 	DBG("System name: %s", adapter->system_name);
 	DBG("Major class: %u", adapter->major_class);
@@ -6962,6 +7013,7 @@ static struct btd_adapter *btd_adapter_new(uint16_t index)
 	if (blocked > 0)
 		DBG("Power state: %s",
 			adapter_power_state_str(adapter->power_state));
+	DBG("DelayReport %d", adapter->delay_report);
 
 	adapter->auths = g_queue_new();
 	adapter->exps = queue_new();
diff --git a/src/adapter.h b/src/adapter.h
index e3695b21b..d0cbd7238 100644
--- a/src/adapter.h
+++ b/src/adapter.h
@@ -26,6 +26,7 @@
 struct btd_adapter;
 struct btd_device;
 struct queue;
+struct media_adapter;
 
 struct btd_adapter *btd_adapter_get_default(void);
 bool btd_adapter_is_default(struct btd_adapter *adapter);
@@ -69,6 +70,8 @@ bool btd_adapter_get_powered(struct btd_adapter *adapter);
 bool btd_adapter_get_connectable(struct btd_adapter *adapter);
 bool btd_adapter_get_discoverable(struct btd_adapter *adapter);
 bool btd_adapter_get_bredr(struct btd_adapter *adapter);
+bool btd_adapter_get_delay_reporting(struct btd_adapter *adapter);
+void set_media_adapter(struct btd_adapter *adapter, struct media_adapter *media_adapter);
 
 struct btd_gatt_database *btd_adapter_get_database(struct btd_adapter *adapter);
 
diff --git a/src/btd.h b/src/btd.h
index 383bd7c19..24cf15363 100644
--- a/src/btd.h
+++ b/src/btd.h
@@ -130,6 +130,7 @@ struct btd_opts {
 	bool		experimental;
 	bool		testing;
 	struct queue	*kernel;
+	gboolean	delay_report;
 
 	uint16_t	did_source;
 	uint16_t	did_vendor;
diff --git a/src/main.c b/src/main.c
index 62453bffa..56ad5c835 100644
--- a/src/main.c
+++ b/src/main.c
@@ -82,6 +82,7 @@ static const char *supported_options[] = {
 	"MultiProfile",
 	"FastConnectable",
 	"SecureConnections",
+        "DelayReport",
 	"Privacy",
 	"JustWorksRepairing",
 	"TemporaryTimeout",
@@ -1044,6 +1045,9 @@ static void parse_general(GKeyFile *config)
 	parse_config_u32(config, "General", "RemoteNameRequestRetryDelay",
 					&btd_opts.name_request_retry_delay,
 					0, UINT32_MAX);
+
+	parse_config_bool(config, "General", "DelayReport",
+					&btd_opts.delay_report);
 }
 
 static void parse_gatt_cache(GKeyFile *config)
diff --git a/src/main.conf b/src/main.conf
index 82040b3fa..d0a29911f 100644
--- a/src/main.conf
+++ b/src/main.conf
@@ -69,6 +69,9 @@
 # 'false'.
 #FastConnectable = false
 
+# DelayReport will enable delay reporting
+DelayReport = true
+
 # Default privacy setting.
 # Enables use of private address.
 # Possible values for LE mode: "off", "network/on", "device"
