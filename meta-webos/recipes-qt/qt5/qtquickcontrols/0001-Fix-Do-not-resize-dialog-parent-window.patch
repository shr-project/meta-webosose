From 88f863d56c357202f4652fe9b1a40bd34fc0d327 Mon Sep 17 00:00:00 2001
From: Alexey Turitsyn <alexey.turitsyn@lge.com>
Date: Thu, 4 Aug 2016 14:55:38 +0300
Subject: [PATCH] Fix Do not resize dialog parent window

:Release Notes:
webOS does not support multiple windows and dialog
is treated as contentItem on top of parent window.
In this case, do not resize parent window with dialog size.

:Detailed Notes:
To create dialog, we need to create only decoration
for provided content on top of parent window.
Current implementation besides decoration,
resizes parent window, which is incorrect behaviour.

Upstream-Status: pending

:Issues Addressed:
[DRD-11631] Black overlay after QML MessageDialog close
[DRD-10448] QML MessageDialog is scaled to full screen
---
 src/dialogs/qquickabstractdialog.cpp | 97 ++++++++++++++--------------
 1 file changed, 50 insertions(+), 47 deletions(-)

diff --git a/src/dialogs/qquickabstractdialog.cpp b/src/dialogs/qquickabstractdialog.cpp
index e71948d1..e459ef43 100644
--- a/src/dialogs/qquickabstractdialog.cpp
+++ b/src/dialogs/qquickabstractdialog.cpp
@@ -112,33 +112,53 @@ void QQuickAbstractDialog::setVisible(bool v)
     if (!m_dialogWindow && m_contentItem) {
         if (v)
             emit __maximumDimensionChanged();
-        if (m_hasNativeWindows)
+        if (m_hasNativeWindows) {
             m_dialogWindow = m_contentItem->window();
-        // An Item-based dialog implementation doesn't come with a window, so
-        // we have to instantiate one iff the platform allows it.
-        if (!m_dialogWindow && m_hasNativeWindows) {
-            QQuickWindow *win = new QQuickWindow;
-            ((QObject *)win)->setParent(this); // memory management only
-            win->setFlags(Qt::Dialog);
-            m_dialogWindow = win;
-            m_contentItem->setParentItem(win->contentItem());
-            QSize minSize = QSize(m_contentItem->implicitWidth(), m_contentItem->implicitHeight());
-            QVariant minHeight = m_contentItem->property("minimumHeight");
-            if (minHeight.isValid()) {
-                if (minHeight.toInt() > minSize.height())
-                    minSize.setHeight(minHeight.toDouble());
-                connect(m_contentItem, SIGNAL(minimumHeightChanged()), this, SLOT(minimumHeightChanged()));
+            // An Item-based dialog implementation doesn't come with a window, so
+            // we have to instantiate one iff the platform allows it.
+            if (!m_dialogWindow) {
+                QQuickWindow *win = new QQuickWindow;
+                ((QObject *)win)->setParent(this); // memory management only
+                win->setFlags(Qt::Dialog);
+                m_dialogWindow = win;
+                m_contentItem->setParentItem(win->contentItem());
+                QSize minSize = QSize(m_contentItem->implicitWidth(), m_contentItem->implicitHeight());
+                QVariant minHeight = m_contentItem->property("minimumHeight");
+                if (minHeight.isValid()) {
+                    if (minHeight.toInt() > minSize.height())
+                        minSize.setHeight(minHeight.toDouble());
+                    connect(m_contentItem, SIGNAL(minimumHeightChanged()), this, SLOT(minimumHeightChanged()));
+                }
+                QVariant minWidth = m_contentItem->property("minimumWidth");
+                if (minWidth.isValid()) {
+                    if (minWidth.toInt() > minSize.width())
+                        minSize.setWidth(minWidth.toInt());
+                    connect(m_contentItem, SIGNAL(minimumWidthChanged()), this, SLOT(minimumWidthChanged()));
+                }
+                m_dialogWindow->setMinimumSize(minSize);
+                connect(win, SIGNAL(widthChanged(int)), this, SLOT(windowGeometryChanged()));
+                connect(win, SIGNAL(heightChanged(int)), this, SLOT(windowGeometryChanged()));
+                qCDebug(lcWindow) << "created window" << win << "with min size" << win->minimumSize() << "geometry" << win->geometry();
             }
-            QVariant minWidth = m_contentItem->property("minimumWidth");
-            if (minWidth.isValid()) {
-                if (minWidth.toInt() > minSize.width())
-                    minSize.setWidth(minWidth.toInt());
-                connect(m_contentItem, SIGNAL(minimumWidthChanged()), this, SLOT(minimumWidthChanged()));
+            // Resize only if dialog has its own window
+            // "grow up" to the size and position expected to achieve
+            if (!m_sizeAspiration.isNull()) {
+                if (m_hasAspiredPosition) {
+                    qCDebug(lcWindow) << "geometry aspiration" << m_sizeAspiration;
+                    m_dialogWindow->setGeometry(m_sizeAspiration);
+                } else {
+                    qCDebug(lcWindow) << "size aspiration" << m_sizeAspiration.size();
+                    if (m_sizeAspiration.width() > 0)
+                        m_dialogWindow->setWidth(m_sizeAspiration.width());
+                    if (m_sizeAspiration.height() > 0)
+                        m_dialogWindow->setHeight(m_sizeAspiration.height());
+                }
+                connect(m_dialogWindow, SIGNAL(xChanged(int)), this, SLOT(setX(int)));
+                connect(m_dialogWindow, SIGNAL(yChanged(int)), this, SLOT(setY(int)));
+                connect(m_dialogWindow, SIGNAL(widthChanged(int)), this, SLOT(setWidth(int)));
+                connect(m_dialogWindow, SIGNAL(heightChanged(int)), this, SLOT(setHeight(int)));
+                connect(m_contentItem, SIGNAL(implicitHeightChanged()), this, SLOT(implicitHeightChanged()));
             }
-            m_dialogWindow->setMinimumSize(minSize);
-            connect(win, SIGNAL(widthChanged(int)), this, SLOT(windowGeometryChanged()));
-            connect(win, SIGNAL(heightChanged(int)), this, SLOT(windowGeometryChanged()));
-            qCDebug(lcWindow) << "created window" << win << "with min size" << win->minimumSize() << "geometry" << win->geometry();
         }
 
         if (!m_dialogWindow) {
@@ -146,6 +166,7 @@ void QQuickAbstractDialog::setVisible(bool v)
                 qWarning("cannot set dialog visible: no window");
                 return;
             }
+
             m_dialogWindow = parentWindow();
 
             // If the platform does not support multiple windows, but the dialog is
@@ -169,30 +190,12 @@ void QQuickAbstractDialog::setVisible(bool v)
             }
         }
     }
-    if (m_dialogWindow) {
-        // "grow up" to the size and position expected to achieve
-        if (!m_sizeAspiration.isNull()) {
-            if (m_hasAspiredPosition) {
-                qCDebug(lcWindow) << "geometry aspiration" << m_sizeAspiration;
-                m_dialogWindow->setGeometry(m_sizeAspiration);
-            } else {
-                qCDebug(lcWindow) << "size aspiration" << m_sizeAspiration.size();
-                if (m_sizeAspiration.width() > 0)
-                    m_dialogWindow->setWidth(m_sizeAspiration.width());
-                if (m_sizeAspiration.height() > 0)
-                    m_dialogWindow->setHeight(m_sizeAspiration.height());
-            }
-            connect(m_dialogWindow, SIGNAL(xChanged(int)), this, SLOT(setX(int)));
-            connect(m_dialogWindow, SIGNAL(yChanged(int)), this, SLOT(setY(int)));
-            connect(m_dialogWindow, SIGNAL(widthChanged(int)), this, SLOT(setWidth(int)));
-            connect(m_dialogWindow, SIGNAL(heightChanged(int)), this, SLOT(setHeight(int)));
-            connect(m_contentItem, SIGNAL(implicitHeightChanged()), this, SLOT(implicitHeightChanged()));
-        }
-        if (!m_visibleChangedConnected) {
-            connect(m_dialogWindow, &QQuickWindow::visibleChanged, this, &QQuickAbstractDialog::visibleChanged);
-            m_visibleChangedConnected = true;
-        }
+
+    if (m_dialogWindow && !m_visibleChangedConnected) {
+        connect(m_dialogWindow, SIGNAL(visibleChanged(bool)), this, SLOT(visibleChanged(bool)));
+        m_visibleChangedConnected = true;
     }
+
     if (m_windowDecoration) {
         setDecorationDismissBehavior();
         m_windowDecoration->setVisible(v);
