From 7564d2b26985e83342becbc9ab89cccc24d2ae1b Mon Sep 17 00:00:00 2001
From: "wonsang.ryu" <wonsang.ryu@lge.com>
Date: Fri, 20 Mar 2020 18:26:47 +0900
Subject: [PATCH] Modify the touch event for emulator

:Release Notes:
Modify the touch event for emulator

:Detailed Notes:
Translate from the evdev Mouse event to the Touch event
[CHNSDK-11692]
[PLAT-101316]
default : mouse
touch <-> mouse change : Press the "left alt" keyboard
Support the multi touch for pinch zoom
Press the "Left ctrl" before mouse press in touch state

:Testing Performed:
boot emulator with virtualbox
perform [QWA-1412] with emulator ipk in build

:QA Notes:
No change to the device images
This is only for emulator

:Issues Addressed:
[PLAT-103216] CCC: qtbase=webos71

Change-Id: Iba52da6cffe83e90b7589503bc3e9f51694ee1aa
Upstream-Status : Inappropriate [webOS specific]
---
 src/plugins/platforms/eglfs/api/api.pri       |    4 +
 .../platforms/eglfs/api/qeglfsintegration.cpp |    7 +-
 .../platforms/eglfs/api/qeglfsintegration_p.h |    5 +-
 .../api/qemulatorkeyboard_defaultmap_p.h      | 1431 ++++++++++-------
 .../eglfs/api/qemulatorkeyboardhandler.cpp    |  568 ++++++-
 .../eglfs/api/qemulatorkeyboardhandler.h      |  190 ++-
 .../eglfs/api/qemulatorkeyboardmanager.cpp    |  215 +--
 .../eglfs/api/qemulatorkeyboardmanager.h      |   86 +-
 .../eglfs/api/qemulatormousehandler.cpp       |  311 ++++
 .../eglfs/api/qemulatormousehandler.h         |  103 ++
 .../eglfs/api/qemulatormousemanager.cpp       |  456 ++++++
 .../eglfs/api/qemulatormousemanager.h         |  114 ++
 12 files changed, 2630 insertions(+), 860 deletions(-)
 create mode 100644 src/plugins/platforms/eglfs/api/qemulatormousehandler.cpp
 create mode 100644 src/plugins/platforms/eglfs/api/qemulatormousehandler.h
 create mode 100644 src/plugins/platforms/eglfs/api/qemulatormousemanager.cpp
 create mode 100644 src/plugins/platforms/eglfs/api/qemulatormousemanager.h

diff --git a/src/plugins/platforms/eglfs/api/api.pri b/src/plugins/platforms/eglfs/api/api.pri
index 28814b9f82..10a985466a 100644
--- a/src/plugins/platforms/eglfs/api/api.pri
+++ b/src/plugins/platforms/eglfs/api/api.pri
@@ -31,12 +31,16 @@ qtConfig(webos-emulator) {
         $$PWD/NyxInputControl.cpp \
         $$PWD/qinputdevicescanner.cpp \
         $$PWD/qlinuxmouse.cpp \
+        $$PWD/qemulatormousemanager.cpp \
+        $$PWD/qemulatormousehandler.cpp \
         $$PWD/qemulatorkeyboardmanager.cpp \
         $$PWD/qemulatorkeyboardhandler.cpp
 
     HEADERS += \
         $$PWD/qinputdevicescanner.h \
         $$PWD/qlinuxmouse.h \
+        $$PWD/qemulatormousemanager.h \
+        $$PWD/qemulatormousehandler.h \
         $$PWD/qemulatorkeyboardmanager.h \
         $$PWD/qemulatorkeyboardhandler.h \
         $$PWD/qemulatorkeyboard_defaultmap_p.h \
diff --git a/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp b/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp
index 791f44bb88..b141f93926 100644
--- a/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp
+++ b/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp
@@ -478,8 +478,11 @@ void QEglFSIntegration::createInputHandlers()
     for (int k = 0; k < scanner->getNumOfKeyboards(); k++) {
         keyboardDevices.append(":" + scanner->getKeyboardName(k));
     }
-    new QEmulatorKeyboardManager(QLatin1String("EvdevKeyboard"), keyboardDevices, this);
-    new QEvdevMouseManager(QLatin1String("EvdevMouse"), QString("abs") /* spec */, this);
+    m_emulatorKeyboardManager = new QEmulatorKeyboardManager(QLatin1String("EvdevKeyboard"), QString() /* spec */, this);
+    m_emulatorMouseManager = new QEmulatorMouseManager(QLatin1String("EvdevMouse"), QString("abs") /* spec */, this);
+	if ((m_emulatorKeyboardManager) && (m_emulatorMouseManager)) {
+        connect(m_emulatorKeyboardManager, &QEmulatorKeyboardManager::handleKeycodeSignal, m_emulatorMouseManager, &QEmulatorMouseManager::handleKeycodeSlot);
+    }
 }
 #else
 
diff --git a/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h b/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h
index 69ddfbd70c..2a9cc3edd0 100644
--- a/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h
+++ b/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h
@@ -59,6 +59,8 @@
 
 #if defined(WEBOS_EMULATOR)
 #include "qlinuxmouse.h"
+#include "qemulatorkeyboardmanager.h"
+#include "qemulatormousemanager.h"
 #endif
 
 QT_BEGIN_NAMESPACE
@@ -121,7 +123,8 @@ private:
     QEvdevKeyboardManager *m_kbdMgr;
     bool m_disableInputHandlers;
 #if defined(WEBOS_EMULATOR)
-	QList<QLinuxMouseHandler *> m_mouses;
+    QEmulatorKeyboardManager* m_emulatorKeyboardManager;
+    QEmulatorMouseManager* m_emulatorMouseManager;
 #endif
 };
 
diff --git a/src/plugins/platforms/eglfs/api/qemulatorkeyboard_defaultmap_p.h b/src/plugins/platforms/eglfs/api/qemulatorkeyboard_defaultmap_p.h
index e3321b16d0..af1196b0ae 100644
--- a/src/plugins/platforms/eglfs/api/qemulatorkeyboard_defaultmap_p.h
+++ b/src/plugins/platforms/eglfs/api/qemulatorkeyboard_defaultmap_p.h
@@ -1,17 +1,38 @@
 /****************************************************************************
 **
-** Copyright (c) 2015-2018 LG Electronics, Inc.
-** All rights reserved.
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
 **
-** $QT_BEGIN_LICENSE:LGPL21$
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 or version 3 as published by the Free
-** Software Foundation and appearing in the file LICENSE.LGPLv21 and
-** LICENSE.LGPLv3 included in the packaging of this file. Please review the
-** following information to ensure the GNU Lesser General Public License
-** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -19,622 +40,792 @@
 #ifndef QEMULATORKEYBOARDHANDLER_DEFAULTMAP_P_H
 #define QEMULATORKEYBOARDHANDLER_DEFAULTMAP_P_H
 
-#include <input_keycode.h>
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API.  It exists purely as an
+// implementation detail.  This header file may change from version to
+// version without notice, or even be removed.
+//
+// We mean it.
+//
 
-const QEmulatorKeyboardMap::Mapping QEmulatorKeyboardHandler::s_default_keymap[] = {
+#include "qnamespace.h"
+#ifdef Q_OS_FREEBSD
+#include <dev/evdev/input.h>
+#else
+#include "linux/input.h"
+#endif
 
-    { INPUT_KEY_LEFT_ARROW,    Qt::Key_Left,               0xffff, 0x00, 0x00, 0x0000 },
-    { INPUT_KEY_RIGHT_ARROW,   Qt::Key_Right,              0xffff, 0x00, 0x00, 0x0000 },
-    { INPUT_KEY_UP_ARROW,      Qt::Key_Up,                 0xffff, 0x00, 0x00, 0x0000 },
-    { INPUT_KEY_DOWN_ARROW,    Qt::Key_Down,               0xffff, 0x00, 0x00, 0x0000 },
-    { INPUT_KEY_ENTER,         Qt::Key_Return,             0x000d, 0x00, 0x00, 0x0000 },
+// no QT_BEGIN_NAMESPACE, since we include it internally...
 
-    { INPUT_KEY_0,             Qt::Key_0,                  0x0030, 0x00, 0x00, 0x0000 },
-    { INPUT_KEY_1,             Qt::Key_1,                  0x0031, 0x00, 0x00, 0x0000 },
-    { INPUT_KEY_2,             Qt::Key_2,                  0x0032, 0x00, 0x00, 0x0000 },
-    { INPUT_KEY_3,             Qt::Key_3,                  0x0033, 0x00, 0x00, 0x0000 },
-    { INPUT_KEY_4,             Qt::Key_4,                  0x0034, 0x00, 0x00, 0x0000 },
-    { INPUT_KEY_5,             Qt::Key_5,                  0x0035, 0x00, 0x00, 0x0000 },
-    { INPUT_KEY_6,             Qt::Key_6,                  0x0036, 0x00, 0x00, 0x0000 },
-    { INPUT_KEY_7,             Qt::Key_7,                  0x0037, 0x00, 0x00, 0x0000 },
-    { INPUT_KEY_8,             Qt::Key_8,                  0x0038, 0x00, 0x00, 0x0000 },
-    { INPUT_KEY_9,             Qt::Key_9,                  0x0039, 0x00, 0x00, 0x0000 },
+const QEmulatorKeyboardMap::Mapping QEmulatorKeyboardHandler::s_keymap_default[] = {
+    {   1, 0xffff, 0x01000000, 0x00, 0x00, 0x0000 },
+    {   2, 0x0031, 0x00000031, 0x00, 0x00, 0x0000 },
+    {   2, 0x0021, 0x00000021, 0x01, 0x00, 0x0000 },
+    {   3, 0x0032, 0x00000032, 0x00, 0x00, 0x0000 },
+    {   3, 0x0040, 0x00000040, 0x01, 0x00, 0x0000 },
+    {   3, 0x0040, 0x00000040, 0x02, 0x00, 0x0000 },
+    {   4, 0x0033, 0x00000033, 0x00, 0x00, 0x0000 },
+    {   4, 0x0023, 0x00000023, 0x01, 0x00, 0x0000 },
+    {   4, 0xffff, 0x01000000, 0x04, 0x00, 0x0000 },
+    {   5, 0x0034, 0x00000034, 0x00, 0x00, 0x0000 },
+    {   5, 0x0024, 0x00000024, 0x01, 0x00, 0x0000 },
+    {   5, 0x0024, 0x00000024, 0x02, 0x00, 0x0000 },
+    {   5, 0x005c, 0x0400005c, 0x04, 0x00, 0x0000 },
+    {   6, 0x0035, 0x00000035, 0x00, 0x00, 0x0000 },
+    {   6, 0x0025, 0x00000025, 0x01, 0x00, 0x0000 },
+    {   6, 0x005d, 0x0400005d, 0x04, 0x00, 0x0000 },
+    {   7, 0x0036, 0x00000036, 0x00, 0x00, 0x0000 },
+    {   7, 0x005e, 0x0000005e, 0x01, 0x00, 0x0000 },
+    {   7, 0x005e, 0x01001252, 0x02, 0x01, 0x0000 },
+    {   7, 0x005e, 0x0400005e, 0x04, 0x00, 0x0000 },
+    {   8, 0x0037, 0x00000037, 0x00, 0x00, 0x0000 },
+    {   8, 0x0026, 0x00000026, 0x01, 0x00, 0x0000 },
+    {   8, 0x007b, 0x0000007b, 0x02, 0x00, 0x0000 },
+    {   8, 0x005f, 0x0400005f, 0x04, 0x00, 0x0000 },
+    {   9, 0x0038, 0x00000038, 0x00, 0x00, 0x0000 },
+    {   9, 0x002a, 0x0000002a, 0x01, 0x00, 0x0000 },
+    {   9, 0x005b, 0x0000005b, 0x02, 0x00, 0x0000 },
+    {   9, 0xffff, 0x01000003, 0x04, 0x00, 0x0000 },
+    {  10, 0x0039, 0x00000039, 0x00, 0x00, 0x0000 },
+    {  10, 0x0028, 0x00000028, 0x01, 0x00, 0x0000 },
+    {  10, 0x005d, 0x0000005d, 0x02, 0x00, 0x0000 },
+    {  11, 0x0030, 0x00000030, 0x00, 0x00, 0x0000 },
+    {  11, 0x0029, 0x00000029, 0x01, 0x00, 0x0000 },
+    {  11, 0x007d, 0x0000007d, 0x02, 0x00, 0x0000 },
+    {  12, 0x002d, 0x0000002d, 0x00, 0x00, 0x0000 },
+    {  12, 0x005f, 0x0000005f, 0x01, 0x00, 0x0000 },
+    {  12, 0x005c, 0x0000005c, 0x02, 0x00, 0x0000 },
+    {  12, 0x005f, 0x0400005f, 0x04, 0x00, 0x0000 },
+    {  12, 0x005f, 0x0400005f, 0x05, 0x00, 0x0000 },
+    {  13, 0x003d, 0x0000003d, 0x00, 0x00, 0x0000 },
+    {  13, 0x002b, 0x0000002b, 0x01, 0x00, 0x0000 },
+    {  14, 0xffff, 0x01000003, 0x00, 0x00, 0x0000 },
+    {  14, 0xffff, 0x01000000, 0x0c, 0x08, 0x0300 },
+    {  15, 0xffff, 0x01000001, 0x00, 0x00, 0x0000 },
+    {  16, 0x0071, 0x00000051, 0x00, 0x02, 0x0000 },
+    {  16, 0x0051, 0x00000051, 0x01, 0x02, 0x0000 },
+    {  16, 0x0071, 0x00000051, 0x02, 0x02, 0x0000 },
+    {  16, 0x0051, 0x00000051, 0x03, 0x02, 0x0000 },
+    {  16, 0x0071, 0x04000051, 0x04, 0x02, 0x0000 },
+    {  16, 0x0071, 0x04000051, 0x05, 0x02, 0x0000 },
+    {  16, 0x0071, 0x04000051, 0x06, 0x02, 0x0000 },
+    {  16, 0x0071, 0x04000051, 0x07, 0x02, 0x0000 },
+    {  16, 0x0071, 0x08000051, 0x08, 0x02, 0x0000 },
+    {  16, 0x0071, 0x08000051, 0x09, 0x02, 0x0000 },
+    {  16, 0x0071, 0x08000051, 0x0a, 0x02, 0x0000 },
+    {  16, 0x0071, 0x08000051, 0x0b, 0x02, 0x0000 },
+    {  16, 0x0071, 0x0c000051, 0x0c, 0x02, 0x0000 },
+    {  16, 0x0071, 0x0c000051, 0x0d, 0x02, 0x0000 },
+    {  16, 0x0071, 0x0c000051, 0x0e, 0x02, 0x0000 },
+    {  16, 0x0071, 0x0c000051, 0x0f, 0x02, 0x0000 },
+    {  17, 0x0077, 0x00000057, 0x00, 0x02, 0x0000 },
+    {  17, 0x0057, 0x00000057, 0x01, 0x02, 0x0000 },
+    {  17, 0x0077, 0x00000057, 0x02, 0x02, 0x0000 },
+    {  17, 0x0057, 0x00000057, 0x03, 0x02, 0x0000 },
+    {  17, 0x0077, 0x04000057, 0x04, 0x02, 0x0000 },
+    {  17, 0x0077, 0x04000057, 0x05, 0x02, 0x0000 },
+    {  17, 0x0077, 0x04000057, 0x06, 0x02, 0x0000 },
+    {  17, 0x0077, 0x04000057, 0x07, 0x02, 0x0000 },
+    {  17, 0x0077, 0x08000057, 0x08, 0x02, 0x0000 },
+    {  17, 0x0077, 0x08000057, 0x09, 0x02, 0x0000 },
+    {  17, 0x0077, 0x08000057, 0x0a, 0x02, 0x0000 },
+    {  17, 0x0077, 0x08000057, 0x0b, 0x02, 0x0000 },
+    {  17, 0x0077, 0x0c000057, 0x0c, 0x02, 0x0000 },
+    {  17, 0x0077, 0x0c000057, 0x0d, 0x02, 0x0000 },
+    {  17, 0x0077, 0x0c000057, 0x0e, 0x02, 0x0000 },
+    {  17, 0x0077, 0x0c000057, 0x0f, 0x02, 0x0000 },
+    {  18, 0x0065, 0x00000045, 0x00, 0x02, 0x0000 },
+    {  18, 0x0045, 0x00000045, 0x01, 0x02, 0x0000 },
+    {  18, 0x0065, 0x00000045, 0x02, 0x02, 0x0000 },
+    {  18, 0x0045, 0x00000045, 0x03, 0x02, 0x0000 },
+    {  18, 0x0065, 0x04000045, 0x04, 0x02, 0x0000 },
+    {  18, 0x0065, 0x04000045, 0x05, 0x02, 0x0000 },
+    {  18, 0x0065, 0x04000045, 0x06, 0x02, 0x0000 },
+    {  18, 0x0065, 0x04000045, 0x07, 0x02, 0x0000 },
+    {  18, 0x0065, 0x08000045, 0x08, 0x02, 0x0000 },
+    {  18, 0x0065, 0x08000045, 0x09, 0x02, 0x0000 },
+    {  18, 0x0065, 0x08000045, 0x0a, 0x02, 0x0000 },
+    {  18, 0x0065, 0x08000045, 0x0b, 0x02, 0x0000 },
+    {  18, 0x0065, 0x0c000045, 0x0c, 0x02, 0x0000 },
+    {  18, 0x0065, 0x0c000045, 0x0d, 0x02, 0x0000 },
+    {  18, 0x0065, 0x0c000045, 0x0e, 0x02, 0x0000 },
+    {  18, 0x0065, 0x0c000045, 0x0f, 0x02, 0x0000 },
+    {  19, 0x0072, 0x00000052, 0x00, 0x02, 0x0000 },
+    {  19, 0x0052, 0x00000052, 0x01, 0x02, 0x0000 },
+    {  19, 0x0072, 0x00000052, 0x02, 0x02, 0x0000 },
+    {  19, 0x0052, 0x00000052, 0x03, 0x02, 0x0000 },
+    {  19, 0x0072, 0x04000052, 0x04, 0x02, 0x0000 },
+    {  19, 0x0072, 0x04000052, 0x05, 0x02, 0x0000 },
+    {  19, 0x0072, 0x04000052, 0x06, 0x02, 0x0000 },
+    {  19, 0x0072, 0x04000052, 0x07, 0x02, 0x0000 },
+    {  19, 0x0072, 0x08000052, 0x08, 0x02, 0x0000 },
+    {  19, 0x0072, 0x08000052, 0x09, 0x02, 0x0000 },
+    {  19, 0x0072, 0x08000052, 0x0a, 0x02, 0x0000 },
+    {  19, 0x0072, 0x08000052, 0x0b, 0x02, 0x0000 },
+    {  19, 0x0072, 0x0c000052, 0x0c, 0x02, 0x0000 },
+    {  19, 0x0072, 0x0c000052, 0x0d, 0x02, 0x0000 },
+    {  19, 0x0072, 0x0c000052, 0x0e, 0x02, 0x0000 },
+    {  19, 0x0072, 0x0c000052, 0x0f, 0x02, 0x0000 },
+    {  20, 0x0074, 0x00000054, 0x00, 0x02, 0x0000 },
+    {  20, 0x0054, 0x00000054, 0x01, 0x02, 0x0000 },
+    {  20, 0x0074, 0x00000054, 0x02, 0x02, 0x0000 },
+    {  20, 0x0054, 0x00000054, 0x03, 0x02, 0x0000 },
+    {  20, 0x0074, 0x04000054, 0x04, 0x02, 0x0000 },
+    {  20, 0x0074, 0x04000054, 0x05, 0x02, 0x0000 },
+    {  20, 0x0074, 0x04000054, 0x06, 0x02, 0x0000 },
+    {  20, 0x0074, 0x04000054, 0x07, 0x02, 0x0000 },
+    {  20, 0x0074, 0x08000054, 0x08, 0x02, 0x0000 },
+    {  20, 0x0074, 0x08000054, 0x09, 0x02, 0x0000 },
+    {  20, 0x0074, 0x08000054, 0x0a, 0x02, 0x0000 },
+    {  20, 0x0074, 0x08000054, 0x0b, 0x02, 0x0000 },
+    {  20, 0x0074, 0x0c000054, 0x0c, 0x02, 0x0000 },
+    {  20, 0x0074, 0x0c000054, 0x0d, 0x02, 0x0000 },
+    {  20, 0x0074, 0x0c000054, 0x0e, 0x02, 0x0000 },
+    {  20, 0x0074, 0x0c000054, 0x0f, 0x02, 0x0000 },
+    {  21, 0x0079, 0x00000059, 0x00, 0x02, 0x0000 },
+    {  21, 0x0059, 0x00000059, 0x01, 0x02, 0x0000 },
+    {  21, 0x0079, 0x00000059, 0x02, 0x02, 0x0000 },
+    {  21, 0x0059, 0x00000059, 0x03, 0x02, 0x0000 },
+    {  21, 0x0079, 0x04000059, 0x04, 0x02, 0x0000 },
+    {  21, 0x0079, 0x04000059, 0x05, 0x02, 0x0000 },
+    {  21, 0x0079, 0x04000059, 0x06, 0x02, 0x0000 },
+    {  21, 0x0079, 0x04000059, 0x07, 0x02, 0x0000 },
+    {  21, 0x0079, 0x08000059, 0x08, 0x02, 0x0000 },
+    {  21, 0x0079, 0x08000059, 0x09, 0x02, 0x0000 },
+    {  21, 0x0079, 0x08000059, 0x0a, 0x02, 0x0000 },
+    {  21, 0x0079, 0x08000059, 0x0b, 0x02, 0x0000 },
+    {  21, 0x0079, 0x0c000059, 0x0c, 0x02, 0x0000 },
+    {  21, 0x0079, 0x0c000059, 0x0d, 0x02, 0x0000 },
+    {  21, 0x0079, 0x0c000059, 0x0e, 0x02, 0x0000 },
+    {  21, 0x0079, 0x0c000059, 0x0f, 0x02, 0x0000 },
+    {  22, 0x0075, 0x00000055, 0x00, 0x02, 0x0000 },
+    {  22, 0x0055, 0x00000055, 0x01, 0x02, 0x0000 },
+    {  22, 0x0075, 0x00000055, 0x02, 0x02, 0x0000 },
+    {  22, 0x0055, 0x00000055, 0x03, 0x02, 0x0000 },
+    {  22, 0x0075, 0x04000055, 0x04, 0x02, 0x0000 },
+    {  22, 0x0075, 0x04000055, 0x05, 0x02, 0x0000 },
+    {  22, 0x0075, 0x04000055, 0x06, 0x02, 0x0000 },
+    {  22, 0x0075, 0x04000055, 0x07, 0x02, 0x0000 },
+    {  22, 0x0075, 0x08000055, 0x08, 0x02, 0x0000 },
+    {  22, 0x0075, 0x08000055, 0x09, 0x02, 0x0000 },
+    {  22, 0x0075, 0x08000055, 0x0a, 0x02, 0x0000 },
+    {  22, 0x0075, 0x08000055, 0x0b, 0x02, 0x0000 },
+    {  22, 0x0075, 0x0c000055, 0x0c, 0x02, 0x0000 },
+    {  22, 0x0075, 0x0c000055, 0x0d, 0x02, 0x0000 },
+    {  22, 0x0075, 0x0c000055, 0x0e, 0x02, 0x0000 },
+    {  22, 0x0075, 0x0c000055, 0x0f, 0x02, 0x0000 },
+    {  23, 0x0069, 0x00000049, 0x00, 0x02, 0x0000 },
+    {  23, 0x0049, 0x00000049, 0x01, 0x02, 0x0000 },
+    {  23, 0x0069, 0x00000049, 0x02, 0x02, 0x0000 },
+    {  23, 0x0049, 0x00000049, 0x03, 0x02, 0x0000 },
+    {  23, 0x0069, 0x04000049, 0x04, 0x02, 0x0000 },
+    {  23, 0x0069, 0x04000049, 0x05, 0x02, 0x0000 },
+    {  23, 0x0069, 0x04000049, 0x06, 0x02, 0x0000 },
+    {  23, 0x0069, 0x04000049, 0x07, 0x02, 0x0000 },
+    {  23, 0x0069, 0x08000049, 0x08, 0x02, 0x0000 },
+    {  23, 0x0069, 0x08000049, 0x09, 0x02, 0x0000 },
+    {  23, 0x0069, 0x08000049, 0x0a, 0x02, 0x0000 },
+    {  23, 0x0069, 0x08000049, 0x0b, 0x02, 0x0000 },
+    {  23, 0x0069, 0x0c000049, 0x0c, 0x02, 0x0000 },
+    {  23, 0x0069, 0x0c000049, 0x0d, 0x02, 0x0000 },
+    {  23, 0x0069, 0x0c000049, 0x0e, 0x02, 0x0000 },
+    {  23, 0x0069, 0x0c000049, 0x0f, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0000004f, 0x00, 0x02, 0x0000 },
+    {  24, 0x004f, 0x0000004f, 0x01, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0000004f, 0x02, 0x02, 0x0000 },
+    {  24, 0x004f, 0x0000004f, 0x03, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0400004f, 0x04, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0400004f, 0x05, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0400004f, 0x06, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0400004f, 0x07, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0800004f, 0x08, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0800004f, 0x09, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0800004f, 0x0a, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0800004f, 0x0b, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0c00004f, 0x0c, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0c00004f, 0x0d, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0c00004f, 0x0e, 0x02, 0x0000 },
+    {  24, 0x006f, 0x0c00004f, 0x0f, 0x02, 0x0000 },
+    {  25, 0x0070, 0x00000050, 0x00, 0x02, 0x0000 },
+    {  25, 0x0050, 0x00000050, 0x01, 0x02, 0x0000 },
+    {  25, 0x0070, 0x00000050, 0x02, 0x02, 0x0000 },
+    {  25, 0x0050, 0x00000050, 0x03, 0x02, 0x0000 },
+    {  25, 0x0070, 0x04000050, 0x04, 0x02, 0x0000 },
+    {  25, 0x0070, 0x04000050, 0x05, 0x02, 0x0000 },
+    {  25, 0x0070, 0x04000050, 0x06, 0x02, 0x0000 },
+    {  25, 0x0070, 0x04000050, 0x07, 0x02, 0x0000 },
+    {  25, 0x0070, 0x08000050, 0x08, 0x02, 0x0000 },
+    {  25, 0x0070, 0x08000050, 0x09, 0x02, 0x0000 },
+    {  25, 0x0070, 0x08000050, 0x0a, 0x02, 0x0000 },
+    {  25, 0x0070, 0x08000050, 0x0b, 0x02, 0x0000 },
+    {  25, 0x0070, 0x0c000050, 0x0c, 0x02, 0x0000 },
+    {  25, 0x0070, 0x0c000050, 0x0d, 0x02, 0x0000 },
+    {  25, 0x0070, 0x0c000050, 0x0e, 0x02, 0x0000 },
+    {  25, 0x0070, 0x0c000050, 0x0f, 0x02, 0x0000 },
+    {  26, 0x005b, 0x0000005b, 0x00, 0x00, 0x0000 },
+    {  26, 0x007b, 0x0000007b, 0x01, 0x00, 0x0000 },
+    {  26, 0xffff, 0x01000000, 0x04, 0x00, 0x0000 },
+    {  27, 0x005d, 0x0000005d, 0x00, 0x00, 0x0000 },
+    {  27, 0x007d, 0x0000007d, 0x01, 0x00, 0x0000 },
+    {  27, 0x007e, 0x0000007e, 0x02, 0x00, 0x0000 },
+    {  27, 0x005d, 0x0400005d, 0x04, 0x00, 0x0000 },
+    {  28, 0xffff, 0x01000004, 0x00, 0x00, 0x0000 },
+    {  28, 0x006d, 0x0c00004d, 0x08, 0x00, 0x0000 },
+    {  29, 0xffff, 0x01000021, 0x00, 0x04, 0x0004 },
+    {  30, 0x0061, 0x00000041, 0x00, 0x02, 0x0000 },
+    {  30, 0x0041, 0x00000041, 0x01, 0x02, 0x0000 },
+    {  30, 0x0061, 0x00000041, 0x02, 0x02, 0x0000 },
+    {  30, 0x0041, 0x00000041, 0x03, 0x02, 0x0000 },
+    {  30, 0x0061, 0x04000041, 0x04, 0x02, 0x0000 },
+    {  30, 0x0061, 0x04000041, 0x05, 0x02, 0x0000 },
+    {  30, 0x0061, 0x04000041, 0x06, 0x02, 0x0000 },
+    {  30, 0x0061, 0x04000041, 0x07, 0x02, 0x0000 },
+    {  30, 0x0061, 0x08000041, 0x08, 0x02, 0x0000 },
+    {  30, 0x0061, 0x08000041, 0x09, 0x02, 0x0000 },
+    {  30, 0x0061, 0x08000041, 0x0a, 0x02, 0x0000 },
+    {  30, 0x0061, 0x08000041, 0x0b, 0x02, 0x0000 },
+    {  30, 0x0061, 0x0c000041, 0x0c, 0x02, 0x0000 },
+    {  30, 0x0061, 0x0c000041, 0x0d, 0x02, 0x0000 },
+    {  30, 0x0061, 0x0c000041, 0x0e, 0x02, 0x0000 },
+    {  30, 0x0061, 0x0c000041, 0x0f, 0x02, 0x0000 },
+    {  31, 0x0073, 0x00000053, 0x00, 0x02, 0x0000 },
+    {  31, 0x0053, 0x00000053, 0x01, 0x02, 0x0000 },
+    {  31, 0x0073, 0x00000053, 0x02, 0x02, 0x0000 },
+    {  31, 0x0053, 0x00000053, 0x03, 0x02, 0x0000 },
+    {  31, 0x0073, 0x04000053, 0x04, 0x02, 0x0000 },
+    {  31, 0x0073, 0x04000053, 0x05, 0x02, 0x0000 },
+    {  31, 0x0073, 0x04000053, 0x06, 0x02, 0x0000 },
+    {  31, 0x0073, 0x04000053, 0x07, 0x02, 0x0000 },
+    {  31, 0x0073, 0x08000053, 0x08, 0x02, 0x0000 },
+    {  31, 0x0073, 0x08000053, 0x09, 0x02, 0x0000 },
+    {  31, 0x0073, 0x08000053, 0x0a, 0x02, 0x0000 },
+    {  31, 0x0073, 0x08000053, 0x0b, 0x02, 0x0000 },
+    {  31, 0x0073, 0x0c000053, 0x0c, 0x02, 0x0000 },
+    {  31, 0x0073, 0x0c000053, 0x0d, 0x02, 0x0000 },
+    {  31, 0x0073, 0x0c000053, 0x0e, 0x02, 0x0000 },
+    {  31, 0x0073, 0x0c000053, 0x0f, 0x02, 0x0000 },
+    {  32, 0x0064, 0x00000044, 0x00, 0x02, 0x0000 },
+    {  32, 0x0044, 0x00000044, 0x01, 0x02, 0x0000 },
+    {  32, 0x0064, 0x00000044, 0x02, 0x02, 0x0000 },
+    {  32, 0x0044, 0x00000044, 0x03, 0x02, 0x0000 },
+    {  32, 0x0064, 0x04000044, 0x04, 0x02, 0x0000 },
+    {  32, 0x0064, 0x04000044, 0x05, 0x02, 0x0000 },
+    {  32, 0x0064, 0x04000044, 0x06, 0x02, 0x0000 },
+    {  32, 0x0064, 0x04000044, 0x07, 0x02, 0x0000 },
+    {  32, 0x0064, 0x08000044, 0x08, 0x02, 0x0000 },
+    {  32, 0x0064, 0x08000044, 0x09, 0x02, 0x0000 },
+    {  32, 0x0064, 0x08000044, 0x0a, 0x02, 0x0000 },
+    {  32, 0x0064, 0x08000044, 0x0b, 0x02, 0x0000 },
+    {  32, 0x0064, 0x0c000044, 0x0c, 0x02, 0x0000 },
+    {  32, 0x0064, 0x0c000044, 0x0d, 0x02, 0x0000 },
+    {  32, 0x0064, 0x0c000044, 0x0e, 0x02, 0x0000 },
+    {  32, 0x0064, 0x0c000044, 0x0f, 0x02, 0x0000 },
+    {  33, 0x0066, 0x00000046, 0x00, 0x02, 0x0000 },
+    {  33, 0x0046, 0x00000046, 0x01, 0x02, 0x0000 },
+    {  33, 0x0066, 0x00000046, 0x02, 0x02, 0x0000 },
+    {  33, 0x0046, 0x00000046, 0x03, 0x02, 0x0000 },
+    {  33, 0x0066, 0x04000046, 0x04, 0x02, 0x0000 },
+    {  33, 0x0066, 0x04000046, 0x05, 0x02, 0x0000 },
+    {  33, 0x0066, 0x04000046, 0x06, 0x02, 0x0000 },
+    {  33, 0x0066, 0x04000046, 0x07, 0x02, 0x0000 },
+    {  33, 0x0066, 0x08000046, 0x08, 0x02, 0x0000 },
+    {  33, 0x0066, 0x08000046, 0x09, 0x02, 0x0000 },
+    {  33, 0x0066, 0x08000046, 0x0a, 0x02, 0x0000 },
+    {  33, 0x0066, 0x08000046, 0x0b, 0x02, 0x0000 },
+    {  33, 0x0066, 0x0c000046, 0x0c, 0x02, 0x0000 },
+    {  33, 0x0066, 0x0c000046, 0x0d, 0x02, 0x0000 },
+    {  33, 0x0066, 0x0c000046, 0x0e, 0x02, 0x0000 },
+    {  33, 0x0066, 0x0c000046, 0x0f, 0x02, 0x0000 },
+    {  34, 0x0067, 0x00000047, 0x00, 0x02, 0x0000 },
+    {  34, 0x0047, 0x00000047, 0x01, 0x02, 0x0000 },
+    {  34, 0x0067, 0x00000047, 0x02, 0x02, 0x0000 },
+    {  34, 0x0047, 0x00000047, 0x03, 0x02, 0x0000 },
+    {  34, 0x0067, 0x04000047, 0x04, 0x02, 0x0000 },
+    {  34, 0x0067, 0x04000047, 0x05, 0x02, 0x0000 },
+    {  34, 0x0067, 0x04000047, 0x06, 0x02, 0x0000 },
+    {  34, 0x0067, 0x04000047, 0x07, 0x02, 0x0000 },
+    {  34, 0x0067, 0x08000047, 0x08, 0x02, 0x0000 },
+    {  34, 0x0067, 0x08000047, 0x09, 0x02, 0x0000 },
+    {  34, 0x0067, 0x08000047, 0x0a, 0x02, 0x0000 },
+    {  34, 0x0067, 0x08000047, 0x0b, 0x02, 0x0000 },
+    {  34, 0x0067, 0x0c000047, 0x0c, 0x02, 0x0000 },
+    {  34, 0x0067, 0x0c000047, 0x0d, 0x02, 0x0000 },
+    {  34, 0x0067, 0x0c000047, 0x0e, 0x02, 0x0000 },
+    {  34, 0x0067, 0x0c000047, 0x0f, 0x02, 0x0000 },
+    {  35, 0x0068, 0x00000048, 0x00, 0x02, 0x0000 },
+    {  35, 0x0048, 0x00000048, 0x01, 0x02, 0x0000 },
+    {  35, 0x0068, 0x00000048, 0x02, 0x02, 0x0000 },
+    {  35, 0x0048, 0x00000048, 0x03, 0x02, 0x0000 },
+    {  35, 0x0068, 0x04000048, 0x04, 0x02, 0x0000 },
+    {  35, 0x0068, 0x04000048, 0x05, 0x02, 0x0000 },
+    {  35, 0x0068, 0x04000048, 0x06, 0x02, 0x0000 },
+    {  35, 0x0068, 0x04000048, 0x07, 0x02, 0x0000 },
+    {  35, 0x0068, 0x08000048, 0x08, 0x02, 0x0000 },
+    {  35, 0x0068, 0x08000048, 0x09, 0x02, 0x0000 },
+    {  35, 0x0068, 0x08000048, 0x0a, 0x02, 0x0000 },
+    {  35, 0x0068, 0x08000048, 0x0b, 0x02, 0x0000 },
+    {  35, 0x0068, 0x0c000048, 0x0c, 0x02, 0x0000 },
+    {  35, 0x0068, 0x0c000048, 0x0d, 0x02, 0x0000 },
+    {  35, 0x0068, 0x0c000048, 0x0e, 0x02, 0x0000 },
+    {  35, 0x0068, 0x0c000048, 0x0f, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0000004a, 0x00, 0x02, 0x0000 },
+    {  36, 0x004a, 0x0000004a, 0x01, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0000004a, 0x02, 0x02, 0x0000 },
+    {  36, 0x004a, 0x0000004a, 0x03, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0400004a, 0x04, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0400004a, 0x05, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0400004a, 0x06, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0400004a, 0x07, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0800004a, 0x08, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0800004a, 0x09, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0800004a, 0x0a, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0800004a, 0x0b, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0c00004a, 0x0c, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0c00004a, 0x0d, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0c00004a, 0x0e, 0x02, 0x0000 },
+    {  36, 0x006a, 0x0c00004a, 0x0f, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0000004b, 0x00, 0x02, 0x0000 },
+    {  37, 0x004b, 0x0000004b, 0x01, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0000004b, 0x02, 0x02, 0x0000 },
+    {  37, 0x004b, 0x0000004b, 0x03, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0400004b, 0x04, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0400004b, 0x05, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0400004b, 0x06, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0400004b, 0x07, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0800004b, 0x08, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0800004b, 0x09, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0800004b, 0x0a, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0800004b, 0x0b, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0c00004b, 0x0c, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0c00004b, 0x0d, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0c00004b, 0x0e, 0x02, 0x0000 },
+    {  37, 0x006b, 0x0c00004b, 0x0f, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0000004c, 0x00, 0x02, 0x0000 },
+    {  38, 0x004c, 0x0000004c, 0x01, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0000004c, 0x02, 0x02, 0x0000 },
+    {  38, 0x004c, 0x0000004c, 0x03, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0400004c, 0x04, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0400004c, 0x05, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0400004c, 0x06, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0400004c, 0x07, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0800004c, 0x08, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0800004c, 0x09, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0800004c, 0x0a, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0800004c, 0x0b, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0c00004c, 0x0c, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0c00004c, 0x0d, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0c00004c, 0x0e, 0x02, 0x0000 },
+    {  38, 0x006c, 0x0c00004c, 0x0f, 0x02, 0x0000 },
+    {  39, 0x003b, 0x0000003b, 0x00, 0x00, 0x0000 },
+    {  39, 0x003a, 0x0000003a, 0x01, 0x00, 0x0000 },
+    {  40, 0x0027, 0x00000027, 0x00, 0x00, 0x0000 },
+    {  40, 0x0022, 0x00000022, 0x01, 0x00, 0x0000 },
+    {  40, 0x0027, 0x01001251, 0x02, 0x01, 0x0000 },
+    {  40, 0x0022, 0x01001257, 0x03, 0x01, 0x0000 },
+    {  40, 0x0067, 0x04000047, 0x04, 0x00, 0x0000 },
+    {  41, 0x0060, 0x00000060, 0x00, 0x00, 0x0000 },
+    {  41, 0x007e, 0x0000007e, 0x01, 0x00, 0x0000 },
+    {  41, 0x0060, 0x01001250, 0x02, 0x01, 0x0000 },
+    {  41, 0x007e, 0x01001253, 0x03, 0x01, 0x0000 },
+    {  42, 0xffff, 0x01000020, 0x00, 0x04, 0x0001 },
+    {  43, 0x005c, 0x0000005c, 0x00, 0x00, 0x0000 },
+    {  43, 0x007c, 0x0000007c, 0x01, 0x00, 0x0000 },
+    {  43, 0x005c, 0x0400005c, 0x04, 0x00, 0x0000 },
+    {  44, 0x007a, 0x0000005a, 0x00, 0x02, 0x0000 },
+    {  44, 0x005a, 0x0000005a, 0x01, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0000005a, 0x02, 0x02, 0x0000 },
+    {  44, 0x005a, 0x0000005a, 0x03, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0400005a, 0x04, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0400005a, 0x05, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0400005a, 0x06, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0400005a, 0x07, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0800005a, 0x08, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0800005a, 0x09, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0800005a, 0x0a, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0800005a, 0x0b, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0c00005a, 0x0c, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0c00005a, 0x0d, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0c00005a, 0x0e, 0x02, 0x0000 },
+    {  44, 0x007a, 0x0c00005a, 0x0f, 0x02, 0x0000 },
+    {  45, 0x0078, 0x00000058, 0x00, 0x02, 0x0000 },
+    {  45, 0x0058, 0x00000058, 0x01, 0x02, 0x0000 },
+    {  45, 0x0078, 0x00000058, 0x02, 0x02, 0x0000 },
+    {  45, 0x0058, 0x00000058, 0x03, 0x02, 0x0000 },
+    {  45, 0x0078, 0x04000058, 0x04, 0x02, 0x0000 },
+    {  45, 0x0078, 0x04000058, 0x05, 0x02, 0x0000 },
+    {  45, 0x0078, 0x04000058, 0x06, 0x02, 0x0000 },
+    {  45, 0x0078, 0x04000058, 0x07, 0x02, 0x0000 },
+    {  45, 0x0078, 0x08000058, 0x08, 0x02, 0x0000 },
+    {  45, 0x0078, 0x08000058, 0x09, 0x02, 0x0000 },
+    {  45, 0x0078, 0x08000058, 0x0a, 0x02, 0x0000 },
+    {  45, 0x0078, 0x08000058, 0x0b, 0x02, 0x0000 },
+    {  45, 0x0078, 0x0c000058, 0x0c, 0x02, 0x0000 },
+    {  45, 0x0078, 0x0c000058, 0x0d, 0x02, 0x0000 },
+    {  45, 0x0078, 0x0c000058, 0x0e, 0x02, 0x0000 },
+    {  45, 0x0078, 0x0c000058, 0x0f, 0x02, 0x0000 },
+    {  46, 0x0063, 0x00000043, 0x00, 0x02, 0x0000 },
+    {  46, 0x0043, 0x00000043, 0x01, 0x02, 0x0000 },
+    {  46, 0x0063, 0x00000043, 0x02, 0x02, 0x0000 },
+    {  46, 0x0043, 0x00000043, 0x03, 0x02, 0x0000 },
+    {  46, 0x0063, 0x04000043, 0x04, 0x02, 0x0000 },
+    {  46, 0x0063, 0x04000043, 0x05, 0x02, 0x0000 },
+    {  46, 0x0063, 0x04000043, 0x06, 0x02, 0x0000 },
+    {  46, 0x0063, 0x04000043, 0x07, 0x02, 0x0000 },
+    {  46, 0x0063, 0x08000043, 0x08, 0x02, 0x0000 },
+    {  46, 0x0063, 0x08000043, 0x09, 0x02, 0x0000 },
+    {  46, 0x0063, 0x08000043, 0x0a, 0x02, 0x0000 },
+    {  46, 0x0063, 0x08000043, 0x0b, 0x02, 0x0000 },
+    {  46, 0x0063, 0x0c000043, 0x0c, 0x02, 0x0000 },
+    {  46, 0x0063, 0x0c000043, 0x0d, 0x02, 0x0000 },
+    {  46, 0x0063, 0x0c000043, 0x0e, 0x02, 0x0000 },
+    {  46, 0x0063, 0x0c000043, 0x0f, 0x02, 0x0000 },
+    {  47, 0x0076, 0x00000056, 0x00, 0x02, 0x0000 },
+    {  47, 0x0056, 0x00000056, 0x01, 0x02, 0x0000 },
+    {  47, 0x0076, 0x00000056, 0x02, 0x02, 0x0000 },
+    {  47, 0x0056, 0x00000056, 0x03, 0x02, 0x0000 },
+    {  47, 0x0076, 0x04000056, 0x04, 0x02, 0x0000 },
+    {  47, 0x0076, 0x04000056, 0x05, 0x02, 0x0000 },
+    {  47, 0x0076, 0x04000056, 0x06, 0x02, 0x0000 },
+    {  47, 0x0076, 0x04000056, 0x07, 0x02, 0x0000 },
+    {  47, 0x0076, 0x08000056, 0x08, 0x02, 0x0000 },
+    {  47, 0x0076, 0x08000056, 0x09, 0x02, 0x0000 },
+    {  47, 0x0076, 0x08000056, 0x0a, 0x02, 0x0000 },
+    {  47, 0x0076, 0x08000056, 0x0b, 0x02, 0x0000 },
+    {  47, 0x0076, 0x0c000056, 0x0c, 0x02, 0x0000 },
+    {  47, 0x0076, 0x0c000056, 0x0d, 0x02, 0x0000 },
+    {  47, 0x0076, 0x0c000056, 0x0e, 0x02, 0x0000 },
+    {  47, 0x0076, 0x0c000056, 0x0f, 0x02, 0x0000 },
+    {  48, 0x0062, 0x00000042, 0x00, 0x02, 0x0000 },
+    {  48, 0x0042, 0x00000042, 0x01, 0x02, 0x0000 },
+    {  48, 0x0062, 0x00000042, 0x02, 0x02, 0x0000 },
+    {  48, 0x0042, 0x00000042, 0x03, 0x02, 0x0000 },
+    {  48, 0x0062, 0x04000042, 0x04, 0x02, 0x0000 },
+    {  48, 0x0062, 0x04000042, 0x05, 0x02, 0x0000 },
+    {  48, 0x0062, 0x04000042, 0x06, 0x02, 0x0000 },
+    {  48, 0x0062, 0x04000042, 0x07, 0x02, 0x0000 },
+    {  48, 0x0062, 0x08000042, 0x08, 0x02, 0x0000 },
+    {  48, 0x0062, 0x08000042, 0x09, 0x02, 0x0000 },
+    {  48, 0x0062, 0x08000042, 0x0a, 0x02, 0x0000 },
+    {  48, 0x0062, 0x08000042, 0x0b, 0x02, 0x0000 },
+    {  48, 0x0062, 0x0c000042, 0x0c, 0x02, 0x0000 },
+    {  48, 0x0062, 0x0c000042, 0x0d, 0x02, 0x0000 },
+    {  48, 0x0062, 0x0c000042, 0x0e, 0x02, 0x0000 },
+    {  48, 0x0062, 0x0c000042, 0x0f, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0000004e, 0x00, 0x02, 0x0000 },
+    {  49, 0x004e, 0x0000004e, 0x01, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0000004e, 0x02, 0x02, 0x0000 },
+    {  49, 0x004e, 0x0000004e, 0x03, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0400004e, 0x04, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0400004e, 0x05, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0400004e, 0x06, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0400004e, 0x07, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0800004e, 0x08, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0800004e, 0x09, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0800004e, 0x0a, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0800004e, 0x0b, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0c00004e, 0x0c, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0c00004e, 0x0d, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0c00004e, 0x0e, 0x02, 0x0000 },
+    {  49, 0x006e, 0x0c00004e, 0x0f, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0000004d, 0x00, 0x02, 0x0000 },
+    {  50, 0x004d, 0x0000004d, 0x01, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0000004d, 0x02, 0x02, 0x0000 },
+    {  50, 0x004d, 0x0000004d, 0x03, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0400004d, 0x04, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0400004d, 0x05, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0400004d, 0x06, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0400004d, 0x07, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0800004d, 0x08, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0800004d, 0x09, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0800004d, 0x0a, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0800004d, 0x0b, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0c00004d, 0x0c, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0c00004d, 0x0d, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0c00004d, 0x0e, 0x02, 0x0000 },
+    {  50, 0x006d, 0x0c00004d, 0x0f, 0x02, 0x0000 },
+    {  51, 0x002c, 0x0000002c, 0x00, 0x00, 0x0000 },
+    {  51, 0x003c, 0x0000003c, 0x01, 0x00, 0x0000 },
+    {  51, 0x002c, 0x0100125b, 0x02, 0x01, 0x0000 },
+    {  52, 0x002e, 0x0000002e, 0x00, 0x00, 0x0000 },
+    {  52, 0x003e, 0x0000003e, 0x01, 0x00, 0x0000 },
+    {  52, 0xffff, 0x01001120, 0x02, 0x00, 0x0000 },
+    {  53, 0x002f, 0x0000002f, 0x00, 0x00, 0x0000 },
+    {  53, 0x003f, 0x0000003f, 0x01, 0x00, 0x0000 },
+    {  53, 0xffff, 0x01000003, 0x04, 0x00, 0x0000 },
+    {  54, 0xffff, 0x01000020, 0x00, 0x04, 0x0001 },
+    {  55, 0x002a, 0x2000002a, 0x00, 0x00, 0x0000 },
+    {  56, 0xffff, 0x01000023, 0x00, 0x04, 0x0008 },
+    {  57, 0x0020, 0x00000020, 0x00, 0x00, 0x0000 },
+    {  58, 0xffff, 0x01000024, 0x00, 0x00, 0x0000 },
+    {  59, 0xffff, 0x01000030, 0x00, 0x00, 0x0000 },
+    {  59, 0xffff, 0x0100003c, 0x01, 0x00, 0x0000 },
+    {  59, 0xffff, 0x01000048, 0x04, 0x00, 0x0000 },
+    {  59, 0xffff, 0x01000000, 0x0c, 0x08, 0x0100 },
+    {  60, 0xffff, 0x01000031, 0x00, 0x00, 0x0000 },
+    {  60, 0xffff, 0x0100003d, 0x01, 0x00, 0x0000 },
+    {  60, 0xffff, 0x01000049, 0x04, 0x00, 0x0000 },
+    {  60, 0xffff, 0x01000000, 0x0c, 0x08, 0x0101 },
+    {  61, 0xffff, 0x01000032, 0x00, 0x00, 0x0000 },
+    {  61, 0xffff, 0x0100003e, 0x01, 0x00, 0x0000 },
+    {  61, 0xffff, 0x0100004a, 0x04, 0x00, 0x0000 },
+    {  61, 0xffff, 0x01000000, 0x0c, 0x08, 0x0102 },
+    {  62, 0xffff, 0x01000033, 0x00, 0x00, 0x0000 },
+    {  62, 0xffff, 0x0100003f, 0x01, 0x00, 0x0000 },
+    {  62, 0xffff, 0x0100004b, 0x04, 0x00, 0x0000 },
+    {  62, 0xffff, 0x01000000, 0x0c, 0x08, 0x0103 },
+    {  63, 0xffff, 0x01000034, 0x00, 0x00, 0x0000 },
+    {  63, 0xffff, 0x01000040, 0x01, 0x00, 0x0000 },
+    {  63, 0xffff, 0x0100004c, 0x04, 0x00, 0x0000 },
+    {  63, 0xffff, 0x01000000, 0x0c, 0x08, 0x0104 },
+    {  64, 0xffff, 0x01000035, 0x00, 0x00, 0x0000 },
+    {  64, 0xffff, 0x01000041, 0x01, 0x00, 0x0000 },
+    {  64, 0xffff, 0x0100004d, 0x04, 0x00, 0x0000 },
+    {  64, 0xffff, 0x01000000, 0x0c, 0x08, 0x0105 },
+    {  65, 0xffff, 0x01000036, 0x00, 0x00, 0x0000 },
+    {  65, 0xffff, 0x01000042, 0x01, 0x00, 0x0000 },
+    {  65, 0xffff, 0x0100004e, 0x04, 0x00, 0x0000 },
+    {  65, 0xffff, 0x01000000, 0x0c, 0x08, 0x0106 },
+    {  66, 0xffff, 0x01000037, 0x00, 0x00, 0x0000 },
+    {  66, 0xffff, 0x01000043, 0x01, 0x00, 0x0000 },
+    {  66, 0xffff, 0x0100004f, 0x04, 0x00, 0x0000 },
+    {  66, 0xffff, 0x01000000, 0x0c, 0x08, 0x0107 },
+    {  67, 0xffff, 0x01000038, 0x00, 0x00, 0x0000 },
+    {  67, 0xffff, 0x01000044, 0x01, 0x00, 0x0000 },
+    {  67, 0xffff, 0x01000050, 0x04, 0x00, 0x0000 },
+    {  67, 0xffff, 0x01000000, 0x0c, 0x08, 0x0108 },
+    {  68, 0xffff, 0x01000039, 0x00, 0x00, 0x0000 },
+    {  68, 0xffff, 0x01000045, 0x01, 0x00, 0x0000 },
+    {  68, 0xffff, 0x01000051, 0x04, 0x00, 0x0000 },
+    {  68, 0xffff, 0x01000000, 0x0c, 0x08, 0x0109 },
+    {  69, 0xffff, 0x01000025, 0x00, 0x00, 0x0000 },
+    {  70, 0xffff, 0x01000026, 0x00, 0x00, 0x0000 },
+    {  70, 0xffff, 0x01000026, 0x08, 0x00, 0x0000 },
+    {  71, 0x0037, 0x20000037, 0x00, 0x00, 0x0000 },
+    {  72, 0x0038, 0x20000038, 0x00, 0x00, 0x0000 },
+    {  73, 0x0039, 0x20000039, 0x00, 0x00, 0x0000 },
+    {  74, 0x002d, 0x2000002d, 0x00, 0x00, 0x0000 },
+    {  75, 0x0034, 0x20000034, 0x00, 0x00, 0x0000 },
+    {  76, 0x0035, 0x20000035, 0x00, 0x00, 0x0000 },
+    {  77, 0x0036, 0x20000036, 0x00, 0x00, 0x0000 },
+    {  78, 0x002b, 0x2000002b, 0x00, 0x00, 0x0000 },
+    {  79, 0x0031, 0x20000031, 0x00, 0x00, 0x0000 },
+    {  80, 0x0032, 0x20000032, 0x00, 0x00, 0x0000 },
+    {  81, 0x0033, 0x20000033, 0x00, 0x00, 0x0000 },
+    {  82, 0x0030, 0x20000030, 0x00, 0x00, 0x0000 },
+    {  83, 0x002e, 0x2000002e, 0x00, 0x00, 0x0000 },
+    {  83, 0xffff, 0x01000000, 0x06, 0x08, 0x0200 },
+    {  83, 0xffff, 0x01000000, 0x0c, 0x08, 0x0200 },
+    {  86, 0x003c, 0x0000003c, 0x00, 0x00, 0x0000 },
+    {  86, 0x003e, 0x0000003e, 0x01, 0x00, 0x0000 },
+    {  86, 0x007c, 0x0000007c, 0x02, 0x00, 0x0000 },
+    {  87, 0xffff, 0x0100003a, 0x00, 0x00, 0x0000 },
+    {  87, 0xffff, 0x01000046, 0x01, 0x00, 0x0000 },
+    {  87, 0xffff, 0x01000052, 0x04, 0x00, 0x0000 },
+    {  87, 0xffff, 0x01000000, 0x0c, 0x08, 0x010a },
+    {  88, 0xffff, 0x0100003b, 0x00, 0x00, 0x0000 },
+    {  88, 0xffff, 0x01000047, 0x01, 0x00, 0x0000 },
+    {  88, 0xffff, 0x01000000, 0x0c, 0x08, 0x010b },
+    {  96, 0xffff, 0x21000005, 0x00, 0x00, 0x0000 },
+    {  97, 0xffff, 0x01000021, 0x00, 0x04, 0x0004 },
+    {  98, 0x002f, 0x2000002f, 0x00, 0x00, 0x0000 },
+    {  99, 0x005c, 0x0400005c, 0x00, 0x00, 0x0000 },
+    { 100, 0xffff, 0x01001103, 0x00, 0x04, 0x0002 },
+    { 102, 0xffff, 0x01000010, 0x00, 0x00, 0x0000 },
+    { 103, 0xffff, 0x01000013, 0x00, 0x00, 0x0000 },
+    { 104, 0xffff, 0x01000016, 0x00, 0x00, 0x0000 },
+    { 105, 0xffff, 0x01000012, 0x00, 0x00, 0x0000 },
+    { 105, 0xffff, 0x01000000, 0x0c, 0x08, 0x0180 },
+    { 106, 0xffff, 0x01000014, 0x00, 0x00, 0x0000 },
+    { 106, 0xffff, 0x01000000, 0x0c, 0x08, 0x0181 },
+    { 107, 0xffff, 0x01000011, 0x00, 0x00, 0x0000 },
+    { 108, 0xffff, 0x01000015, 0x00, 0x00, 0x0000 },
+    { 109, 0xffff, 0x01000017, 0x00, 0x00, 0x0000 },
+    { 110, 0xffff, 0x01000006, 0x00, 0x00, 0x0000 },
+    { 111, 0xffff, 0x01000007, 0x00, 0x00, 0x0000 },
+    { 111, 0xffff, 0x01000000, 0x06, 0x08, 0x0200 },
+    { 111, 0xffff, 0x01000000, 0x0c, 0x08, 0x0200 },
 
+    // 113 -> 248
+    { KEY_MUTE,         0xffff, Qt::Key_VolumeMute,     0x00, 0x00, 0x0000 },
+    { KEY_VOLUMEDOWN,   0xffff, Qt::Key_VolumeDown,     0x00, 0x00, 0x0000 },
+    { KEY_VOLUMEUP,     0xffff, Qt::Key_VolumeUp,       0x00, 0x00, 0x0000 },
+    { KEY_POWER,        0xffff, Qt::Key_PowerOff,       0x00, 0x00, 0x0000 },
+    { KEY_PAUSE,        0xffff, Qt::Key_Pause,          0x00, 0x00, 0x0000 },
+    { KEY_STOP,         0xffff, Qt::Key_Stop,           0x00, 0x00, 0x0000 },
+    { KEY_SETUP,        0xffff, Qt::Key_Settings,       0x00, 0x00, 0x0000 },
+    { KEY_RECORD,       0xffff, Qt::Key_MediaRecord,    0x00, 0x00, 0x0000 },
+    { KEY_REWIND,       0xffff, Qt::Key_AudioRewind,    0x00, 0x00, 0x0000 },
+    { KEY_PLAYPAUSE,    0xffff, Qt::Key_MediaTogglePlayPause,  0x00, 0x00, 0x0000 },
+    { KEY_PLAY,         0xffff, Qt::Key_MediaPlay,      0x00, 0x00, 0x0000 },
+    { KEY_FASTFORWARD,  0xffff, Qt::Key_AudioForward,   0x00, 0x00, 0x0000 },
+    { KEY_CANCEL,       0xffff, Qt::Key_Cancel,         0x00, 0x00, 0x0000 },
+    { 248,              0xffff, Qt::Key_MicMute,        0x00, 0x00, 0x0000 },
+    // 0x160 ->
+    { KEY_SELECT,       0xffff, Qt::Key_Select,         0x00, 0x00, 0x0000 },
+    { KEY_CLEAR,        0xffff, Qt::Key_Clear,          0x00, 0x00, 0x0000 },
+    { KEY_EXIT,         0xffff, Qt::Key_Exit,           0x00, 0x00, 0x0000 },
+    { KEY_INFO,         0xffff, Qt::Key_Info,           0x00, 0x00, 0x0000 },
+    { KEY_PROGRAM,      0xffff, Qt::Key_Guide,          0x00, 0x00, 0x0000 },
+    { KEY_CALENDAR,     0xffff, Qt::Key_Calendar,       0x00, 0x00, 0x0000 },
+    { KEY_RED,          0xffff, Qt::Key_Red,            0x00, 0x00, 0x0000 },
+    { KEY_GREEN,        0xffff, Qt::Key_Green,          0x00, 0x00, 0x0000 },
+    { KEY_YELLOW,       0xffff, Qt::Key_Yellow,         0x00, 0x00, 0x0000 },
+    { KEY_BLUE,         0xffff, Qt::Key_Blue,           0x00, 0x00, 0x0000 },
+    { KEY_CHANNELUP,    0xffff, Qt::Key_ChannelUp,      0x00, 0x00, 0x0000 },
+    { KEY_CHANNELDOWN,  0xffff, Qt::Key_ChannelDown,    0x00, 0x00, 0x0000 },
+};
 
-    // Default keymaps for keyboards (refered from QEvdevKeyboard)
-    // NOTE: keymaps duplicated by above are removed
-    // CAUTION: values were re-ordered.
-
-    {   1, 0x01000000, 0xffff, 0x00, 0x00, 0x0000 },
-    {   2, 0x00000021, 0x0021, 0x00, 0x01, 0x0000 },
-    {   3, 0x00000040, 0x0040, 0x00, 0x01, 0x0000 },
-    {   3, 0x00000040, 0x0040, 0x00, 0x02, 0x0000 },
-    {   4, 0x00000023, 0x0023, 0x00, 0x01, 0x0000 },
-    {   4, 0x01000000, 0xffff, 0x00, 0x04, 0x0000 },
-    {   5, 0x00000024, 0x0024, 0x00, 0x01, 0x0000 },
-    {   5, 0x00000024, 0x0024, 0x00, 0x02, 0x0000 },
-    {   5, 0x0400005c, 0x005c, 0x00, 0x04, 0x0000 },
-    {   6, 0x00000025, 0x0025, 0x00, 0x01, 0x0000 },
-    {   6, 0x0400005d, 0x005d, 0x00, 0x04, 0x0000 },
-    {   7, 0x0000005e, 0x005e, 0x00, 0x01, 0x0000 },
-    {   7, 0x01001252, 0x005e, 0x01, 0x02, 0x0000 },
-    {   7, 0x0400005e, 0x005e, 0x00, 0x04, 0x0000 },
-    {   8, 0x00000026, 0x0026, 0x00, 0x01, 0x0000 },
-    {   8, 0x0000007b, 0x007b, 0x00, 0x02, 0x0000 },
-    {   8, 0x0400005f, 0x005f, 0x00, 0x04, 0x0000 },
-    {   9, 0x0000002a, 0x002a, 0x00, 0x01, 0x0000 },
-    {   9, 0x0000005b, 0x005b, 0x00, 0x02, 0x0000 },
-    {   9, 0x01000003, 0xffff, 0x00, 0x04, 0x0000 },
-    {  10, 0x00000028, 0x0028, 0x00, 0x01, 0x0000 },
-    {  10, 0x0000005d, 0x005d, 0x00, 0x02, 0x0000 },
-    {  11, 0x00000029, 0x0029, 0x00, 0x01, 0x0000 },
-    {  11, 0x0000007d, 0x007d, 0x00, 0x02, 0x0000 },
-    {  12, 0x0000002d, 0x002d, 0x00, 0x00, 0x0000 },
-    {  12, 0x0000005f, 0x005f, 0x00, 0x01, 0x0000 },
-    {  12, 0x0000005c, 0x005c, 0x00, 0x02, 0x0000 },
-    {  12, 0x0400005f, 0x005f, 0x00, 0x04, 0x0000 },
-    {  12, 0x0400005f, 0x005f, 0x00, 0x05, 0x0000 },
-    {  13, 0x0000003d, 0x003d, 0x00, 0x00, 0x0000 },
-    {  13, 0x0000002b, 0x002b, 0x00, 0x01, 0x0000 },
-    {  14, 0x01000003, 0xffff, 0x00, 0x00, 0x0000 },
-    {  14, 0x01000000, 0xffff, 0x08, 0x0c, 0x0300 },
-    {  15, 0x01000001, 0xffff, 0x00, 0x00, 0x0000 },
-    {  16, 0x00000051, 0x0071, 0x02, 0x00, 0x0000 },
-    {  16, 0x00000051, 0x0051, 0x02, 0x01, 0x0000 },
-    {  16, 0x00000051, 0x0071, 0x02, 0x02, 0x0000 },
-    {  16, 0x00000051, 0x0051, 0x02, 0x03, 0x0000 },
-    {  16, 0x04000051, 0x0071, 0x02, 0x04, 0x0000 },
-    {  16, 0x04000051, 0x0071, 0x02, 0x05, 0x0000 },
-    {  16, 0x04000051, 0x0071, 0x02, 0x06, 0x0000 },
-    {  16, 0x04000051, 0x0071, 0x02, 0x07, 0x0000 },
-    {  16, 0x08000051, 0x0071, 0x02, 0x08, 0x0000 },
-    {  16, 0x08000051, 0x0071, 0x02, 0x09, 0x0000 },
-    {  16, 0x08000051, 0x0071, 0x02, 0x0a, 0x0000 },
-    {  16, 0x08000051, 0x0071, 0x02, 0x0b, 0x0000 },
-    {  16, 0x0c000051, 0x0071, 0x02, 0x0c, 0x0000 },
-    {  16, 0x0c000051, 0x0071, 0x02, 0x0d, 0x0000 },
-    {  16, 0x0c000051, 0x0071, 0x02, 0x0e, 0x0000 },
-    {  16, 0x0c000051, 0x0071, 0x02, 0x0f, 0x0000 },
-    {  17, 0x00000057, 0x0077, 0x02, 0x00, 0x0000 },
-    {  17, 0x00000057, 0x0057, 0x02, 0x01, 0x0000 },
-    {  17, 0x00000057, 0x0077, 0x02, 0x02, 0x0000 },
-    {  17, 0x00000057, 0x0057, 0x02, 0x03, 0x0000 },
-    {  17, 0x04000057, 0x0077, 0x02, 0x04, 0x0000 },
-    {  17, 0x04000057, 0x0077, 0x02, 0x05, 0x0000 },
-    {  17, 0x04000057, 0x0077, 0x02, 0x06, 0x0000 },
-    {  17, 0x04000057, 0x0077, 0x02, 0x07, 0x0000 },
-    {  17, 0x08000057, 0x0077, 0x02, 0x08, 0x0000 },
-    {  17, 0x08000057, 0x0077, 0x02, 0x09, 0x0000 },
-    {  17, 0x08000057, 0x0077, 0x02, 0x0a, 0x0000 },
-    {  17, 0x08000057, 0x0077, 0x02, 0x0b, 0x0000 },
-    {  17, 0x0c000057, 0x0077, 0x02, 0x0c, 0x0000 },
-    {  17, 0x0c000057, 0x0077, 0x02, 0x0d, 0x0000 },
-    {  17, 0x0c000057, 0x0077, 0x02, 0x0e, 0x0000 },
-    {  17, 0x0c000057, 0x0077, 0x02, 0x0f, 0x0000 },
-    {  18, 0x00000045, 0x0065, 0x02, 0x00, 0x0000 },
-    {  18, 0x00000045, 0x0045, 0x02, 0x01, 0x0000 },
-    {  18, 0x00000045, 0x0065, 0x02, 0x02, 0x0000 },
-    {  18, 0x00000045, 0x0045, 0x02, 0x03, 0x0000 },
-    {  18, 0x04000045, 0x0065, 0x02, 0x04, 0x0000 },
-    {  18, 0x04000045, 0x0065, 0x02, 0x05, 0x0000 },
-    {  18, 0x04000045, 0x0065, 0x02, 0x06, 0x0000 },
-    {  18, 0x04000045, 0x0065, 0x02, 0x07, 0x0000 },
-    {  18, 0x08000045, 0x0065, 0x02, 0x08, 0x0000 },
-    {  18, 0x08000045, 0x0065, 0x02, 0x09, 0x0000 },
-    {  18, 0x08000045, 0x0065, 0x02, 0x0a, 0x0000 },
-    {  18, 0x08000045, 0x0065, 0x02, 0x0b, 0x0000 },
-    {  18, 0x0c000045, 0x0065, 0x02, 0x0c, 0x0000 },
-    {  18, 0x0c000045, 0x0065, 0x02, 0x0d, 0x0000 },
-    {  18, 0x0c000045, 0x0065, 0x02, 0x0e, 0x0000 },
-    {  18, 0x0c000045, 0x0065, 0x02, 0x0f, 0x0000 },
-    {  19, 0x00000052, 0x0072, 0x02, 0x00, 0x0000 },
-    {  19, 0x00000052, 0x0052, 0x02, 0x01, 0x0000 },
-    {  19, 0x00000052, 0x0072, 0x02, 0x02, 0x0000 },
-    {  19, 0x00000052, 0x0052, 0x02, 0x03, 0x0000 },
-    {  19, 0x04000052, 0x0072, 0x02, 0x04, 0x0000 },
-    {  19, 0x04000052, 0x0072, 0x02, 0x05, 0x0000 },
-    {  19, 0x04000052, 0x0072, 0x02, 0x06, 0x0000 },
-    {  19, 0x04000052, 0x0072, 0x02, 0x07, 0x0000 },
-    {  19, 0x08000052, 0x0072, 0x02, 0x08, 0x0000 },
-    {  19, 0x08000052, 0x0072, 0x02, 0x09, 0x0000 },
-    {  19, 0x08000052, 0x0072, 0x02, 0x0a, 0x0000 },
-    {  19, 0x08000052, 0x0072, 0x02, 0x0b, 0x0000 },
-    {  19, 0x0c000052, 0x0072, 0x02, 0x0c, 0x0000 },
-    {  19, 0x0c000052, 0x0072, 0x02, 0x0d, 0x0000 },
-    {  19, 0x0c000052, 0x0072, 0x02, 0x0e, 0x0000 },
-    {  19, 0x0c000052, 0x0072, 0x02, 0x0f, 0x0000 },
-    {  20, 0x00000054, 0x0074, 0x02, 0x00, 0x0000 },
-    {  20, 0x00000054, 0x0054, 0x02, 0x01, 0x0000 },
-    {  20, 0x00000054, 0x0074, 0x02, 0x02, 0x0000 },
-    {  20, 0x00000054, 0x0054, 0x02, 0x03, 0x0000 },
-    {  20, 0x04000054, 0x0074, 0x02, 0x04, 0x0000 },
-    {  20, 0x04000054, 0x0074, 0x02, 0x05, 0x0000 },
-    {  20, 0x04000054, 0x0074, 0x02, 0x06, 0x0000 },
-    {  20, 0x04000054, 0x0074, 0x02, 0x07, 0x0000 },
-    {  20, 0x08000054, 0x0074, 0x02, 0x08, 0x0000 },
-    {  20, 0x08000054, 0x0074, 0x02, 0x09, 0x0000 },
-    {  20, 0x08000054, 0x0074, 0x02, 0x0a, 0x0000 },
-    {  20, 0x08000054, 0x0074, 0x02, 0x0b, 0x0000 },
-    {  20, 0x0c000054, 0x0074, 0x02, 0x0c, 0x0000 },
-    {  20, 0x0c000054, 0x0074, 0x02, 0x0d, 0x0000 },
-    {  20, 0x0c000054, 0x0074, 0x02, 0x0e, 0x0000 },
-    {  20, 0x0c000054, 0x0074, 0x02, 0x0f, 0x0000 },
-    {  21, 0x00000059, 0x0079, 0x02, 0x00, 0x0000 },
-    {  21, 0x00000059, 0x0059, 0x02, 0x01, 0x0000 },
-    {  21, 0x00000059, 0x0079, 0x02, 0x02, 0x0000 },
-    {  21, 0x00000059, 0x0059, 0x02, 0x03, 0x0000 },
-    {  21, 0x04000059, 0x0079, 0x02, 0x04, 0x0000 },
-    {  21, 0x04000059, 0x0079, 0x02, 0x05, 0x0000 },
-    {  21, 0x04000059, 0x0079, 0x02, 0x06, 0x0000 },
-    {  21, 0x04000059, 0x0079, 0x02, 0x07, 0x0000 },
-    {  21, 0x08000059, 0x0079, 0x02, 0x08, 0x0000 },
-    {  21, 0x08000059, 0x0079, 0x02, 0x09, 0x0000 },
-    {  21, 0x08000059, 0x0079, 0x02, 0x0a, 0x0000 },
-    {  21, 0x08000059, 0x0079, 0x02, 0x0b, 0x0000 },
-    {  21, 0x0c000059, 0x0079, 0x02, 0x0c, 0x0000 },
-    {  21, 0x0c000059, 0x0079, 0x02, 0x0d, 0x0000 },
-    {  21, 0x0c000059, 0x0079, 0x02, 0x0e, 0x0000 },
-    {  21, 0x0c000059, 0x0079, 0x02, 0x0f, 0x0000 },
-    {  22, 0x00000055, 0x0075, 0x02, 0x00, 0x0000 },
-    {  22, 0x00000055, 0x0055, 0x02, 0x01, 0x0000 },
-    {  22, 0x00000055, 0x0075, 0x02, 0x02, 0x0000 },
-    {  22, 0x00000055, 0x0055, 0x02, 0x03, 0x0000 },
-    {  22, 0x04000055, 0x0075, 0x02, 0x04, 0x0000 },
-    {  22, 0x04000055, 0x0075, 0x02, 0x05, 0x0000 },
-    {  22, 0x04000055, 0x0075, 0x02, 0x06, 0x0000 },
-    {  22, 0x04000055, 0x0075, 0x02, 0x07, 0x0000 },
-    {  22, 0x08000055, 0x0075, 0x02, 0x08, 0x0000 },
-    {  22, 0x08000055, 0x0075, 0x02, 0x09, 0x0000 },
-    {  22, 0x08000055, 0x0075, 0x02, 0x0a, 0x0000 },
-    {  22, 0x08000055, 0x0075, 0x02, 0x0b, 0x0000 },
-    {  22, 0x0c000055, 0x0075, 0x02, 0x0c, 0x0000 },
-    {  22, 0x0c000055, 0x0075, 0x02, 0x0d, 0x0000 },
-    {  22, 0x0c000055, 0x0075, 0x02, 0x0e, 0x0000 },
-    {  22, 0x0c000055, 0x0075, 0x02, 0x0f, 0x0000 },
-    {  23, 0x00000049, 0x0069, 0x02, 0x00, 0x0000 },
-    {  23, 0x00000049, 0x0049, 0x02, 0x01, 0x0000 },
-    {  23, 0x00000049, 0x0069, 0x02, 0x02, 0x0000 },
-    {  23, 0x00000049, 0x0049, 0x02, 0x03, 0x0000 },
-    {  23, 0x04000049, 0x0069, 0x02, 0x04, 0x0000 },
-    {  23, 0x04000049, 0x0069, 0x02, 0x05, 0x0000 },
-    {  23, 0x04000049, 0x0069, 0x02, 0x06, 0x0000 },
-    {  23, 0x04000049, 0x0069, 0x02, 0x07, 0x0000 },
-    {  23, 0x08000049, 0x0069, 0x02, 0x08, 0x0000 },
-    {  23, 0x08000049, 0x0069, 0x02, 0x09, 0x0000 },
-    {  23, 0x08000049, 0x0069, 0x02, 0x0a, 0x0000 },
-    {  23, 0x08000049, 0x0069, 0x02, 0x0b, 0x0000 },
-    {  23, 0x0c000049, 0x0069, 0x02, 0x0c, 0x0000 },
-    {  23, 0x0c000049, 0x0069, 0x02, 0x0d, 0x0000 },
-    {  23, 0x0c000049, 0x0069, 0x02, 0x0e, 0x0000 },
-    {  23, 0x0c000049, 0x0069, 0x02, 0x0f, 0x0000 },
-    {  24, 0x0000004f, 0x006f, 0x02, 0x00, 0x0000 },
-    {  24, 0x0000004f, 0x004f, 0x02, 0x01, 0x0000 },
-    {  24, 0x0000004f, 0x006f, 0x02, 0x02, 0x0000 },
-    {  24, 0x0000004f, 0x004f, 0x02, 0x03, 0x0000 },
-    {  24, 0x0400004f, 0x006f, 0x02, 0x04, 0x0000 },
-    {  24, 0x0400004f, 0x006f, 0x02, 0x05, 0x0000 },
-    {  24, 0x0400004f, 0x006f, 0x02, 0x06, 0x0000 },
-    {  24, 0x0400004f, 0x006f, 0x02, 0x07, 0x0000 },
-    {  24, 0x0800004f, 0x006f, 0x02, 0x08, 0x0000 },
-    {  24, 0x0800004f, 0x006f, 0x02, 0x09, 0x0000 },
-    {  24, 0x0800004f, 0x006f, 0x02, 0x0a, 0x0000 },
-    {  24, 0x0800004f, 0x006f, 0x02, 0x0b, 0x0000 },
-    {  24, 0x0c00004f, 0x006f, 0x02, 0x0c, 0x0000 },
-    {  24, 0x0c00004f, 0x006f, 0x02, 0x0d, 0x0000 },
-    {  24, 0x0c00004f, 0x006f, 0x02, 0x0e, 0x0000 },
-    {  24, 0x0c00004f, 0x006f, 0x02, 0x0f, 0x0000 },
-    {  25, 0x00000050, 0x0070, 0x02, 0x00, 0x0000 },
-    {  25, 0x00000050, 0x0050, 0x02, 0x01, 0x0000 },
-    {  25, 0x00000050, 0x0070, 0x02, 0x02, 0x0000 },
-    {  25, 0x00000050, 0x0050, 0x02, 0x03, 0x0000 },
-    {  25, 0x04000050, 0x0070, 0x02, 0x04, 0x0000 },
-    {  25, 0x04000050, 0x0070, 0x02, 0x05, 0x0000 },
-    {  25, 0x04000050, 0x0070, 0x02, 0x06, 0x0000 },
-    {  25, 0x04000050, 0x0070, 0x02, 0x07, 0x0000 },
-    {  25, 0x08000050, 0x0070, 0x02, 0x08, 0x0000 },
-    {  25, 0x08000050, 0x0070, 0x02, 0x09, 0x0000 },
-    {  25, 0x08000050, 0x0070, 0x02, 0x0a, 0x0000 },
-    {  25, 0x08000050, 0x0070, 0x02, 0x0b, 0x0000 },
-    {  25, 0x0c000050, 0x0070, 0x02, 0x0c, 0x0000 },
-    {  25, 0x0c000050, 0x0070, 0x02, 0x0d, 0x0000 },
-    {  25, 0x0c000050, 0x0070, 0x02, 0x0e, 0x0000 },
-    {  25, 0x0c000050, 0x0070, 0x02, 0x0f, 0x0000 },
-    {  26, 0x0000005b, 0x005b, 0x00, 0x00, 0x0000 },
-    {  26, 0x0000007b, 0x007b, 0x00, 0x01, 0x0000 },
-    {  26, 0x01000000, 0xffff, 0x00, 0x04, 0x0000 },
-    {  27, 0x0000005d, 0x005d, 0x00, 0x00, 0x0000 },
-    {  27, 0x0000007d, 0x007d, 0x00, 0x01, 0x0000 },
-    {  27, 0x0000007e, 0x007e, 0x00, 0x02, 0x0000 },
-    {  27, 0x0400005d, 0x005d, 0x00, 0x04, 0x0000 },
-    {  28, 0x0c00004d, 0x006d, 0x00, 0x08, 0x0000 },
-    {  29, 0x01000021, 0xffff, 0x04, 0x00, 0x0004 },
-    {  30, 0x00000041, 0x0061, 0x02, 0x00, 0x0000 },
-    {  30, 0x00000041, 0x0041, 0x02, 0x01, 0x0000 },
-    {  30, 0x00000041, 0x0061, 0x02, 0x02, 0x0000 },
-    {  30, 0x00000041, 0x0041, 0x02, 0x03, 0x0000 },
-    {  30, 0x04000041, 0x0061, 0x02, 0x04, 0x0000 },
-    {  30, 0x04000041, 0x0061, 0x02, 0x05, 0x0000 },
-    {  30, 0x04000041, 0x0061, 0x02, 0x06, 0x0000 },
-    {  30, 0x04000041, 0x0061, 0x02, 0x07, 0x0000 },
-    {  30, 0x08000041, 0x0061, 0x02, 0x08, 0x0000 },
-    {  30, 0x08000041, 0x0061, 0x02, 0x09, 0x0000 },
-    {  30, 0x08000041, 0x0061, 0x02, 0x0a, 0x0000 },
-    {  30, 0x08000041, 0x0061, 0x02, 0x0b, 0x0000 },
-    {  30, 0x0c000041, 0x0061, 0x02, 0x0c, 0x0000 },
-    {  30, 0x0c000041, 0x0061, 0x02, 0x0d, 0x0000 },
-    {  30, 0x0c000041, 0x0061, 0x02, 0x0e, 0x0000 },
-    {  30, 0x0c000041, 0x0061, 0x02, 0x0f, 0x0000 },
-    {  31, 0x00000053, 0x0073, 0x02, 0x00, 0x0000 },
-    {  31, 0x00000053, 0x0053, 0x02, 0x01, 0x0000 },
-    {  31, 0x00000053, 0x0073, 0x02, 0x02, 0x0000 },
-    {  31, 0x00000053, 0x0053, 0x02, 0x03, 0x0000 },
-    {  31, 0x04000053, 0x0073, 0x02, 0x04, 0x0000 },
-    {  31, 0x04000053, 0x0073, 0x02, 0x05, 0x0000 },
-    {  31, 0x04000053, 0x0073, 0x02, 0x06, 0x0000 },
-    {  31, 0x04000053, 0x0073, 0x02, 0x07, 0x0000 },
-    {  31, 0x08000053, 0x0073, 0x02, 0x08, 0x0000 },
-    {  31, 0x08000053, 0x0073, 0x02, 0x09, 0x0000 },
-    {  31, 0x08000053, 0x0073, 0x02, 0x0a, 0x0000 },
-    {  31, 0x08000053, 0x0073, 0x02, 0x0b, 0x0000 },
-    {  31, 0x0c000053, 0x0073, 0x02, 0x0c, 0x0000 },
-    {  31, 0x0c000053, 0x0073, 0x02, 0x0d, 0x0000 },
-    {  31, 0x0c000053, 0x0073, 0x02, 0x0e, 0x0000 },
-    {  31, 0x0c000053, 0x0073, 0x02, 0x0f, 0x0000 },
-    {  32, 0x00000044, 0x0064, 0x02, 0x00, 0x0000 },
-    {  32, 0x00000044, 0x0044, 0x02, 0x01, 0x0000 },
-    {  32, 0x00000044, 0x0064, 0x02, 0x02, 0x0000 },
-    {  32, 0x00000044, 0x0044, 0x02, 0x03, 0x0000 },
-    {  32, 0x04000044, 0x0064, 0x02, 0x04, 0x0000 },
-    {  32, 0x04000044, 0x0064, 0x02, 0x05, 0x0000 },
-    {  32, 0x04000044, 0x0064, 0x02, 0x06, 0x0000 },
-    {  32, 0x04000044, 0x0064, 0x02, 0x07, 0x0000 },
-    {  32, 0x08000044, 0x0064, 0x02, 0x08, 0x0000 },
-    {  32, 0x08000044, 0x0064, 0x02, 0x09, 0x0000 },
-    {  32, 0x08000044, 0x0064, 0x02, 0x0a, 0x0000 },
-    {  32, 0x08000044, 0x0064, 0x02, 0x0b, 0x0000 },
-    {  32, 0x0c000044, 0x0064, 0x02, 0x0c, 0x0000 },
-    {  32, 0x0c000044, 0x0064, 0x02, 0x0d, 0x0000 },
-    {  32, 0x0c000044, 0x0064, 0x02, 0x0e, 0x0000 },
-    {  32, 0x0c000044, 0x0064, 0x02, 0x0f, 0x0000 },
-    {  33, 0x00000046, 0x0066, 0x02, 0x00, 0x0000 },
-    {  33, 0x00000046, 0x0046, 0x02, 0x01, 0x0000 },
-    {  33, 0x00000046, 0x0066, 0x02, 0x02, 0x0000 },
-    {  33, 0x00000046, 0x0046, 0x02, 0x03, 0x0000 },
-    {  33, 0x04000046, 0x0066, 0x02, 0x04, 0x0000 },
-    {  33, 0x04000046, 0x0066, 0x02, 0x05, 0x0000 },
-    {  33, 0x04000046, 0x0066, 0x02, 0x06, 0x0000 },
-    {  33, 0x04000046, 0x0066, 0x02, 0x07, 0x0000 },
-    {  33, 0x08000046, 0x0066, 0x02, 0x08, 0x0000 },
-    {  33, 0x08000046, 0x0066, 0x02, 0x09, 0x0000 },
-    {  33, 0x08000046, 0x0066, 0x02, 0x0a, 0x0000 },
-    {  33, 0x08000046, 0x0066, 0x02, 0x0b, 0x0000 },
-    {  33, 0x0c000046, 0x0066, 0x02, 0x0c, 0x0000 },
-    {  33, 0x0c000046, 0x0066, 0x02, 0x0d, 0x0000 },
-    {  33, 0x0c000046, 0x0066, 0x02, 0x0e, 0x0000 },
-    {  33, 0x0c000046, 0x0066, 0x02, 0x0f, 0x0000 },
-    {  34, 0x00000047, 0x0067, 0x02, 0x00, 0x0000 },
-    {  34, 0x00000047, 0x0047, 0x02, 0x01, 0x0000 },
-    {  34, 0x00000047, 0x0067, 0x02, 0x02, 0x0000 },
-    {  34, 0x00000047, 0x0047, 0x02, 0x03, 0x0000 },
-    {  34, 0x04000047, 0x0067, 0x02, 0x04, 0x0000 },
-    {  34, 0x04000047, 0x0067, 0x02, 0x05, 0x0000 },
-    {  34, 0x04000047, 0x0067, 0x02, 0x06, 0x0000 },
-    {  34, 0x04000047, 0x0067, 0x02, 0x07, 0x0000 },
-    {  34, 0x08000047, 0x0067, 0x02, 0x08, 0x0000 },
-    {  34, 0x08000047, 0x0067, 0x02, 0x09, 0x0000 },
-    {  34, 0x08000047, 0x0067, 0x02, 0x0a, 0x0000 },
-    {  34, 0x08000047, 0x0067, 0x02, 0x0b, 0x0000 },
-    {  34, 0x0c000047, 0x0067, 0x02, 0x0c, 0x0000 },
-    {  34, 0x0c000047, 0x0067, 0x02, 0x0d, 0x0000 },
-    {  34, 0x0c000047, 0x0067, 0x02, 0x0e, 0x0000 },
-    {  34, 0x0c000047, 0x0067, 0x02, 0x0f, 0x0000 },
-    {  35, 0x00000048, 0x0068, 0x02, 0x00, 0x0000 },
-    {  35, 0x00000048, 0x0048, 0x02, 0x01, 0x0000 },
-    {  35, 0x00000048, 0x0068, 0x02, 0x02, 0x0000 },
-    {  35, 0x00000048, 0x0048, 0x02, 0x03, 0x0000 },
-    {  35, 0x04000048, 0x0068, 0x02, 0x04, 0x0000 },
-    {  35, 0x04000048, 0x0068, 0x02, 0x05, 0x0000 },
-    {  35, 0x04000048, 0x0068, 0x02, 0x06, 0x0000 },
-    {  35, 0x04000048, 0x0068, 0x02, 0x07, 0x0000 },
-    {  35, 0x08000048, 0x0068, 0x02, 0x08, 0x0000 },
-    {  35, 0x08000048, 0x0068, 0x02, 0x09, 0x0000 },
-    {  35, 0x08000048, 0x0068, 0x02, 0x0a, 0x0000 },
-    {  35, 0x08000048, 0x0068, 0x02, 0x0b, 0x0000 },
-    {  35, 0x0c000048, 0x0068, 0x02, 0x0c, 0x0000 },
-    {  35, 0x0c000048, 0x0068, 0x02, 0x0d, 0x0000 },
-    {  35, 0x0c000048, 0x0068, 0x02, 0x0e, 0x0000 },
-    {  35, 0x0c000048, 0x0068, 0x02, 0x0f, 0x0000 },
-    {  36, 0x0000004a, 0x006a, 0x02, 0x00, 0x0000 },
-    {  36, 0x0000004a, 0x004a, 0x02, 0x01, 0x0000 },
-    {  36, 0x0000004a, 0x006a, 0x02, 0x02, 0x0000 },
-    {  36, 0x0000004a, 0x004a, 0x02, 0x03, 0x0000 },
-    {  36, 0x0400004a, 0x006a, 0x02, 0x04, 0x0000 },
-    {  36, 0x0400004a, 0x006a, 0x02, 0x05, 0x0000 },
-    {  36, 0x0400004a, 0x006a, 0x02, 0x06, 0x0000 },
-    {  36, 0x0400004a, 0x006a, 0x02, 0x07, 0x0000 },
-    {  36, 0x0800004a, 0x006a, 0x02, 0x08, 0x0000 },
-    {  36, 0x0800004a, 0x006a, 0x02, 0x09, 0x0000 },
-    {  36, 0x0800004a, 0x006a, 0x02, 0x0a, 0x0000 },
-    {  36, 0x0800004a, 0x006a, 0x02, 0x0b, 0x0000 },
-    {  36, 0x0c00004a, 0x006a, 0x02, 0x0c, 0x0000 },
-    {  36, 0x0c00004a, 0x006a, 0x02, 0x0d, 0x0000 },
-    {  36, 0x0c00004a, 0x006a, 0x02, 0x0e, 0x0000 },
-    {  36, 0x0c00004a, 0x006a, 0x02, 0x0f, 0x0000 },
-    {  37, 0x0000004b, 0x006b, 0x02, 0x00, 0x0000 },
-    {  37, 0x0000004b, 0x004b, 0x02, 0x01, 0x0000 },
-    {  37, 0x0000004b, 0x006b, 0x02, 0x02, 0x0000 },
-    {  37, 0x0000004b, 0x004b, 0x02, 0x03, 0x0000 },
-    {  37, 0x0400004b, 0x006b, 0x02, 0x04, 0x0000 },
-    {  37, 0x0400004b, 0x006b, 0x02, 0x05, 0x0000 },
-    {  37, 0x0400004b, 0x006b, 0x02, 0x06, 0x0000 },
-    {  37, 0x0400004b, 0x006b, 0x02, 0x07, 0x0000 },
-    {  37, 0x0800004b, 0x006b, 0x02, 0x08, 0x0000 },
-    {  37, 0x0800004b, 0x006b, 0x02, 0x09, 0x0000 },
-    {  37, 0x0800004b, 0x006b, 0x02, 0x0a, 0x0000 },
-    {  37, 0x0800004b, 0x006b, 0x02, 0x0b, 0x0000 },
-    {  37, 0x0c00004b, 0x006b, 0x02, 0x0c, 0x0000 },
-    {  37, 0x0c00004b, 0x006b, 0x02, 0x0d, 0x0000 },
-    {  37, 0x0c00004b, 0x006b, 0x02, 0x0e, 0x0000 },
-    {  37, 0x0c00004b, 0x006b, 0x02, 0x0f, 0x0000 },
-    {  38, 0x0000004c, 0x006c, 0x02, 0x00, 0x0000 },
-    {  38, 0x0000004c, 0x004c, 0x02, 0x01, 0x0000 },
-    {  38, 0x0000004c, 0x006c, 0x02, 0x02, 0x0000 },
-    {  38, 0x0000004c, 0x004c, 0x02, 0x03, 0x0000 },
-    {  38, 0x0400004c, 0x006c, 0x02, 0x04, 0x0000 },
-    {  38, 0x0400004c, 0x006c, 0x02, 0x05, 0x0000 },
-    {  38, 0x0400004c, 0x006c, 0x02, 0x06, 0x0000 },
-    {  38, 0x0400004c, 0x006c, 0x02, 0x07, 0x0000 },
-    {  38, 0x0800004c, 0x006c, 0x02, 0x08, 0x0000 },
-    {  38, 0x0800004c, 0x006c, 0x02, 0x09, 0x0000 },
-    {  38, 0x0800004c, 0x006c, 0x02, 0x0a, 0x0000 },
-    {  38, 0x0800004c, 0x006c, 0x02, 0x0b, 0x0000 },
-    {  38, 0x0c00004c, 0x006c, 0x02, 0x0c, 0x0000 },
-    {  38, 0x0c00004c, 0x006c, 0x02, 0x0d, 0x0000 },
-    {  38, 0x0c00004c, 0x006c, 0x02, 0x0e, 0x0000 },
-    {  38, 0x0c00004c, 0x006c, 0x02, 0x0f, 0x0000 },
-    {  39, 0x0000003b, 0x003b, 0x00, 0x00, 0x0000 },
-    {  39, 0x0000003a, 0x003a, 0x00, 0x01, 0x0000 },
-    {  40, 0x00000027, 0x0027, 0x00, 0x00, 0x0000 },
-    {  40, 0x00000022, 0x0022, 0x00, 0x01, 0x0000 },
-    {  40, 0x01001251, 0x0027, 0x01, 0x02, 0x0000 },
-    {  40, 0x01001257, 0x0022, 0x01, 0x03, 0x0000 },
-    {  40, 0x04000047, 0x0067, 0x00, 0x04, 0x0000 },
-    {  41, 0x00000060, 0x0060, 0x00, 0x00, 0x0000 },
-    {  41, 0x0000007e, 0x007e, 0x00, 0x01, 0x0000 },
-    {  41, 0x01001250, 0x0060, 0x01, 0x02, 0x0000 },
-    {  41, 0x01001253, 0x007e, 0x01, 0x03, 0x0000 },
-    {  42, 0x01000020, 0xffff, 0x04, 0x00, 0x0001 },
-    {  43, 0x0000005c, 0x005c, 0x00, 0x00, 0x0000 },
-    {  43, 0x0000007c, 0x007c, 0x00, 0x01, 0x0000 },
-    {  43, 0x0400005c, 0x005c, 0x00, 0x04, 0x0000 },
-    {  44, 0x0000005a, 0x007a, 0x02, 0x00, 0x0000 },
-    {  44, 0x0000005a, 0x005a, 0x02, 0x01, 0x0000 },
-    {  44, 0x0000005a, 0x007a, 0x02, 0x02, 0x0000 },
-    {  44, 0x0000005a, 0x005a, 0x02, 0x03, 0x0000 },
-    {  44, 0x0400005a, 0x007a, 0x02, 0x04, 0x0000 },
-    {  44, 0x0400005a, 0x007a, 0x02, 0x05, 0x0000 },
-    {  44, 0x0400005a, 0x007a, 0x02, 0x06, 0x0000 },
-    {  44, 0x0400005a, 0x007a, 0x02, 0x07, 0x0000 },
-    {  44, 0x0800005a, 0x007a, 0x02, 0x08, 0x0000 },
-    {  44, 0x0800005a, 0x007a, 0x02, 0x09, 0x0000 },
-    {  44, 0x0800005a, 0x007a, 0x02, 0x0a, 0x0000 },
-    {  44, 0x0800005a, 0x007a, 0x02, 0x0b, 0x0000 },
-    {  44, 0x0c00005a, 0x007a, 0x02, 0x0c, 0x0000 },
-    {  44, 0x0c00005a, 0x007a, 0x02, 0x0d, 0x0000 },
-    {  44, 0x0c00005a, 0x007a, 0x02, 0x0e, 0x0000 },
-    {  44, 0x0c00005a, 0x007a, 0x02, 0x0f, 0x0000 },
-    {  45, 0x00000058, 0x0078, 0x02, 0x00, 0x0000 },
-    {  45, 0x00000058, 0x0058, 0x02, 0x01, 0x0000 },
-    {  45, 0x00000058, 0x0078, 0x02, 0x02, 0x0000 },
-    {  45, 0x00000058, 0x0058, 0x02, 0x03, 0x0000 },
-    {  45, 0x04000058, 0x0078, 0x02, 0x04, 0x0000 },
-    {  45, 0x04000058, 0x0078, 0x02, 0x05, 0x0000 },
-    {  45, 0x04000058, 0x0078, 0x02, 0x06, 0x0000 },
-    {  45, 0x04000058, 0x0078, 0x02, 0x07, 0x0000 },
-    {  45, 0x08000058, 0x0078, 0x02, 0x08, 0x0000 },
-    {  45, 0x08000058, 0x0078, 0x02, 0x09, 0x0000 },
-    {  45, 0x08000058, 0x0078, 0x02, 0x0a, 0x0000 },
-    {  45, 0x08000058, 0x0078, 0x02, 0x0b, 0x0000 },
-    {  45, 0x0c000058, 0x0078, 0x02, 0x0c, 0x0000 },
-    {  45, 0x0c000058, 0x0078, 0x02, 0x0d, 0x0000 },
-    {  45, 0x0c000058, 0x0078, 0x02, 0x0e, 0x0000 },
-    {  45, 0x0c000058, 0x0078, 0x02, 0x0f, 0x0000 },
-    {  46, 0x00000043, 0x0063, 0x02, 0x00, 0x0000 },
-    {  46, 0x00000043, 0x0043, 0x02, 0x01, 0x0000 },
-    {  46, 0x00000043, 0x0063, 0x02, 0x02, 0x0000 },
-    {  46, 0x00000043, 0x0043, 0x02, 0x03, 0x0000 },
-    {  46, 0x04000043, 0x0063, 0x02, 0x04, 0x0000 },
-    {  46, 0x04000043, 0x0063, 0x02, 0x05, 0x0000 },
-    {  46, 0x04000043, 0x0063, 0x02, 0x06, 0x0000 },
-    {  46, 0x04000043, 0x0063, 0x02, 0x07, 0x0000 },
-    {  46, 0x08000043, 0x0063, 0x02, 0x08, 0x0000 },
-    {  46, 0x08000043, 0x0063, 0x02, 0x09, 0x0000 },
-    {  46, 0x08000043, 0x0063, 0x02, 0x0a, 0x0000 },
-    {  46, 0x08000043, 0x0063, 0x02, 0x0b, 0x0000 },
-    {  46, 0x0c000043, 0x0063, 0x02, 0x0c, 0x0000 },
-    {  46, 0x0c000043, 0x0063, 0x02, 0x0d, 0x0000 },
-    {  46, 0x0c000043, 0x0063, 0x02, 0x0e, 0x0000 },
-    {  46, 0x0c000043, 0x0063, 0x02, 0x0f, 0x0000 },
-    {  47, 0x00000056, 0x0076, 0x02, 0x00, 0x0000 },
-    {  47, 0x00000056, 0x0056, 0x02, 0x01, 0x0000 },
-    {  47, 0x00000056, 0x0076, 0x02, 0x02, 0x0000 },
-    {  47, 0x00000056, 0x0056, 0x02, 0x03, 0x0000 },
-    {  47, 0x04000056, 0x0076, 0x02, 0x04, 0x0000 },
-    {  47, 0x04000056, 0x0076, 0x02, 0x05, 0x0000 },
-    {  47, 0x04000056, 0x0076, 0x02, 0x06, 0x0000 },
-    {  47, 0x04000056, 0x0076, 0x02, 0x07, 0x0000 },
-    {  47, 0x08000056, 0x0076, 0x02, 0x08, 0x0000 },
-    {  47, 0x08000056, 0x0076, 0x02, 0x09, 0x0000 },
-    {  47, 0x08000056, 0x0076, 0x02, 0x0a, 0x0000 },
-    {  47, 0x08000056, 0x0076, 0x02, 0x0b, 0x0000 },
-    {  47, 0x0c000056, 0x0076, 0x02, 0x0c, 0x0000 },
-    {  47, 0x0c000056, 0x0076, 0x02, 0x0d, 0x0000 },
-    {  47, 0x0c000056, 0x0076, 0x02, 0x0e, 0x0000 },
-    {  47, 0x0c000056, 0x0076, 0x02, 0x0f, 0x0000 },
-    {  48, 0x00000042, 0x0062, 0x02, 0x00, 0x0000 },
-    {  48, 0x00000042, 0x0042, 0x02, 0x01, 0x0000 },
-    {  48, 0x00000042, 0x0062, 0x02, 0x02, 0x0000 },
-    {  48, 0x00000042, 0x0042, 0x02, 0x03, 0x0000 },
-    {  48, 0x04000042, 0x0062, 0x02, 0x04, 0x0000 },
-    {  48, 0x04000042, 0x0062, 0x02, 0x05, 0x0000 },
-    {  48, 0x04000042, 0x0062, 0x02, 0x06, 0x0000 },
-    {  48, 0x04000042, 0x0062, 0x02, 0x07, 0x0000 },
-    {  48, 0x08000042, 0x0062, 0x02, 0x08, 0x0000 },
-    {  48, 0x08000042, 0x0062, 0x02, 0x09, 0x0000 },
-    {  48, 0x08000042, 0x0062, 0x02, 0x0a, 0x0000 },
-    {  48, 0x08000042, 0x0062, 0x02, 0x0b, 0x0000 },
-    {  48, 0x0c000042, 0x0062, 0x02, 0x0c, 0x0000 },
-    {  48, 0x0c000042, 0x0062, 0x02, 0x0d, 0x0000 },
-    {  48, 0x0c000042, 0x0062, 0x02, 0x0e, 0x0000 },
-    {  48, 0x0c000042, 0x0062, 0x02, 0x0f, 0x0000 },
-    {  49, 0x0000004e, 0x006e, 0x02, 0x00, 0x0000 },
-    {  49, 0x0000004e, 0x004e, 0x02, 0x01, 0x0000 },
-    {  49, 0x0000004e, 0x006e, 0x02, 0x02, 0x0000 },
-    {  49, 0x0000004e, 0x004e, 0x02, 0x03, 0x0000 },
-    {  49, 0x0400004e, 0x006e, 0x02, 0x04, 0x0000 },
-    {  49, 0x0400004e, 0x006e, 0x02, 0x05, 0x0000 },
-    {  49, 0x0400004e, 0x006e, 0x02, 0x06, 0x0000 },
-    {  49, 0x0400004e, 0x006e, 0x02, 0x07, 0x0000 },
-    {  49, 0x0800004e, 0x006e, 0x02, 0x08, 0x0000 },
-    {  49, 0x0800004e, 0x006e, 0x02, 0x09, 0x0000 },
-    {  49, 0x0800004e, 0x006e, 0x02, 0x0a, 0x0000 },
-    {  49, 0x0800004e, 0x006e, 0x02, 0x0b, 0x0000 },
-    {  49, 0x0c00004e, 0x006e, 0x02, 0x0c, 0x0000 },
-    {  49, 0x0c00004e, 0x006e, 0x02, 0x0d, 0x0000 },
-    {  49, 0x0c00004e, 0x006e, 0x02, 0x0e, 0x0000 },
-    {  49, 0x0c00004e, 0x006e, 0x02, 0x0f, 0x0000 },
-    {  50, 0x0000004d, 0x006d, 0x02, 0x00, 0x0000 },
-    {  50, 0x0000004d, 0x004d, 0x02, 0x01, 0x0000 },
-    {  50, 0x0000004d, 0x006d, 0x02, 0x02, 0x0000 },
-    {  50, 0x0000004d, 0x004d, 0x02, 0x03, 0x0000 },
-    {  50, 0x0400004d, 0x006d, 0x02, 0x04, 0x0000 },
-    {  50, 0x0400004d, 0x006d, 0x02, 0x05, 0x0000 },
-    {  50, 0x0400004d, 0x006d, 0x02, 0x06, 0x0000 },
-    {  50, 0x0400004d, 0x006d, 0x02, 0x07, 0x0000 },
-    {  50, 0x0800004d, 0x006d, 0x02, 0x08, 0x0000 },
-    {  50, 0x0800004d, 0x006d, 0x02, 0x09, 0x0000 },
-    {  50, 0x0800004d, 0x006d, 0x02, 0x0a, 0x0000 },
-    {  50, 0x0800004d, 0x006d, 0x02, 0x0b, 0x0000 },
-    {  50, 0x0c00004d, 0x006d, 0x02, 0x0c, 0x0000 },
-    {  50, 0x0c00004d, 0x006d, 0x02, 0x0d, 0x0000 },
-    {  50, 0x0c00004d, 0x006d, 0x02, 0x0e, 0x0000 },
-    {  50, 0x0c00004d, 0x006d, 0x02, 0x0f, 0x0000 },
-    {  51, 0x0000002c, 0x002c, 0x00, 0x00, 0x0000 },
-    {  51, 0x0000003c, 0x003c, 0x00, 0x01, 0x0000 },
-    {  51, 0x0100125b, 0x002c, 0x01, 0x02, 0x0000 },
-    {  52, 0x0000002e, 0x002e, 0x00, 0x00, 0x0000 },
-    {  52, 0x0000003e, 0x003e, 0x00, 0x01, 0x0000 },
-    {  52, 0x01001120, 0xffff, 0x00, 0x02, 0x0000 },
-    {  53, 0x0000002f, 0x002f, 0x00, 0x00, 0x0000 },
-    {  53, 0x0000003f, 0x003f, 0x00, 0x01, 0x0000 },
-    {  53, 0x01000003, 0xffff, 0x00, 0x04, 0x0000 },
-    {  54, 0x01000020, 0xffff, 0x04, 0x00, 0x0001 },
-    {  55, 0x2000002a, 0x002a, 0x00, 0x00, 0x0000 },
-    {  56, 0x01000023, 0xffff, 0x04, 0x00, 0x0008 },
-    {  57, 0x00000020, 0x0020, 0x00, 0x00, 0x0000 },
-    {  58, 0x01000024, 0xffff, 0x00, 0x00, 0x0000 },
-    {  59, 0x01000030, 0xffff, 0x00, 0x00, 0x0000 },
-    {  59, 0x0100003c, 0xffff, 0x00, 0x01, 0x0000 },
-    {  59, 0x01000048, 0xffff, 0x00, 0x04, 0x0000 },
-    {  59, 0x01000000, 0xffff, 0x08, 0x0c, 0x0100 },
-    {  60, 0x01000031, 0xffff, 0x00, 0x00, 0x0000 },
-    {  60, 0x0100003d, 0xffff, 0x00, 0x01, 0x0000 },
-    {  60, 0x01000049, 0xffff, 0x00, 0x04, 0x0000 },
-    {  60, 0x01000000, 0xffff, 0x08, 0x0c, 0x0101 },
-    {  61, 0x01000032, 0xffff, 0x00, 0x00, 0x0000 },
-    {  61, 0x0100003e, 0xffff, 0x00, 0x01, 0x0000 },
-    {  61, 0x0100004a, 0xffff, 0x00, 0x04, 0x0000 },
-    {  61, 0x01000000, 0xffff, 0x08, 0x0c, 0x0102 },
-    {  62, 0x01000033, 0xffff, 0x00, 0x00, 0x0000 },
-    {  62, 0x0100003f, 0xffff, 0x00, 0x01, 0x0000 },
-    {  62, 0x0100004b, 0xffff, 0x00, 0x04, 0x0000 },
-    {  62, 0x01000000, 0xffff, 0x08, 0x0c, 0x0103 },
-    {  63, 0x01000034, 0xffff, 0x00, 0x00, 0x0000 },
-    {  63, 0x01000040, 0xffff, 0x00, 0x01, 0x0000 },
-    {  63, 0x0100004c, 0xffff, 0x00, 0x04, 0x0000 },
-    {  63, 0x01000000, 0xffff, 0x08, 0x0c, 0x0104 },
-    {  64, 0x01000035, 0xffff, 0x00, 0x00, 0x0000 },
-    {  64, 0x01000041, 0xffff, 0x00, 0x01, 0x0000 },
-    {  64, 0x0100004d, 0xffff, 0x00, 0x04, 0x0000 },
-    {  64, 0x01000000, 0xffff, 0x08, 0x0c, 0x0105 },
-    {  65, 0x01000036, 0xffff, 0x00, 0x00, 0x0000 },
-    {  65, 0x01000042, 0xffff, 0x00, 0x01, 0x0000 },
-    {  65, 0x0100004e, 0xffff, 0x00, 0x04, 0x0000 },
-    {  65, 0x01000000, 0xffff, 0x08, 0x0c, 0x0106 },
-    {  66, 0x01000037, 0xffff, 0x00, 0x00, 0x0000 },
-    {  66, 0x01000043, 0xffff, 0x00, 0x01, 0x0000 },
-    {  66, 0x0100004f, 0xffff, 0x00, 0x04, 0x0000 },
-    {  66, 0x01000000, 0xffff, 0x08, 0x0c, 0x0107 },
-    {  67, 0x01000038, 0xffff, 0x00, 0x00, 0x0000 },
-    {  67, 0x01000044, 0xffff, 0x00, 0x01, 0x0000 },
-    {  67, 0x01000050, 0xffff, 0x00, 0x04, 0x0000 },
-    {  67, 0x01000000, 0xffff, 0x08, 0x0c, 0x0108 },
-    {  68, 0x01000039, 0xffff, 0x00, 0x00, 0x0000 },
-    {  68, 0x01000045, 0xffff, 0x00, 0x01, 0x0000 },
-    {  68, 0x01000051, 0xffff, 0x00, 0x04, 0x0000 },
-    {  68, 0x01000000, 0xffff, 0x08, 0x0c, 0x0109 },
-    {  69, 0x01000025, 0xffff, 0x00, 0x00, 0x0000 },
-    {  70, 0x01000026, 0xffff, 0x00, 0x00, 0x0000 },
-    {  70, 0x01000026, 0xffff, 0x00, 0x08, 0x0000 },
-    {  71, 0x01000010, 0xffff, 0x10, 0x00, 0x0000 },
-    {  71, 0x20000037, 0x0037, 0x10, 0x01, 0x0000 },
-    {  72, 0x01000013, 0xffff, 0x10, 0x00, 0x0000 },
-    {  72, 0x20000038, 0x0038, 0x10, 0x01, 0x0000 },
-    {  73, 0x01000016, 0xffff, 0x10, 0x00, 0x0000 },
-    {  73, 0x20000039, 0x0039, 0x10, 0x01, 0x0000 },
-    {  74, 0x2000002d, 0x002d, 0x00, 0x00, 0x0000 },
-    {  75, 0x01000012, 0xffff, 0x10, 0x00, 0x0000 },
-    {  75, 0x20000034, 0x0034, 0x10, 0x01, 0x0000 },
-    {  76, 0x20000035, 0x0035, 0x10, 0x01, 0x0000 },
-    {  77, 0x01000014, 0xffff, 0x10, 0x00, 0x0000 },
-    {  77, 0x20000036, 0x0036, 0x10, 0x01, 0x0000 },
-    {  78, 0x2000002b, 0x002b, 0x00, 0x00, 0x0000 },
-    {  79, 0x01000011, 0xffff, 0x10, 0x00, 0x0000 },
-    {  79, 0x20000031, 0x0031, 0x10, 0x01, 0x0000 },
-    {  80, 0x01000015, 0xffff, 0x10, 0x00, 0x0000 },
-    {  80, 0x20000032, 0x0032, 0x10, 0x01, 0x0000 },
-    {  81, 0x01000017, 0xffff, 0x10, 0x00, 0x0000 },
-    {  81, 0x20000033, 0x0033, 0x10, 0x01, 0x0000 },
-    {  82, 0x01000006, 0xffff, 0x10, 0x00, 0x0000 },
-    {  82, 0x20000030, 0x0030, 0x10, 0x01, 0x0000 },
-    {  83, 0x01000007, 0xffff, 0x10, 0x00, 0x0000 },
-    {  83, 0x2000002e, 0x002e, 0x10, 0x01, 0x0000 },
-    {  83, 0x01000000, 0xffff, 0x08, 0x06, 0x0200 },
-    {  83, 0x01000000, 0xffff, 0x08, 0x0c, 0x0200 },
-    {  86, 0x0000003c, 0x003c, 0x00, 0x00, 0x0000 },
-    {  86, 0x0000003e, 0x003e, 0x00, 0x01, 0x0000 },
-    {  86, 0x0000007c, 0x007c, 0x00, 0x02, 0x0000 },
-    {  87, 0x0100003a, 0xffff, 0x00, 0x00, 0x0000 },
-    {  87, 0x01000046, 0xffff, 0x00, 0x01, 0x0000 },
-    {  87, 0x01000052, 0xffff, 0x00, 0x04, 0x0000 },
-    {  87, 0x01000000, 0xffff, 0x08, 0x0c, 0x010a },
-    {  88, 0x0100003b, 0xffff, 0x00, 0x00, 0x0000 },
-    {  88, 0x01000047, 0xffff, 0x00, 0x01, 0x0000 },
-    {  88, 0x01000000, 0xffff, 0x08, 0x0c, 0x010b },
-    {  92, 0x01001123, 0xffff, 0x00, 0x00, 0x0000 },
-    {  93, 0x01001127, 0xffff, 0x00, 0x00, 0x0000 },
-    {  94, 0x01001122, 0xffff, 0x00, 0x00, 0x0000 },
-    {  96, 0x21000005, 0xffff, 0x00, 0x00, 0x0000 },
-    {  97, 0x01000021, 0xffff, 0x04, 0x00, 0x0004 },
-    {  98, 0x2000002f, 0x002f, 0x00, 0x00, 0x0000 },
-    {  99, 0x0400005c, 0x005c, 0x00, 0x00, 0x0000 },
-    { 100, 0x01001103, 0xffff, 0x04, 0x00, 0x0002 },
-    { 102, 0x01000010, 0xffff, 0x00, 0x00, 0x0000 },
-    { 104, 0x01000016, 0xffff, 0x00, 0x00, 0x0000 },
-    { 105, 0x01000000, 0xffff, 0x08, 0x0c, 0x0180 },
-    { 106, 0x01000000, 0xffff, 0x08, 0x0c, 0x0181 },
-    { 107, 0x01000011, 0xffff, 0x00, 0x00, 0x0000 },
-    { 109, 0x01000017, 0xffff, 0x00, 0x00, 0x0000 },
-    { 110, 0x01000006, 0xffff, 0x00, 0x00, 0x0000 },
-    { 111, 0x01000007, 0xffff, 0x00, 0x00, 0x0000 },
-    { 111, 0x01000000, 0xffff, 0x08, 0x06, 0x0200 },
-    { 111, 0x01000000, 0xffff, 0x08, 0x0c, 0x0200 },
-
-    // Additional keymaps for keyboards
-    { 122, Qt::Key_Hangul,  0Xffff, 0x00, 0x00, 0x0000 },
-    { 125, Qt::Key_Super_L, 0xffff, 0x00, 0x00, 0x0000 }, // LEFT_META (Windows key)
-    { 126, Qt::Key_Super_L, 0xffff, 0x00, 0x00, 0x0000 }, // RIGHT_COMMAND (Mac key)
-
+const QEmulatorKeyboardMap::Composing QEmulatorKeyboardHandler::s_keycompose_default[] = {
+    { 0x0060, 0x0041, 0x00c0 },
+    { 0x0060, 0x0061, 0x00e0 },
+    { 0x0027, 0x0041, 0x00c1 },
+    { 0x0027, 0x0061, 0x00e1 },
+    { 0x005e, 0x0041, 0x00c2 },
+    { 0x005e, 0x0061, 0x00e2 },
+    { 0x007e, 0x0041, 0x00c3 },
+    { 0x007e, 0x0061, 0x00e3 },
+    { 0x0022, 0x0041, 0x00c4 },
+    { 0x0022, 0x0061, 0x00e4 },
+    { 0x002d, 0x0061, 0x00aa },
+    { 0x002d, 0x0041, 0x00aa },
+    { 0x004f, 0x0041, 0x00c5 },
+    { 0x006f, 0x0061, 0x00e5 },
+    { 0x0030, 0x0041, 0x00c5 },
+    { 0x0030, 0x0061, 0x00e5 },
+    { 0x0041, 0x0041, 0x00c5 },
+    { 0x0061, 0x0061, 0x00e5 },
+    { 0x00b0, 0x0041, 0x00c5 },
+    { 0x00b0, 0x0061, 0x00e5 },
+    { 0x0041, 0x0045, 0x00c6 },
+    { 0x0061, 0x0065, 0x00e6 },
+    { 0x002c, 0x0043, 0x00c7 },
+    { 0x002c, 0x0063, 0x00e7 },
+    { 0x005e, 0x0043, 0x00c7 },
+    { 0x005e, 0x0063, 0x00e7 },
+    { 0x0060, 0x0045, 0x00c8 },
+    { 0x0060, 0x0065, 0x00e8 },
+    { 0x0027, 0x0045, 0x00c9 },
+    { 0x0027, 0x0065, 0x00e9 },
+    { 0x005e, 0x0045, 0x00ca },
+    { 0x005e, 0x0065, 0x00ea },
+    { 0x0022, 0x0045, 0x00cb },
+    { 0x0022, 0x0065, 0x00eb },
+    { 0x0060, 0x0049, 0x00cc },
+    { 0x0060, 0x0069, 0x00ec },
+    { 0x0027, 0x0049, 0x00cd },
+    { 0x0027, 0x0069, 0x00ed },
+    { 0x005e, 0x0049, 0x00ce },
+    { 0x005e, 0x0069, 0x00ee },
+    { 0x0022, 0x0049, 0x00cf },
+    { 0x0022, 0x0069, 0x00ef },
+    { 0x002d, 0x0044, 0x00d0 },
+    { 0x002d, 0x0064, 0x00f0 },
+    { 0x005e, 0x0044, 0x00d0 },
+    { 0x005e, 0x0064, 0x00f0 },
+    { 0x007e, 0x004e, 0x00d1 },
+    { 0x007e, 0x006e, 0x00f1 },
+    { 0x005e, 0x004e, 0x00d1 },
+    { 0x005e, 0x006e, 0x00f1 },
+    { 0x0060, 0x004f, 0x00d2 },
+    { 0x0060, 0x006f, 0x00f2 },
+    { 0x0027, 0x004f, 0x00d3 },
+    { 0x0027, 0x006f, 0x00f3 },
+    { 0x005e, 0x004f, 0x00d4 },
+    { 0x005e, 0x006f, 0x00f4 },
+    { 0x007e, 0x004f, 0x00d5 },
+    { 0x007e, 0x006f, 0x00f5 },
+    { 0x0022, 0x004f, 0x00d6 },
+    { 0x0022, 0x006f, 0x00f6 },
+    { 0x002f, 0x004f, 0x00d8 },
+    { 0x002f, 0x006f, 0x00f8 },
+    { 0x002d, 0x006f, 0x00ba },
+    { 0x002d, 0x004f, 0x00ba },
+    { 0x0060, 0x0055, 0x00d9 },
+    { 0x0060, 0x0075, 0x00f9 },
+    { 0x0027, 0x0055, 0x00da },
+    { 0x0027, 0x0075, 0x00fa },
+    { 0x005e, 0x0055, 0x00db },
+    { 0x005e, 0x0075, 0x00fb },
+    { 0x0022, 0x0055, 0x00dc },
+    { 0x0022, 0x0075, 0x00fc },
+    { 0x0027, 0x0059, 0x00dd },
+    { 0x0027, 0x0079, 0x00fd },
+    { 0x0054, 0x0048, 0x00de },
+    { 0x0074, 0x0068, 0x00fe },
+    { 0x0073, 0x0073, 0x00df },
+    { 0x0022, 0x0079, 0x00ff },
+    { 0x0073, 0x007a, 0x00df },
+    { 0x006e, 0x006e, 0x00f1 },
+    { 0x006e, 0x0068, 0x00f1 },
+    { 0x004e, 0x0059, 0x00d1 },
+    { 0x004e, 0x004e, 0x00d1 },
+    { 0x004e, 0x0048, 0x00d1 },
+    { 0x004e, 0x0079, 0x00d1 },
+    { 0x004e, 0x006e, 0x00d1 },
+    { 0x004e, 0x0068, 0x00d1 },
+    { 0x002d, 0x004c, 0x00a3 },
+    { 0x003c, 0x003c, 0x00ab },
+    { 0x003e, 0x003e, 0x00bb },
+    { 0x003f, 0x003f, 0x00bf },
+    { 0x005e, 0x003f, 0x00bf },
+    { 0x0021, 0x0021, 0x00a1 },
+    { 0x005e, 0x0021, 0x00a1 },
+    { 0x005e, 0x0031, 0x00b9 },
+    { 0x005e, 0x0032, 0x00b2 },
+    { 0x005e, 0x0033, 0x00b3 },
+    { 0x002b, 0x002d, 0x00b1 },
+    { 0x0063, 0x003d, 0x00a2 },
+    { 0x0063, 0x002f, 0x00a2 },
+    { 0x002f, 0x0063, 0x00a2 },
+    { 0x002d, 0x0063, 0x00a2 },
+    { 0x002d, 0x0043, 0x00a2 },
+    { 0x004c, 0x003d, 0x00a3 },
+    { 0x002d, 0x004c, 0x00a3 },
+    { 0x002d, 0x006c, 0x00a3 },
+    { 0x005e, 0x002a, 0x00d7 },
+    { 0x005e, 0x0078, 0x00d7 },
+    { 0x0078, 0x0078, 0x00d7 },
+    { 0x005e, 0x002e, 0x00b7 },
+    { 0x002e, 0x002e, 0x00b7 },
+    { 0x005e, 0x002f, 0x00f7 },
+    { 0x005e, 0x003a, 0x00f7 },
+    { 0x002d, 0x003a, 0x00f7 },
+    { 0x003a, 0x002d, 0x00f7 },
+    { 0x0059, 0x003d, 0x00a5 },
+    { 0x002d, 0x0059, 0x00a5 },
+    { 0x002d, 0x006c, 0x00a5 },
+    { 0x0028, 0x0063, 0x00a9 },
+    { 0x0022, 0x0063, 0x00a9 },
+    { 0x002d, 0x0061, 0x00aa },
+    { 0x002d, 0x0041, 0x00aa },
+    { 0x002d, 0x006f, 0x00ba },
+    { 0x002d, 0x004f, 0x00ba },
+    { 0x0028, 0x0072, 0x00ae },
+    { 0x0022, 0x0072, 0x00ae },
+    { 0x006d, 0x0075, 0x00b5 },
+    { 0x0031, 0x0034, 0x0152 },
+    { 0x0031, 0x0032, 0x0153 },
+    { 0x0033, 0x0034, 0x0178 },
+    { 0x0065, 0x003d, 0x20ac },
+    { 0x002d, 0x0065, 0x20ac },
+    { 0x002d, 0x0045, 0x20ac },
+    { 0x0076, 0x0053, 0x0160 },
+    { 0x005e, 0x0053, 0x0160 },
+    { 0x0076, 0x0073, 0x0161 },
+    { 0x005e, 0x0073, 0x0161 },
+    { 0x0076, 0x005a, 0x017d },
+    { 0x005e, 0x005a, 0x017d },
+    { 0x0076, 0x007a, 0x017e },
+    { 0x005e, 0x007a, 0x017e },
+    { 0x004f, 0x0045, 0x0152 },
+    { 0x004f, 0x0065, 0x0152 },
+    { 0x006f, 0x0065, 0x0153 },
+    { 0x0022, 0x0059, 0x0178 },
+    { 0x0069, 0x006a, 0x00ff },
+    { 0x0049, 0x004a, 0x0178 },
 };
 
 #endif // QEMULATORKEYBOARDHANDLER_DEFAULTMAP_P_H
diff --git a/src/plugins/platforms/eglfs/api/qemulatorkeyboardhandler.cpp b/src/plugins/platforms/eglfs/api/qemulatorkeyboardhandler.cpp
index 5c98a04291..dedb647b2c 100644
--- a/src/plugins/platforms/eglfs/api/qemulatorkeyboardhandler.cpp
+++ b/src/plugins/platforms/eglfs/api/qemulatorkeyboardhandler.cpp
@@ -1,70 +1,245 @@
 /****************************************************************************
 **
-** Copyright (c) 2015-2018 LG Electronics, Inc.
-** All rights reserved.
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
 **
-** $QT_BEGIN_LICENSE:LGPL21$
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 or version 3 as published by the Free
-** Software Foundation and appearing in the file LICENSE.LGPLv21 and
-** LICENSE.LGPLv3 included in the packaging of this file. Please review the
-** following information to ensure the GNU Lesser General Public License
-** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
 
 #include "qemulatorkeyboardhandler.h"
-#ifdef MULTIINPUT_SUPPORT
-#include "qemulatorinputmanager.h"
-#endif
 
-#include <QEvent>
-#include <QDebug>
+#include <qplatformdefs.h>
+
+#include <QFile>
+#include <QSocketNotifier>
+#include <QStringList>
+#include <QCoreApplication>
+#include <QLoggingCategory>
 #include <qpa/qwindowsysteminterface.h>
+#include <private/qcore_unix_p.h>
+
+#include <QtGui/private/qguiapplication_p.h>
+#include <QtGui/private/qinputdevicemanager_p.h>
+
+#ifdef Q_OS_FREEBSD
+#include <dev/evdev/input.h>
+#else
+#include <linux/input.h>
+#endif
 
 QT_BEGIN_NAMESPACE
 
+// simple builtin US keymap
 #include "qemulatorkeyboard_defaultmap_p.h"
 
-QEmulatorKeyboardHandler* QEmulatorKeyboardHandler::s_instance = NULL;
+void QEmulatorFdContainer::reset() Q_DECL_NOTHROW
+{
+    if (m_fd >= 0)
+        qt_safe_close(m_fd);
+    m_fd = -1;
+}
 
-QEmulatorKeyboardHandler::QEmulatorKeyboardHandler()
-    : m_modifiers(0), m_dead_unicode(0xffff),
-      m_keymap(0), m_keymap_size(0)
+#if defined(WEBOS_EMULATOR)
+QEmulatorKeyboardHandler::QEmulatorKeyboardHandler(const QString &device, QEmulatorFdContainer &fd, bool disableZap, bool enableCompose, const QString &keymapFile, QObject *parent)
+    : QObject(parent), m_device(device), m_fd(fd.release()), m_notify(nullptr),
+#else
+QEmulatorKeyboardHandler::QEmulatorKeyboardHandler(const QString &device, QEmulatorFdContainer &fd, bool disableZap, bool enableCompose, const QString &keymapFile)
+    : m_device(device), m_fd(fd.release()), m_notify(nullptr),
+#endif
+      m_modifiers(0), m_composing(0), m_dead_unicode(0xffff),
+      m_langLock(0), m_no_zap(disableZap), m_do_compose(enableCompose),
+      m_keymap(0), m_keymap_size(0), m_keycompose(0), m_keycompose_size(0)
 {
-    m_lockStates[Qt::Key_CapsLock  ] = false;
-    m_lockStates[Qt::Key_NumLock   ] = false;
-    m_lockStates[Qt::Key_ScrollLock] = false;
+    qWarning() << "Create keyboard handler with for device" << device;
+
+    setObjectName(QLatin1String("LinuxInput Keyboard Handler"));
+
+    memset(m_locks, 0, sizeof(m_locks));
 
-    loadDefaultKeymap();
+    if (keymapFile.isEmpty() || !loadKeymap(keymapFile))
+        unloadKeymap();
+
+    // socket notifier for events on the keyboard device
+    m_notify = new QSocketNotifier(m_fd.get(), QSocketNotifier::Read, this);
+    connect(m_notify, &QSocketNotifier::activated, this, &QEmulatorKeyboardHandler::readKeycode);
 }
 
 QEmulatorKeyboardHandler::~QEmulatorKeyboardHandler()
 {
-    m_lockStates.clear();
+    unloadKeymap();
 }
 
-void QEmulatorKeyboardHandler::handleKeyEvent(int nativecode, int qtcode, Qt::KeyboardModifiers modifiers,
-                                              int unicode, bool isPress, bool autoRepeat)
+QEmulatorKeyboardHandler *QEmulatorKeyboardHandler::create(const QString &device,
+                                                     const QString &specification,
+                                                     const QString &defaultKeymapFile)
 {
-    QString str = (unicode == m_dead_unicode)? "" : QString(unicode);
-    QEvent::Type keyType = isPress ? QEvent::KeyPress : QEvent::KeyRelease;
-    QWindowSystemInterface::handleExtendedKeyEvent(0, keyType, qtcode, modifiers, nativecode + 8, 0,
-                                                   int(modifiers), str, autoRepeat);
-#ifdef DEBUG_KEY_EVENT
-    qDebug("QPA: handleExtendedKeyEvent nativecode=%d (->%d), qtcode=0x%x, modifiers=0x%x isPress=%d, autoRepeat=%d", nativecode, nativecode+8, qtcode, (unsigned)modifiers, isPress, autoRepeat);
-#endif
+    qWarning() << "Try to create keyboard handler for" << device << specification;
+
+    QString keymapFile = defaultKeymapFile;
+    int repeatDelay = 400;
+    int repeatRate = 80;
+    bool disableZap = false;
+    bool enableCompose = false;
+    int grab = 0;
+
+    const auto args = specification.splitRef(QLatin1Char(':'));
+    for (const QStringRef &arg : args) {
+        if (arg.startsWith(QLatin1String("keymap=")))
+            keymapFile = arg.mid(7).toString();
+        else if (arg == QLatin1String("disable-zap"))
+            disableZap = true;
+        else if (arg == QLatin1String("enable-compose"))
+            enableCompose = true;
+        else if (arg.startsWith(QLatin1String("repeat-delay=")))
+            repeatDelay = arg.mid(13).toInt();
+        else if (arg.startsWith(QLatin1String("repeat-rate=")))
+            repeatRate = arg.mid(12).toInt();
+        else if (arg.startsWith(QLatin1String("grab=")))
+            grab = arg.mid(5).toInt();
+    }
+
+    qWarning() << "Opening keyboard at" << device;
+
+    QEmulatorFdContainer fd(qt_safe_open(device.toLocal8Bit().constData(), O_RDONLY | O_NDELAY, 0));
+    if (fd.get() >= 0) {
+        ::ioctl(fd.get(), EVIOCGRAB, grab);
+        if (repeatDelay > 0 && repeatRate > 0) {
+            int kbdrep[2] = { repeatDelay, repeatRate };
+            ::ioctl(fd.get(), EVIOCSREP, kbdrep);
+        }
+
+        return new QEmulatorKeyboardHandler(device, fd, disableZap, enableCompose, keymapFile);
+    } else {
+        qWarning("Cannot open keyboard input device '%s': %s", qPrintable(device), strerror(errno));
+        return 0;
+    }
 }
 
-#ifdef MULTIINPUT_SUPPORT
-bool QEmulatorKeyboardHandler::processKeycode(quint16 keycode, bool pressed, bool autorepeat, int deviceID)
-#else
-bool QEmulatorKeyboardHandler::processKeycode(quint16 keycode, bool pressed, bool autorepeat)
+void QEmulatorKeyboardHandler::switchLed(int led, bool state)
+{
+    qWarning() << "switchLed" << led << state;
+
+    struct ::input_event led_ie;
+    ::gettimeofday(&led_ie.time, 0);
+    led_ie.type = EV_LED;
+    led_ie.code = led;
+    led_ie.value = state;
+
+    qt_safe_write(m_fd.get(), &led_ie, sizeof(led_ie));
+}
+
+void QEmulatorKeyboardHandler::readKeycode()
+{
+    struct ::input_event buffer[32];
+    int n = 0;
+
+    forever {
+        int result = qt_safe_read(m_fd.get(), reinterpret_cast<char *>(buffer) + n, sizeof(buffer) - n);
+
+        if (result == 0) {
+            qWarning("emulatorkeyboard: Got EOF from the input device");
+            return;
+        } else if (result < 0) {
+            if (errno != EINTR && errno != EAGAIN) {
+                qErrnoWarning(errno, "emulatorkeyboard: Could not read from input device");
+                // If the device got disconnected, stop reading, otherwise we get flooded
+                // by the above error over and over again.
+                if (errno == ENODEV) {
+                    delete m_notify;
+                    m_notify = nullptr;
+                    m_fd.reset();
+                }
+                return;
+            }
+        } else {
+            n += result;
+            if (n % sizeof(buffer[0]) == 0)
+                break;
+        }
+    }
+
+    n /= sizeof(buffer[0]);
+
+    for (int i = 0; i < n; ++i) {
+        if (buffer[i].type != EV_KEY)
+            continue;
+
+        quint16 code = buffer[i].code;
+        qint32 value = buffer[i].value;
+
+        QEmulatorKeyboardHandler::KeycodeAction ka;
+        ka = processKeycode(code, value != 0, value == 2);
+#if defined(WEBOS_EMULATOR)
+        emit processKeycodeSignal(code, value != 0, value == 2);
 #endif
+        switch (ka) {
+        case QEmulatorKeyboardHandler::CapsLockOn:
+        case QEmulatorKeyboardHandler::CapsLockOff:
+            switchLed(LED_CAPSL, ka == QEmulatorKeyboardHandler::CapsLockOn);
+            break;
+
+        case QEmulatorKeyboardHandler::NumLockOn:
+        case QEmulatorKeyboardHandler::NumLockOff:
+            switchLed(LED_NUML, ka == QEmulatorKeyboardHandler::NumLockOn);
+            break;
+
+        case QEmulatorKeyboardHandler::ScrollLockOn:
+        case QEmulatorKeyboardHandler::ScrollLockOff:
+            switchLed(LED_SCROLLL, ka == QEmulatorKeyboardHandler::ScrollLockOn);
+            break;
+
+        default:
+            // ignore console switching and reboot
+            break;
+        }
+    }
+}
+
+void QEmulatorKeyboardHandler::processKeyEvent(int nativecode, int unicode, int qtcode,
+                                            Qt::KeyboardModifiers modifiers, bool isPress, bool autoRepeat)
+{
+    if (!autoRepeat)
+        QGuiApplicationPrivate::inputDeviceManager()->setKeyboardModifiers(QEmulatorKeyboardHandler::toQtModifiers(m_modifiers));
+
+    QWindowSystemInterface::handleExtendedKeyEvent(0, (isPress ? QEvent::KeyPress : QEvent::KeyRelease),
+                                                   qtcode, modifiers, nativecode + 8, 0, int(modifiers),
+                                                   (unicode != 0xffff ) ? QString(unicode) : QString(), autoRepeat);
+}
+
+QEmulatorKeyboardHandler::KeycodeAction QEmulatorKeyboardHandler::processKeycode(quint16 keycode, bool pressed, bool autorepeat)
 {
+    KeycodeAction result = None;
     bool first_press = pressed && !autorepeat;
 
     const QEmulatorKeyboardMap::Mapping *map_plain = 0;
@@ -80,29 +255,30 @@ bool QEmulatorKeyboardHandler::processKeycode(quint16 keycode, bool pressed, boo
                 map_plain = m;
 
             quint8 testmods = m_modifiers;
-            if (m_lockStates[Qt::Key_CapsLock] && (m->flags & QEmulatorKeyboardMap::IsLetter)) {
+            if (m_locks[0] /*CapsLock*/ && (m->flags & QEmulatorKeyboardMap::IsLetter))
                 testmods ^= QEmulatorKeyboardMap::ModShift;
-            }
-            if (m_lockStates[Qt::Key_NumLock] && (m->flags & QEmulatorKeyboardMap::IsKeypad)) {
-                testmods |= QEmulatorKeyboardMap::ModShift;
-            }
-            if (m->modifiers == testmods) {
+            if (m_langLock)
+                testmods ^= QEmulatorKeyboardMap::ModAltGr;
+            if (m->modifiers == testmods)
                 map_withmod = m;
-            }
         }
     }
 
-    if (m_lockStates[Qt::Key_CapsLock] && map_withmod && (map_withmod->flags & QEmulatorKeyboardMap::IsLetter))
+    if (m_locks[0] /*CapsLock*/ && map_withmod && (map_withmod->flags & QEmulatorKeyboardMap::IsLetter))
         modifiers ^= QEmulatorKeyboardMap::ModShift;
 
+    qWarning("Processing key event: keycode=%3d, modifiers=%02x pressed=%d, autorepeat=%d  |  plain=%d, withmod=%d, size=%d",
+            keycode, modifiers, pressed ? 1 : 0, autorepeat ? 1 : 0,
+            int(map_plain ? map_plain - m_keymap : -1),
+            int(map_withmod ? map_withmod - m_keymap : -1),
+            m_keymap_size);
+
     const QEmulatorKeyboardMap::Mapping *it = map_withmod ? map_withmod : map_plain;
 
     if (!it) {
-#ifdef DEBUG_KEY_EVENT
         // we couldn't even find a plain mapping
-        qWarning("QPA: key ignored keycode=%d, modifiers=0x%x", keycode, m_modifiers);
-#endif
-        return false;
+        qWarning("Could not find a suitable mapping for keycode: %3d, modifiers: %02x", keycode, modifiers);
+        return result;
     }
 
     bool skip = false;
@@ -110,47 +286,301 @@ bool QEmulatorKeyboardHandler::processKeycode(quint16 keycode, bool pressed, boo
     quint32 qtcode = it->qtcode;
 
     if ((it->flags & QEmulatorKeyboardMap::IsModifier) && it->special) {
-        // modifier
-        if (pressed) {
+        // this is a modifier, i.e. Shift, Alt, ...
+        if (pressed)
             m_modifiers |= quint8(it->special);
-        } else {
+        else
             m_modifiers &= ~quint8(it->special);
-        }
     } else if (qtcode >= Qt::Key_CapsLock && qtcode <= Qt::Key_ScrollLock) {
+        // (Caps|Num|Scroll)Lock
         if (first_press) {
-            m_lockStates[qtcode] = !m_lockStates[qtcode];
+            quint8 &lock = m_locks[qtcode - Qt::Key_CapsLock];
+            lock ^= 1;
+
+            switch (qtcode) {
+            case Qt::Key_CapsLock  : result = lock ? CapsLockOn : CapsLockOff; break;
+            case Qt::Key_NumLock   : result = lock ? NumLockOn : NumLockOff; break;
+            case Qt::Key_ScrollLock: result = lock ? ScrollLockOn : ScrollLockOff; break;
+            default                : break;
+            }
+        }
+    } else if ((it->flags & QEmulatorKeyboardMap::IsSystem) && it->special && first_press) {
+        switch (it->special) {
+        case QEmulatorKeyboardMap::SystemReboot:
+            result = Reboot;
+            break;
+
+        case QEmulatorKeyboardMap::SystemZap:
+            if (!m_no_zap)
+                qApp->quit();
+            break;
+
+        case QEmulatorKeyboardMap::SystemConsolePrevious:
+            result = PreviousConsole;
+            break;
+
+        case QEmulatorKeyboardMap::SystemConsoleNext:
+            result = NextConsole;
+            break;
+
+        default:
+            if (it->special >= QEmulatorKeyboardMap::SystemConsoleFirst &&
+                it->special <= QEmulatorKeyboardMap::SystemConsoleLast) {
+                result = KeycodeAction(SwitchConsoleFirst + ((it->special & QEmulatorKeyboardMap::SystemConsoleMask) & SwitchConsoleMask));
+            }
+            break;
+        }
+
+        skip = true; // no need to tell Qt about it
+    } else if ((qtcode == Qt::Key_Multi_key) && m_do_compose) {
+        // the Compose key was pressed
+        if (first_press)
+            m_composing = 2;
+        skip = true;
+    } else if ((it->flags & QEmulatorKeyboardMap::IsDead) && m_do_compose) {
+        // a Dead key was pressed
+        if (first_press && m_composing == 1 && m_dead_unicode == unicode) { // twice
+            m_composing = 0;
+            qtcode = Qt::Key_unknown; // otherwise it would be Qt::Key_Dead...
+        } else if (first_press && unicode != 0xffff) {
+            m_dead_unicode = unicode;
+            m_composing = 1;
+            skip = true;
+        } else {
+            skip = true;
         }
     }
 
     if (!skip) {
-        // a normal key
+        // a normal key was pressed
         const int modmask = Qt::ShiftModifier | Qt::ControlModifier | Qt::AltModifier | Qt::MetaModifier | Qt::KeypadModifier;
 
+        // we couldn't find a specific mapping for the current modifiers,
+        // or that mapping didn't have special modifiers:
+        // so just report the plain mapping with additional modifiers.
         if ((it == map_plain && it != map_withmod) ||
             (map_withmod && !(map_withmod->qtcode & modmask))) {
             qtcode |= QEmulatorKeyboardHandler::toQtModifiers(modifiers);
         }
 
-#ifdef MULTIINPUT_SUPPORT
-        Qt::KeyboardModifiers orgModifiers = Qt::KeyboardModifiers(qtcode & modmask);
-        handleKeyEvent(keycode, qtcode & ~modmask,
-                       QEmulatorInputManager::instance()->makeCustomModsWithDeviceId(deviceID, orgModifiers),
-                       unicode, pressed, autorepeat);
-#else
-        handleKeyEvent(keycode, qtcode & ~modmask, Qt::KeyboardModifiers(qtcode & modmask), unicode, pressed, autorepeat);
-#endif
+        if (m_composing == 2 && first_press && !(it->flags & QEmulatorKeyboardMap::IsModifier)) {
+            // the last key press was the Compose key
+            if (unicode != 0xffff) {
+                int idx = 0;
+                // check if this code is in the compose table at all
+                for ( ; idx < m_keycompose_size; ++idx) {
+                    if (m_keycompose[idx].first == unicode)
+                        break;
+                }
+                if (idx < m_keycompose_size) {
+                    // found it -> simulate a Dead key press
+                    m_dead_unicode = unicode;
+                    unicode = 0xffff;
+                    m_composing = 1;
+                    skip = true;
+                } else {
+                    m_composing = 0;
+                }
+            } else {
+                m_composing = 0;
+            }
+        } else if (m_composing == 1 && first_press && !(it->flags & QEmulatorKeyboardMap::IsModifier)) {
+            // the last key press was a Dead key
+            bool valid = false;
+            if (unicode != 0xffff) {
+                int idx = 0;
+                // check if this code is in the compose table at all
+                for ( ; idx < m_keycompose_size; ++idx) {
+                    if (m_keycompose[idx].first == m_dead_unicode && m_keycompose[idx].second == unicode)
+                        break;
+                }
+                if (idx < m_keycompose_size) {
+                    quint16 composed = m_keycompose[idx].result;
+                    if (composed != 0xffff) {
+                        unicode = composed;
+                        qtcode = Qt::Key_unknown;
+                        valid = true;
+                    }
+                }
+            }
+            if (!valid) {
+                unicode = m_dead_unicode;
+                qtcode = Qt::Key_unknown;
+            }
+            m_composing = 0;
+        }
+
+        if (!skip) {
+            // Up until now qtcode contained both the key and modifiers. Split it.
+            Qt::KeyboardModifiers qtmods = Qt::KeyboardModifiers(qtcode & modmask);
+            qtcode &= ~modmask;
+
+            // qtmods here is the modifier state before the event, i.e. not
+            // including the current key in case it is a modifier.
+            qWarning("Processing: uni=%04x, qt=%08x, qtmod=%08x", unicode, qtcode, int(qtmods));
+
+            // If NumLockOff and keypad key pressed remap event sent
+            if (!m_locks[1] && (qtmods & Qt::KeypadModifier) &&
+                 keycode >= 71 &&
+                 keycode <= 83 &&
+                 keycode != 74 &&
+                 keycode != 78) {
+
+                unicode = 0xffff;
+                switch (keycode) {
+                case 71: //7 --> Home
+                    qtcode = Qt::Key_Home;
+                    break;
+                case 72: //8 --> Up
+                    qtcode = Qt::Key_Up;
+                    break;
+                case 73: //9 --> PgUp
+                    qtcode = Qt::Key_PageUp;
+                    break;
+                case 75: //4 --> Left
+                    qtcode = Qt::Key_Left;
+                    break;
+                case 76: //5 --> Clear
+                    qtcode = Qt::Key_Clear;
+                    break;
+                case 77: //6 --> right
+                    qtcode = Qt::Key_Right;
+                    break;
+                case 79: //1 --> End
+                    qtcode = Qt::Key_End;
+                    break;
+                case 80: //2 --> Down
+                    qtcode = Qt::Key_Down;
+                    break;
+                case 81: //3 --> PgDn
+                    qtcode = Qt::Key_PageDown;
+                    break;
+                case 82: //0 --> Ins
+                    qtcode = Qt::Key_Insert;
+                    break;
+                case 83: //, --> Del
+                    qtcode = Qt::Key_Delete;
+                    break;
+                }
+            }
+
+            // Map SHIFT + Tab to SHIFT + Backtab, QShortcutMap knows about this translation
+            if (qtcode == Qt::Key_Tab && (qtmods & Qt::ShiftModifier) == Qt::ShiftModifier)
+                qtcode = Qt::Key_Backtab;
+
+            // Generate the QPA event.
+            processKeyEvent(keycode, unicode, qtcode, qtmods, pressed, autorepeat);
+        }
     }
-    return true;
+    return result;
 }
 
-void QEmulatorKeyboardHandler::loadDefaultKeymap()
+void QEmulatorKeyboardHandler::unloadKeymap()
 {
-#ifdef DEBUG_KEY_EVENT
-    qDebug() << "QPA: load default keymap";
-#endif
+    qWarning() << "Unload current keymap and restore built-in";
+
+    if (m_keymap && m_keymap != s_keymap_default)
+        delete [] m_keymap;
+    if (m_keycompose && m_keycompose != s_keycompose_default)
+        delete [] m_keycompose;
+
+    m_keymap = s_keymap_default;
+    m_keymap_size = sizeof(s_keymap_default) / sizeof(s_keymap_default[0]);
+    m_keycompose = s_keycompose_default;
+    m_keycompose_size = sizeof(s_keycompose_default) / sizeof(s_keycompose_default[0]);
+
+    // reset state, so we could switch keymaps at runtime
+    m_modifiers = 0;
+    memset(m_locks, 0, sizeof(m_locks));
+    m_composing = 0;
+    m_dead_unicode = 0xffff;
 
-    m_keymap = s_default_keymap;
-    m_keymap_size = sizeof(s_default_keymap) / sizeof(s_default_keymap[0]);
+    //Set locks according to keyboard leds
+    quint16 ledbits[1];
+    memset(ledbits, 0, sizeof(ledbits));
+    if (::ioctl(m_fd.get(), EVIOCGLED(sizeof(ledbits)), ledbits) < 0) {
+        qWarning("emulatorkeyboard: Failed to query led states");
+        switchLed(LED_NUML,false);
+        switchLed(LED_CAPSL, false);
+        switchLed(LED_SCROLLL,false);
+    } else {
+        //Capslock
+        if ((ledbits[0]&0x02) > 0)
+            m_locks[0] = 1;
+        //Numlock
+        if ((ledbits[0]&0x01) > 0)
+            m_locks[1] = 1;
+        //Scrollock
+        if ((ledbits[0]&0x04) > 0)
+            m_locks[2] = 1;
+        qWarning("numlock=%d , capslock=%d, scrolllock=%d", m_locks[1], m_locks[0], m_locks[2]);
+    }
+
+    m_langLock = 0;
+}
+
+bool QEmulatorKeyboardHandler::loadKeymap(const QString &file)
+{
+    qWarning() << "Loading keymap" << file;
+
+    QFile f(file);
+
+    if (!f.open(QIODevice::ReadOnly)) {
+        qWarning("Could not open keymap file '%s'", qPrintable(file));
+        return false;
+    }
+
+    // .qmap files have a very simple structure:
+    // quint32 magic           (QKeyboard::FileMagic)
+    // quint32 version         (1)
+    // quint32 keymap_size     (# of struct QKeyboard::Mappings)
+    // quint32 keycompose_size (# of struct QKeyboard::Composings)
+    // all QKeyboard::Mappings via QDataStream::operator(<<|>>)
+    // all QKeyboard::Composings via QDataStream::operator(<<|>>)
+
+    quint32 qmap_magic, qmap_version, qmap_keymap_size, qmap_keycompose_size;
+
+    QDataStream ds(&f);
+
+    ds >> qmap_magic >> qmap_version >> qmap_keymap_size >> qmap_keycompose_size;
+
+    if (ds.status() != QDataStream::Ok || qmap_magic != QEmulatorKeyboardMap::FileMagic || qmap_version != 1 || qmap_keymap_size == 0) {
+        qWarning("'%s' is not a valid .qmap keymap file", qPrintable(file));
+        return false;
+    }
+
+    QEmulatorKeyboardMap::Mapping *qmap_keymap = new QEmulatorKeyboardMap::Mapping[qmap_keymap_size];
+    QEmulatorKeyboardMap::Composing *qmap_keycompose = qmap_keycompose_size ? new QEmulatorKeyboardMap::Composing[qmap_keycompose_size] : 0;
+
+    for (quint32 i = 0; i < qmap_keymap_size; ++i)
+        ds >> qmap_keymap[i];
+    for (quint32 i = 0; i < qmap_keycompose_size; ++i)
+        ds >> qmap_keycompose[i];
+
+    if (ds.status() != QDataStream::Ok) {
+        delete [] qmap_keymap;
+        delete [] qmap_keycompose;
+
+        qWarning("Keymap file '%s' can not be loaded.", qPrintable(file));
+        return false;
+    }
+
+    // unload currently active and clear state
+    unloadKeymap();
+
+    m_keymap = qmap_keymap;
+    m_keymap_size = qmap_keymap_size;
+    m_keycompose = qmap_keycompose;
+    m_keycompose_size = qmap_keycompose_size;
+
+    m_do_compose = true;
+
+    return true;
+}
+
+void QEmulatorKeyboardHandler::switchLang()
+{
+    m_langLock ^= 1;
 }
 
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/api/qemulatorkeyboardhandler.h b/src/plugins/platforms/eglfs/api/qemulatorkeyboardhandler.h
index c7da601d00..29e3e42a1b 100644
--- a/src/plugins/platforms/eglfs/api/qemulatorkeyboardhandler.h
+++ b/src/plugins/platforms/eglfs/api/qemulatorkeyboardhandler.h
@@ -1,17 +1,38 @@
 /****************************************************************************
 **
-** Copyright (c) 2015-2018 LG Electronics, Inc.
-** All rights reserved.
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
 **
-** $QT_BEGIN_LICENSE:LGPL21$
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 or version 3 as published by the Free
-** Software Foundation and appearing in the file LICENSE.LGPLv21 and
-** LICENSE.LGPLv3 included in the packaging of this file. Please review the
-** following information to ensure the GNU Lesser General Public License
-** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
@@ -19,27 +40,59 @@
 #ifndef QEMULATORKEYBOARDHANDLER_H
 #define QEMULATORKEYBOARDHANDLER_H
 
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API.  It exists purely as an
+// implementation detail.  This header file may change from version to
+// version without notice, or even be removed.
+//
+// We mean it.
+//
+
+#include <qobject.h>
+#include <QTimer>
 #include <QDataStream>
-#include <QMap>
 
 QT_BEGIN_NAMESPACE
 
+class QSocketNotifier;
+
 namespace QEmulatorKeyboardMap {
+    const quint32 FileMagic = 0x514d4150; // 'QMAP'
+
     struct Mapping {
         quint16 keycode;
-        quint32 qtcode;
         quint16 unicode;
-        quint8 flags;
+        quint32 qtcode;
         quint8 modifiers;
+        quint8 flags;
         quint16 special;
+
     };
 
     enum Flags {
         IsDead     = 0x01,
         IsLetter   = 0x02,
         IsModifier = 0x04,
-        IsSystem   = 0x08,
-        IsKeypad   = 0x10,
+        IsSystem   = 0x08
+    };
+
+    enum System {
+        SystemConsoleFirst    = 0x0100,
+        SystemConsoleMask     = 0x007f,
+        SystemConsoleLast     = 0x017f,
+        SystemConsolePrevious = 0x0180,
+        SystemConsoleNext     = 0x0181,
+        SystemReboot          = 0x0200,
+        SystemZap             = 0x0300
+    };
+
+    struct Composing {
+        quint16 first;
+        quint16 second;
+        quint16 result;
     };
 
     enum Modifiers {
@@ -52,31 +105,78 @@ namespace QEmulatorKeyboardMap {
         ModShiftR  = 0x20,
         ModCtrlL   = 0x40,
         ModCtrlR   = 0x80
+        // ModCapsShift = 0x100, // not supported!
     };
 }
 
 inline QDataStream &operator>>(QDataStream &ds, QEmulatorKeyboardMap::Mapping &m)
 {
-    return ds >> m.keycode >> m.qtcode >> m.unicode >> m.flags >> m.modifiers >> m.special;
+    return ds >> m.keycode >> m.unicode >> m.qtcode >> m.modifiers >> m.flags >> m.special;
 }
 
 inline QDataStream &operator<<(QDataStream &ds, const QEmulatorKeyboardMap::Mapping &m)
 {
-    return ds << m.keycode << m.qtcode << m.unicode << m.flags << m.modifiers << m.special;
+    return ds << m.keycode << m.unicode << m.qtcode << m.modifiers << m.flags << m.special;
+}
+
+inline QDataStream &operator>>(QDataStream &ds, QEmulatorKeyboardMap::Composing &c)
+{
+    return ds >> c.first >> c.second >> c.result;
 }
 
+inline QDataStream &operator<<(QDataStream &ds, const QEmulatorKeyboardMap::Composing &c)
+{
+    return ds << c.first << c.second << c.result;
+}
 
-class QEmulatorKeyboardHandler
+class QEmulatorFdContainer
 {
+    int m_fd;
+    Q_DISABLE_COPY(QEmulatorFdContainer);
+public:
+    explicit QEmulatorFdContainer(int fd = -1) Q_DECL_NOTHROW : m_fd(fd) {}
+    ~QEmulatorFdContainer() { reset(); }
+
+    int get() const Q_DECL_NOTHROW { return m_fd; }
+
+    int release() Q_DECL_NOTHROW { int result = m_fd; m_fd = -1; return result; }
+    void reset() Q_DECL_NOTHROW;
+};
 
+class QEmulatorKeyboardHandler : public QObject
+{
+#if defined(WEBOS_EMULATOR)
+    Q_OBJECT
+public:
+    QEmulatorKeyboardHandler(const QString &device, QEmulatorFdContainer &fd, bool disableZap, bool enableCompose, const QString &keymapFile, QObject *parent = nullptr);
+#else
 public:
-    QEmulatorKeyboardHandler();
+    QEmulatorKeyboardHandler(const QString &device, QEmulatorFdContainer &fd, bool disableZap, bool enableCompose, const QString &keymapFile);
+#endif
     ~QEmulatorKeyboardHandler();
 
-    static QEmulatorKeyboardHandler* instance() {
-        if (!s_instance) s_instance = new QEmulatorKeyboardHandler();
-        return s_instance;
-    }
+    enum KeycodeAction {
+        None               = 0,
+
+        CapsLockOff        = 0x01000000,
+        CapsLockOn         = 0x01000001,
+        NumLockOff         = 0x02000000,
+        NumLockOn          = 0x02000001,
+        ScrollLockOff      = 0x03000000,
+        ScrollLockOn       = 0x03000001,
+
+        Reboot             = 0x04000000,
+
+        PreviousConsole    = 0x05000000,
+        NextConsole        = 0x05000001,
+        SwitchConsoleFirst = 0x06000000,
+        SwitchConsoleLast  = 0x0600007f,
+        SwitchConsoleMask  = 0x0000007f
+    };
+
+    static QEmulatorKeyboardHandler *create(const QString &device,
+                                         const QString &specification,
+                                         const QString &defaultKeymapFile = QString());
 
     static Qt::KeyboardModifiers toQtModifiers(quint8 mod)
     {
@@ -92,29 +192,47 @@ public:
         return qtmod;
     }
 
-#ifdef MULTIINPUT_SUPPORT
-    bool processKeycode(quint16 keycode, bool pressed, bool autorepeat, int deviceID);
-#else
-    bool processKeycode(quint16 keycode, bool pressed, bool autorepeat);
-#endif
+    bool loadKeymap(const QString &file);
+    void unloadKeymap();
 
+    void readKeycode();
+    KeycodeAction processKeycode(quint16 keycode, bool pressed, bool autorepeat);
+
+    void switchLang();
+
+#if defined(WEBOS_EMULATOR)
+signals:
+	void processKeycodeSignal(quint16 keycode, bool pressed, bool autorepeat);
+#endif
 private:
-    void loadDefaultKeymap();
-    void handleKeyEvent(int nativecode, int qtcode, Qt::KeyboardModifiers modifiers,
-                        int unicode, bool isPress, bool autoRepeat);
+    void processKeyEvent(int nativecode, int unicode, int qtcode,
+                         Qt::KeyboardModifiers modifiers, bool isPress, bool autoRepeat);
+    void switchLed(int, bool);
 
-    const QEmulatorKeyboardMap::Mapping *m_keymap;
-    int m_keymap_size;
+    QString m_device;
+    QEmulatorFdContainer m_fd;
+    QSocketNotifier *m_notify;
 
     // keymap handling
     quint8 m_modifiers;
-    QMap<quint32, bool> m_lockStates;
+    quint8 m_locks[3];
+    int m_composing;
     quint16 m_dead_unicode;
+    quint8 m_langLock;
+
+    bool m_no_zap;
+    bool m_do_compose;
 
-    static const QEmulatorKeyboardMap::Mapping s_default_keymap[];
-    static QEmulatorKeyboardHandler* s_instance;
+    const QEmulatorKeyboardMap::Mapping *m_keymap;
+    int m_keymap_size;
+    const QEmulatorKeyboardMap::Composing *m_keycompose;
+    int m_keycompose_size;
+
+    static const QEmulatorKeyboardMap::Mapping s_keymap_default[];
+    static const QEmulatorKeyboardMap::Composing s_keycompose_default[];
 };
 
+
 QT_END_NAMESPACE
-#endif // QEMULATORKEYBOARDHANDLER_H
 
+#endif // QEMULATORKEYBOARDHANDLER_H
diff --git a/src/plugins/platforms/eglfs/api/qemulatorkeyboardmanager.cpp b/src/plugins/platforms/eglfs/api/qemulatorkeyboardmanager.cpp
index ca58526675..b5d104a9c7 100644
--- a/src/plugins/platforms/eglfs/api/qemulatorkeyboardmanager.cpp
+++ b/src/plugins/platforms/eglfs/api/qemulatorkeyboardmanager.cpp
@@ -1,60 +1,97 @@
 /****************************************************************************
 **
-** Copyright (c) 2015-2018 LG Electronics, Inc.
-** All rights reserved.
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
 **
-** $QT_BEGIN_LICENSE:LGPL21$
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 or version 3 as published by the Free
-** Software Foundation and appearing in the file LICENSE.LGPLv21 and
-** LICENSE.LGPLv3 included in the packaging of this file. Please review the
-** following information to ensure the GNU Lesser General Public License
-** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
 
 #include "qemulatorkeyboardmanager.h"
 
-#include <private/qcore_unix_p.h>
-#include <linux/input.h>
-
 #include <QStringList>
 #include <QCoreApplication>
+#include <QLoggingCategory>
 
-//#define QT_QPA_KEYMAP_DEBUG
-
-#ifdef QT_QPA_KEYMAP_DEBUG
-#include <QDebug>
-#endif
+#include <private/qguiapplication_p.h>
+#include <private/qinputdevicemanager_p_p.h>
 
 QT_BEGIN_NAMESPACE
 
-QEmulatorKeyboardManager::QEmulatorKeyboardManager(const QString &argKey, const QString &argSpec, QObject *parent)
+QEmulatorKeyboardManager::QEmulatorKeyboardManager(const QString &key, const QString &specification, QObject *parent)
     : QObject(parent)
 {
-    Q_UNUSED(argKey);
+    Q_UNUSED(key);
+
+
+    QString spec = QString::fromLocal8Bit(qgetenv("QT_QPA_EVDEV_KEYBOARD_PARAMETERS"));
 
-    QStringList specList = argSpec.split(QLatin1Char(':'));
-    QStringList deviceList;
+    if (spec.isEmpty())
+        spec = specification;
 
-    foreach (const QString &temp, specList) {
-        if (temp.startsWith(QLatin1String("/dev/"))) {
+    QStringList args = spec.split(QLatin1Char(':'));
+    QStringList devices;
+
+    foreach (const QString &arg, args) {
+        if (arg.startsWith(QLatin1String("/dev/"))) {
             // if device is specified try to use it
-            deviceList.append(temp);
-            specList.removeAll(temp);
+            devices.append(arg);
+            args.removeAll(arg);
         }
     }
 
     // build new specification without /dev/ elements
-    m_spec = specList.join(QLatin1Char(':'));
+    m_spec = args.join(QLatin1Char(':'));
 
     // add all keyboards for devices specified in the argument list
-    foreach (const QString &temp, deviceList)
-        addKeyboard(temp);
-
+    foreach (const QString &device, devices)
+        addKeyboard(device);
+
+    if (devices.isEmpty()) {
+        qWarning() << "emulatorkeyboard: Using device discovery";
+        m_deviceDiscovery = QDeviceDiscovery::create(QDeviceDiscovery::Device_Keyboard, this);
+        if (m_deviceDiscovery) {
+            // scan and add already connected keyboards
+            const QStringList devices = m_deviceDiscovery->scanConnectedDevices();
+            for (const QString &device : devices)
+                addKeyboard(device);
+
+            connect(m_deviceDiscovery, &QDeviceDiscovery::deviceDetected,
+                    this, &QEmulatorKeyboardManager::addKeyboard);
+            connect(m_deviceDiscovery, &QDeviceDiscovery::deviceRemoved,
+                    this, &QEmulatorKeyboardManager::removeKeyboard);
+        }
+    }
 }
 
 QEmulatorKeyboardManager::~QEmulatorKeyboardManager()
@@ -65,101 +102,67 @@ QEmulatorKeyboardManager::~QEmulatorKeyboardManager()
 
 void QEmulatorKeyboardManager::addKeyboard(const QString &deviceNode)
 {
-    keyboardHandler = create(deviceNode, m_spec);
-    if (keyboardHandler)
-        m_keyboards.insert(deviceNode, keyboardHandler);
-    else
-        qWarning("Failed to open keyboard");
+    qWarning() << "Adding keyboard at" << deviceNode;
+    QEmulatorKeyboardHandler *keyboard;
+    keyboard = QEmulatorKeyboardHandler::create(deviceNode, m_spec, m_defaultKeymapFile);
+    if (keyboard) {
+#if defined(WEBOS_EMULATOR)
+        connect(keyboard, &QEmulatorKeyboardHandler::processKeycodeSignal, this, &QEmulatorKeyboardManager::processKeycodeSlot);
+#endif
+        m_keyboards.insert(deviceNode, keyboard);
+        QInputDeviceManagerPrivate::get(QGuiApplicationPrivate::inputDeviceManager())->setDeviceCount(
+            QInputDeviceManager::DeviceTypeKeyboard, m_keyboards.count());
+    } else {
+        qWarning("Failed to open keyboard device %s", qPrintable(deviceNode));
+    }
 }
 
 void QEmulatorKeyboardManager::removeKeyboard(const QString &deviceNode)
 {
     if (m_keyboards.contains(deviceNode)) {
+        qWarning() << "Removing keyboard at" << deviceNode;
         QEmulatorKeyboardHandler *keyboard = m_keyboards.value(deviceNode);
         m_keyboards.remove(deviceNode);
+        QInputDeviceManagerPrivate::get(QGuiApplicationPrivate::inputDeviceManager())->setDeviceCount(
+            QInputDeviceManager::DeviceTypeKeyboard, m_keyboards.count());
         delete keyboard;
     }
 }
 
-QEmulatorKeyboardHandler *QEmulatorKeyboardManager::create(const QString &argDevice, const QString &argSpec)
+void QEmulatorKeyboardManager::loadKeymap(const QString &file)
 {
-    QString keymapFile;
-    int repeatDelay = 400;
-    int repeatRate = 80;
-    bool disableZap = false;
-    bool enableCompose = false;
-
-    QStringList args = argSpec.split(QLatin1Char(':'));
-    foreach (const QString &arg, args) {
-        if (arg.startsWith(QLatin1String("repeat-rate=")))
-            repeatRate = arg.mid(12).toInt();
-        else if (arg.startsWith(QLatin1String("repeat-delay=")))
-            repeatDelay = arg.mid(13).toInt();
-        else if (arg == QLatin1String("enable-compose"))
-            enableCompose = true;
-        else if (arg == QLatin1String("disable-zap"))
-            disableZap = true;
-        else if (arg.startsWith(QLatin1String("keymap=")))
-            keymapFile = arg.mid(7);
-    }
-
-    int fd;
-    m_fd = qt_safe_open(argDevice.toLocal8Bit().constData(), O_RDONLY | O_NDELAY, 0);
-    if (m_fd >= 0) {
-        if (repeatDelay > 0 && repeatRate > 0) {
-            int kbdrep[2] = { repeatDelay, repeatRate };
-            ::ioctl(m_fd, EVIOCSREP, kbdrep);
+    m_defaultKeymapFile = file;
+
+    if (file.isEmpty()) {
+        // Restore the default, which is either the built-in keymap or
+        // the one given in the plugin spec.
+        QString keymapFromSpec;
+        const auto specs = m_spec.splitRef(QLatin1Char(':'));
+        for (const QStringRef &arg : specs) {
+            if (arg.startsWith(QLatin1String("keymap=")))
+                keymapFromSpec = arg.mid(7).toString();
+        }
+        foreach (QEmulatorKeyboardHandler *handler, m_keyboards) {
+            if (keymapFromSpec.isEmpty())
+                handler->unloadKeymap();
+            else
+                handler->loadKeymap(keymapFromSpec);
         }
-
-        setObjectName(QLatin1String("LinuxInput Keyboard Handler"));
-
-        QSocketNotifier *keyboardNoti;
-        keyboardNoti = new QSocketNotifier(m_fd, QSocketNotifier::Read, this);
-        const char *signal = SIGNAL(activated(int));
-        const char *slot = SLOT(readKeycode());
-        connect(keyboardNoti, signal, this, slot);
-
-        return new QEmulatorKeyboardHandler();
     } else {
-        qWarning("Cannot open keyboard input device '%s': %s", qPrintable(argDevice), strerror(errno));
-        return 0;
+        foreach (QEmulatorKeyboardHandler *handler, m_keyboards)
+            handler->loadKeymap(file);
     }
 }
 
-void QEmulatorKeyboardManager::readKeycode()
+void QEmulatorKeyboardManager::switchLang()
 {
-    struct ::input_event ie_buffer[32];
-    int num = 0;
-
-    forever {
-        int result = qt_safe_read(m_fd, reinterpret_cast<char *>(ie_buffer) + num, sizeof(ie_buffer) - num);
-
-        if (result == 0) {
-            qWarning("Got EOF from the input device.");
-            return;
-        } else if (result < 0) {
-            if (errno != EINTR && errno != EAGAIN) {
-                qWarning("Could not read from input device: %s", strerror(errno));
-                return;
-            }
-        } else {
-            num += result;
-            if (num % sizeof(ie_buffer[0]) == 0)
-                break;
-        }
-    }
-
-    num /= sizeof(ie_buffer[0]);
-
-    for (int i = 0; i < num; ++i) {
-        if (ie_buffer[i].type != EV_KEY)
-            continue;
-
-        quint16 code = ie_buffer[i].code;
-        qint32 value = ie_buffer[i].value;
-
-        keyboardHandler->processKeycode(code, value != 0, value == 2);
-    }
+    foreach (QEmulatorKeyboardHandler *handler, m_keyboards)
+        handler->switchLang();
 }
 
+#if defined(WEBOS_EMULATOR)
+void QEmulatorKeyboardManager::processKeycodeSlot(quint16 keycode, bool pressed, bool autorepeat) {
+    emit handleKeycodeSignal(keycode, pressed, autorepeat);
+}
+#endif
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/api/qemulatorkeyboardmanager.h b/src/plugins/platforms/eglfs/api/qemulatorkeyboardmanager.h
index 4cbc0c250a..f72e7a70c1 100644
--- a/src/plugins/platforms/eglfs/api/qemulatorkeyboardmanager.h
+++ b/src/plugins/platforms/eglfs/api/qemulatorkeyboardmanager.h
@@ -1,26 +1,57 @@
 /****************************************************************************
 **
-** Copyright (c) 2015-2018 LG Electronics, Inc.
-** All rights reserved.
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
 **
-** $QT_BEGIN_LICENSE:LGPL21$
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 or version 3 as published by the Free
-** Software Foundation and appearing in the file LICENSE.LGPLv21 and
-** LICENSE.LGPLv3 included in the packaging of this file. Please review the
-** following information to ensure the GNU Lesser General Public License
-** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/
 
-#ifndef QEMULATORKEYBOARDMANAGER_P_H
-#define QEMULATORKEYBOARDMANAGER_P_H
+#ifndef QEMULATORKEYBOARDMANAGER_H
+#define QEMULATORKEYBOARDMANAGER_H
 
-#include "qemulatorkeyboardhandler.h"
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API.  It exists purely as an
+// implementation detail.  This header file may change from version to
+// version without notice, or even be removed.
+//
+// We mean it.
+//
 
+#include "qemulatorkeyboardhandler.h"
 
 #include <QtDeviceDiscoverySupport/private/qdevicediscovery_p.h>
 
@@ -28,34 +59,37 @@
 #include <QHash>
 #include <QSocketNotifier>
 
-QT_BEGIN_HEADER
-
 QT_BEGIN_NAMESPACE
 
 class QEmulatorKeyboardManager : public QObject
 {
+#if defined(WEBOS_EMULATOR)
     Q_OBJECT
+#endif
 public:
     QEmulatorKeyboardManager(const QString &key, const QString &specification, QObject *parent = 0);
     ~QEmulatorKeyboardManager();
 
-private slots:
+    void loadKeymap(const QString &file);
+    void switchLang();
+
     void addKeyboard(const QString &deviceNode = QString());
     void removeKeyboard(const QString &deviceNode);
-
-    QEmulatorKeyboardHandler *create(const QString &device, const QString &specification);
-    void readKeycode();
-
+#if defined(WEBOS_EMULATOR)
+signals:
+    void handleKeycodeSignal(quint16 keycode, bool pressed, bool autorepeat);
+#endif
 private:
     QString m_spec;
-    QHash<QString, QEmulatorKeyboardHandler*> m_keyboards;
-
-    QEmulatorKeyboardHandler *keyboardHandler;
-    int m_fd;
+    QHash<QString,QEmulatorKeyboardHandler*> m_keyboards;
+    QDeviceDiscovery *m_deviceDiscovery;
+    QString m_defaultKeymapFile;
+#if defined(WEBOS_EMULATOR)
+private slots:
+    void processKeycodeSlot(quint16 keycode, bool pressed, bool autorepeat);
+#endif
 };
 
-QT_END_HEADER
-
 QT_END_NAMESPACE
 
-#endif // QEMULATORKEYBOARDMANAGER_P_H
+#endif // QEMULATORKEYBOARDMANAGER_H
diff --git a/src/plugins/platforms/eglfs/api/qemulatormousehandler.cpp b/src/plugins/platforms/eglfs/api/qemulatormousehandler.cpp
new file mode 100644
index 0000000000..e41510981a
--- /dev/null
+++ b/src/plugins/platforms/eglfs/api/qemulatormousehandler.cpp
@@ -0,0 +1,311 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qemulatormousehandler.h"
+
+#include <QSocketNotifier>
+#include <QStringList>
+#include <QPoint>
+#include <QGuiApplication>
+#include <QScreen>
+#include <QLoggingCategory>
+#include <qpa/qwindowsysteminterface.h>
+
+#include <qplatformdefs.h>
+#include <private/qcore_unix_p.h> // overrides QT_OPEN
+#include <private/qhighdpiscaling_p.h>
+
+#include <errno.h>
+
+#ifdef Q_OS_FREEBSD
+#include <dev/evdev/input.h>
+#else
+#include <linux/kd.h>
+#include <linux/input.h>
+#endif
+
+#define TEST_BIT(array, bit)    (array[bit/8] & (1<<(bit%8)))
+
+QT_BEGIN_NAMESPACE
+
+QEmulatorMouseHandler *QEmulatorMouseHandler::create(const QString &device, const QString &specification)
+{
+    qWarning() << "create mouse handler for" << device << specification;
+
+    bool compression = true;
+    int jitterLimit = 0;
+    int grab = 0;
+    bool abs = false;
+
+    const auto args = specification.splitRef(QLatin1Char(':'));
+    for (const QStringRef &arg : args) {
+        if (arg == QLatin1String("nocompress"))
+            compression = false;
+        else if (arg.startsWith(QLatin1String("dejitter=")))
+            jitterLimit = arg.mid(9).toInt();
+        else if (arg.startsWith(QLatin1String("grab=")))
+            grab = arg.mid(5).toInt();
+        else if (arg == QLatin1String("abs"))
+            abs = true;
+    }
+
+    int fd;
+    fd = qt_safe_open(device.toLocal8Bit().constData(), O_RDONLY | O_NDELAY, 0);
+    if (fd >= 0) {
+        ::ioctl(fd, EVIOCGRAB, grab);
+        return new QEmulatorMouseHandler(device, fd, abs, compression, jitterLimit);
+    } else {
+        qErrnoWarning(errno, "Cannot open mouse input device %s", qPrintable(device));
+        return 0;
+    }
+}
+
+QEmulatorMouseHandler::QEmulatorMouseHandler(const QString &device, int fd, bool abs, bool compression, int jitterLimit)
+    : m_device(device), m_fd(fd), m_notify(0), m_x(0), m_y(0), m_prevx(0), m_prevy(0),
+      m_abs(abs), m_compression(compression), m_buttons(0), m_prevInvalid(true)
+{
+    setObjectName(QLatin1String("Emulator Mouse Handler"));
+
+    m_jitterLimitSquared = jitterLimit * jitterLimit;
+
+    // Some touch screens present as mice with absolute coordinates.
+    // These can not be differentiated from touchpads, so supplying abs to QT_QPA_EVDEV_MOUSE_PARAMETERS
+    // will force qevdevmousehandler to treat the coordinates as absolute, scaled to the hardware maximums.
+    // Turning this on will not affect mice as these do not report in absolute coordinates
+    // but will make touchpads act like touch screens
+    if (m_abs)
+        m_abs = getHardwareMaximum();
+
+    // socket notifier for events on the mouse device
+    m_notify = new QSocketNotifier(m_fd, QSocketNotifier::Read, this);
+    connect(m_notify, &QSocketNotifier::activated,
+            this, &QEmulatorMouseHandler::readMouseData);
+}
+
+QEmulatorMouseHandler::~QEmulatorMouseHandler()
+{
+    if (m_fd >= 0)
+        qt_safe_close(m_fd);
+}
+
+// Ask touch screen hardware for information on coordinate maximums
+// If any ioctls fail, revert to non abs mode
+bool QEmulatorMouseHandler::getHardwareMaximum()
+{
+    unsigned char absFeatures[(ABS_MAX / 8) + 1];
+    memset(absFeatures, '\0', sizeof (absFeatures));
+
+    // test if ABS_X, ABS_Y are available
+    if (ioctl(m_fd, EVIOCGBIT(EV_ABS, sizeof (absFeatures)), absFeatures) == -1)
+        return false;
+
+    if ((!TEST_BIT(absFeatures, ABS_X)) || (!TEST_BIT(absFeatures, ABS_Y)))
+        return false;
+
+    // ask hardware for minimum and maximum values
+    struct input_absinfo absInfo;
+    if (ioctl(m_fd, EVIOCGABS(ABS_X), &absInfo) == -1)
+        return false;
+
+    m_hardwareWidth = absInfo.maximum - absInfo.minimum;
+
+    if (ioctl(m_fd, EVIOCGABS(ABS_Y), &absInfo) == -1)
+        return false;
+
+    m_hardwareHeight = absInfo.maximum - absInfo.minimum;
+
+    QScreen *primaryScreen = QGuiApplication::primaryScreen();
+    QRect g = QHighDpi::toNativePixels(primaryScreen->virtualGeometry(), primaryScreen);
+    m_hardwareScalerX = static_cast<qreal>(m_hardwareWidth) / (g.right() - g.left());
+    m_hardwareScalerY = static_cast<qreal>(m_hardwareHeight) / (g.bottom() - g.top());
+
+    qWarning() << "Absolute pointing device"
+                           << "hardware max x" << m_hardwareWidth
+                           << "hardware max y" << m_hardwareHeight
+                           << "hardware scalers x" << m_hardwareScalerX << 'y' << m_hardwareScalerY;
+
+    return true;
+}
+
+void QEmulatorMouseHandler::sendMouseEvent()
+{
+    int x;
+    int y;
+
+    if (!m_abs) {
+        x = m_x - m_prevx;
+        y = m_y - m_prevy;
+    }
+    else {
+        x = m_x / m_hardwareScalerX;
+        y = m_y / m_hardwareScalerY;
+    }
+
+    if (m_prevInvalid) {
+        x = y = 0;
+        m_prevInvalid = false;
+    }
+
+    emit handleMouseEvent(x, y, m_abs, m_buttons, m_button, m_eventType);
+
+    m_prevx = m_x;
+    m_prevy = m_y;
+}
+
+void QEmulatorMouseHandler::readMouseData()
+{
+    struct ::input_event buffer[32];
+    int n = 0;
+    bool posChanged = false, btnChanged = false;
+    bool pendingMouseEvent = false;
+    int eventCompressCount = 0;
+    forever {
+        int result = QT_READ(m_fd, reinterpret_cast<char *>(buffer) + n, sizeof(buffer) - n);
+
+        if (result == 0) {
+            qWarning("emulatormouse: Got EOF from the input device");
+            return;
+        } else if (result < 0) {
+            if (errno != EINTR && errno != EAGAIN) {
+                qErrnoWarning(errno, "emulatormouse: Could not read from input device");
+                // If the device got disconnected, stop reading, otherwise we get flooded
+                // by the above error over and over again.
+                if (errno == ENODEV) {
+                    delete m_notify;
+                    m_notify = nullptr;
+                    qt_safe_close(m_fd);
+                    m_fd = -1;
+                }
+                return;
+            }
+        } else {
+            n += result;
+            if (n % sizeof(buffer[0]) == 0)
+                break;
+        }
+    }
+
+    n /= sizeof(buffer[0]);
+
+    for (int i = 0; i < n; ++i) {
+        struct ::input_event *data = &buffer[i];
+        if (data->type == EV_ABS) {
+            // Touchpads: store the absolute position for now, will calculate a relative one later.
+            if (data->code == ABS_X && m_x != data->value) {
+                m_x = data->value;
+                posChanged = true;
+            } else if (data->code == ABS_Y && m_y != data->value) {
+                m_y = data->value;
+                posChanged = true;
+            }
+        } else if (data->type == EV_REL) {
+            QPoint delta;
+            if (data->code == REL_X) {
+                m_x += data->value;
+                posChanged = true;
+            } else if (data->code == REL_Y) {
+                m_y += data->value;
+                posChanged = true;
+            } else if (data->code == ABS_WHEEL) { // vertical scroll
+                // data->value: positive == up, negative == down
+                delta.setY(120 * data->value);
+                emit handleWheelEvent(delta);
+            } else if (data->code == ABS_THROTTLE) { // horizontal scroll
+                // data->value: positive == right, negative == left
+                delta.setX(-120 * data->value);
+                emit handleWheelEvent(delta);
+            }
+        } else if (data->type == EV_KEY && data->code == BTN_TOUCH) {
+            // We care about touchpads only, not touchscreens -> don't map to button press.
+            // Need to invalidate prevx/y however to get proper relative pos.
+            m_prevInvalid = true;
+        } else if (data->type == EV_KEY && data->code >= BTN_LEFT && data->code <= BTN_JOYSTICK) {
+            Qt::MouseButton button = Qt::NoButton;
+            // BTN_LEFT == 0x110 in kernel's input.h
+            // The range of possible mouse buttons ends just before BTN_JOYSTICK, value 0x120.
+            switch (data->code) {
+            case 0x110: button = Qt::LeftButton; break;    // BTN_LEFT
+            case 0x111: button = Qt::RightButton; break;
+            case 0x112: button = Qt::MiddleButton; break;
+            case 0x113: button = Qt::ExtraButton1; break;  // AKA Qt::BackButton
+            case 0x114: button = Qt::ExtraButton2; break;  // AKA Qt::ForwardButton
+            case 0x115: button = Qt::ExtraButton3; break;  // AKA Qt::TaskButton
+            case 0x116: button = Qt::ExtraButton4; break;
+            case 0x117: button = Qt::ExtraButton5; break;
+            case 0x118: button = Qt::ExtraButton6; break;
+            case 0x119: button = Qt::ExtraButton7; break;
+            case 0x11a: button = Qt::ExtraButton8; break;
+            case 0x11b: button = Qt::ExtraButton9; break;
+            case 0x11c: button = Qt::ExtraButton10; break;
+            case 0x11d: button = Qt::ExtraButton11; break;
+            case 0x11e: button = Qt::ExtraButton12; break;
+            case 0x11f: button = Qt::ExtraButton13; break;
+            }
+            m_buttons.setFlag(button, data->value);
+            m_button = button;
+            m_eventType = data->value == 0 ? QEvent::MouseButtonRelease : QEvent::MouseButtonPress;
+            btnChanged = true;
+        } else if (data->type == EV_SYN && data->code == SYN_REPORT) {
+            if (btnChanged) {
+                btnChanged = posChanged = false;
+                sendMouseEvent();
+                pendingMouseEvent = false;
+            } else if (posChanged) {
+                m_eventType = QEvent::MouseMove;
+                posChanged = false;
+                if (m_compression) {
+                    pendingMouseEvent = true;
+                    eventCompressCount++;
+                } else {
+                    sendMouseEvent();
+                }
+            }
+        } else if (data->type == EV_MSC && data->code == MSC_SCAN) {
+            // kernel encountered an unmapped key - just ignore it
+            continue;
+        }
+    }
+    if (m_compression && pendingMouseEvent) {
+        int distanceSquared = (m_x - m_prevx)*(m_x - m_prevx) + (m_y - m_prevy)*(m_y - m_prevy);
+        if (distanceSquared > m_jitterLimitSquared)
+            sendMouseEvent();
+    }
+}
+
+QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/api/qemulatormousehandler.h b/src/plugins/platforms/eglfs/api/qemulatormousehandler.h
new file mode 100644
index 0000000000..6531a1e687
--- /dev/null
+++ b/src/plugins/platforms/eglfs/api/qemulatormousehandler.h
@@ -0,0 +1,103 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QEMULATORMOUSEHANDLER_H
+#define QEMULATORMOUSEHANDLER_H
+
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API.  It exists purely as an
+// implementation detail.  This header file may change from version to
+// version without notice, or even be removed.
+//
+// We mean it.
+//
+
+#include <QObject>
+#include <QString>
+#include <QPoint>
+#include <QEvent>
+
+QT_BEGIN_NAMESPACE
+
+class QSocketNotifier;
+
+class QEmulatorMouseHandler : public QObject
+{
+    Q_OBJECT
+public:
+    static QEmulatorMouseHandler *create(const QString &device, const QString &specification);
+    ~QEmulatorMouseHandler();
+
+    void readMouseData();
+
+signals:
+    void handleMouseEvent(int x, int y, bool abs, Qt::MouseButtons buttons,
+                          Qt::MouseButton button, QEvent::Type type);
+    void handleWheelEvent(QPoint delta);
+
+private:
+    QEmulatorMouseHandler(const QString &device, int fd, bool abs, bool compression, int jitterLimit);
+
+    void sendMouseEvent();
+    bool getHardwareMaximum();
+
+    QString m_device;
+    int m_fd;
+    QSocketNotifier *m_notify;
+    int m_x, m_y;
+    int m_prevx, m_prevy;
+    bool m_abs;
+    bool m_compression;
+    Qt::MouseButtons m_buttons;
+    Qt::MouseButton m_button;
+    QEvent::Type m_eventType;
+    int m_jitterLimitSquared;
+    bool m_prevInvalid;
+    int m_hardwareWidth;
+    int m_hardwareHeight;
+    qreal m_hardwareScalerY;
+    qreal m_hardwareScalerX;
+};
+
+QT_END_NAMESPACE
+
+#endif // QEMULATORMOUSEHANDLER_H
diff --git a/src/plugins/platforms/eglfs/api/qemulatormousemanager.cpp b/src/plugins/platforms/eglfs/api/qemulatormousemanager.cpp
new file mode 100644
index 0000000000..605c17f7b9
--- /dev/null
+++ b/src/plugins/platforms/eglfs/api/qemulatormousemanager.cpp
@@ -0,0 +1,456 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qemulatormousemanager.h"
+
+#include <QStringList>
+#include <QGuiApplication>
+#include <QScreen>
+#include <QLoggingCategory>
+#include <QtDeviceDiscoverySupport/private/qdevicediscovery_p.h>
+#include <private/qguiapplication_p.h>
+#include <private/qinputdevicemanager_p_p.h>
+#include <private/qhighdpiscaling_p.h>
+
+#if defined(WEBOS_EMULATOR)
+#include <sys/ioctl.h>
+#include <fcntl.h>
+#endif
+
+QT_BEGIN_NAMESPACE
+
+QEmulatorMouseManager::QEmulatorMouseManager(const QString &key, const QString &specification, QObject *parent)
+    : QObject(parent), m_x(0), m_y(0), m_xoffset(0), m_yoffset(0)
+#if defined(WEBOS_EMULATOR)
+    , m_touchState(0), m_isTouch(true), m_isMultiTouch(false)
+{
+    enableVboxHostMousePointer();
+    registerTouchDevice();
+#else
+{
+#endif
+    Q_UNUSED(key);
+
+    QString spec = QString::fromLocal8Bit(qgetenv("QT_QPA_EVDEV_MOUSE_PARAMETERS"));
+
+    if (spec.isEmpty())
+        spec = specification;
+
+    QStringList args = spec.split(QLatin1Char(':'));
+    QStringList devices;
+
+    foreach (const QString &arg, args) {
+        if (arg.startsWith(QLatin1String("/dev/"))) {
+            // if device is specified try to use it
+            devices.append(arg);
+            args.removeAll(arg);
+        } else if (arg.startsWith(QLatin1String("xoffset="))) {
+            m_xoffset = arg.mid(8).toInt();
+        } else if (arg.startsWith(QLatin1String("yoffset="))) {
+            m_yoffset = arg.mid(8).toInt();
+        }
+    }
+
+    // build new specification without /dev/ elements
+    m_spec = args.join(QLatin1Char(':'));
+
+    // add all mice for devices specified in the argument list
+    foreach (const QString &device, devices)
+        addMouse(device);
+
+    if (devices.isEmpty()) {
+        qWarning() << "emulatormouse: Using device discovery";
+        m_deviceDiscovery = QDeviceDiscovery::create(QDeviceDiscovery::Device_Mouse | QDeviceDiscovery::Device_Touchpad, this);
+        if (m_deviceDiscovery) {
+            // scan and add already connected keyboards
+            const QStringList devices = m_deviceDiscovery->scanConnectedDevices();
+            for (const QString &device : devices)
+                addMouse(device);
+
+            connect(m_deviceDiscovery, &QDeviceDiscovery::deviceDetected,
+                    this, &QEmulatorMouseManager::addMouse);
+            connect(m_deviceDiscovery, &QDeviceDiscovery::deviceRemoved,
+                    this, &QEmulatorMouseManager::removeMouse);
+        }
+    }
+
+    QInputDeviceManager *manager = QGuiApplicationPrivate::inputDeviceManager();
+    connect(manager, &QInputDeviceManager::cursorPositionChangeRequested, [this](const QPoint &pos) {
+        m_x = pos.x();
+        m_y = pos.y();
+        clampPosition();
+    });
+}
+
+QEmulatorMouseManager::~QEmulatorMouseManager()
+{
+    qDeleteAll(m_mice);
+    m_mice.clear();
+#if defined(WEBOS_EMULATOR)
+    unregisterTouchDevice();
+#endif
+}
+
+void QEmulatorMouseManager::clampPosition()
+{
+    // clamp to screen geometry
+    QScreen *primaryScreen = QGuiApplication::primaryScreen();
+    QRect g = QHighDpi::toNativePixels(primaryScreen->virtualGeometry(), primaryScreen);
+    if (m_x + m_xoffset < g.left())
+        m_x = g.left() - m_xoffset;
+    else if (m_x + m_xoffset > g.right())
+        m_x = g.right() - m_xoffset;
+
+    if (m_y + m_yoffset < g.top())
+        m_y = g.top() - m_yoffset;
+    else if (m_y + m_yoffset > g.bottom())
+        m_y = g.bottom() - m_yoffset;
+}
+
+#if defined(WEBOS_EMULATOR)
+void QEmulatorMouseManager::registerTouchDevice()
+{
+// for Multi-profile case...
+//    if (m_touchDevice)
+//        return;
+
+    m_touchDevice = new QTouchDevice;
+    m_touchDevice->setName(QLatin1String("EmulatorTouch"));
+    m_touchDevice->setType(QTouchDevice::TouchScreen);
+    m_touchDevice->setCapabilities(QTouchDevice::Position | QTouchDevice::Area);
+    m_touchDevice->setCapabilities(m_touchDevice->capabilities() | QTouchDevice::Pressure);
+
+    QWindowSystemInterface::registerTouchDevice(m_touchDevice);
+}
+
+void QEmulatorMouseManager::unregisterTouchDevice()
+{
+    if (!m_touchDevice)
+        return;
+
+    // At app exit the cleanup may have already been done, avoid
+    // double delete by checking the list first.
+    if (QWindowSystemInterface::isTouchDeviceRegistered(m_touchDevice)) {
+        QWindowSystemInterface::unregisterTouchDevice(m_touchDevice);
+        delete m_touchDevice;
+    }
+
+    m_touchDevice = nullptr;
+}
+
+QWindowSystemInterface::TouchPoint QEmulatorMouseManager::translateTouchPoint(QPoint pos, Qt::MouseButton button, QEvent::Type type, int index) {
+    QWindowSystemInterface::TouchPoint touchPoint;
+    QPoint pt(pos);
+    QRect rc = QGuiApplication::primaryScreen()->virtualGeometry();
+
+    touchPoint.id = index;
+    touchPoint.normalPosition = QPointF((qreal)pt.x() / (qreal)rc.width(), (qreal)pt.y() / (qreal)rc.height());
+    touchPoint.area = QRectF(pt, QSize(1,1));
+    touchPoint.pressure = 1;
+
+    if (button == Qt::LeftButton) {
+        if (type == QEvent::MouseButtonPress) {
+            if (index == 0) m_touchState = 1;
+            touchPoint.state = Qt::TouchPointPressed;
+        } else if (type == QEvent::MouseButtonRelease) {
+            if (index == 0) {
+                m_touchState = 0;
+                m_isMultiTouch = 0;
+            }
+            touchPoint.state = Qt::TouchPointReleased;
+        }
+    } else if (m_touchState == 1) {
+        touchPoint.state = Qt::TouchPointMoved;
+    } else {
+        touchPoint.state = Qt::TouchPointReleased;
+        touchPoint.pressure = 0;
+    }
+
+    return touchPoint;
+}
+#endif
+
+void QEmulatorMouseManager::handleMouseEvent(int x, int y, bool abs, Qt::MouseButtons buttons,
+                                          Qt::MouseButton button, QEvent::Type type)
+{
+#if defined(WEBOS_EMULATOR)
+    if ((type == QEvent::KeyPress) || (type == QEvent::KeyRelease)) {
+        if ((x == 0x38) && (!m_isMultiTouch) && (m_touchState == 0) && (type == QEvent::KeyRelease)) {  // LAlt
+            m_isTouch = !m_isTouch;
+        } else if ((x == 0x1d) && (m_isTouch) && (m_touchState == 0)) {     // LCtrl
+            m_isMultiTouch = (type == QEvent::KeyPress);
+        }
+        return;
+    }
+#endif
+    // update current absolute coordinates
+    if (!abs) {
+        m_x += x;
+        m_y += y;
+    } else {
+        m_x = x;
+        m_y = y;
+    }
+
+    clampPosition();
+
+    QPoint pos(m_x + m_xoffset, m_y + m_yoffset);
+#if defined(WEBOS_EMULATOR)
+    if (!m_isTouch) {
+        QWindowSystemInterface::handleMouseEvent(0, pos, pos, buttons, button, type, QGuiApplicationPrivate::inputDeviceManager()->keyboardModifiers());
+    } else {
+        //QPoint pos(x+m_xoffset, y+m_yoffset);
+        //convert to touch event
+        QList<QWindowSystemInterface::TouchPoint> pointList;
+
+        QWindowSystemInterface::TouchPoint point = translateTouchPoint(pos, button, type, 0);
+        if (point.pressure != 0) {
+            pointList.append(point);
+        }
+
+        if (m_isMultiTouch) {
+            QRect screenRect = (QGuiApplication::screenAt(pos))->availableGeometry();
+            int centerX, centerY;
+            centerX = screenRect.width()/2 + screenRect.left();
+            centerY = screenRect.height()/2 + screenRect.top();
+            QPoint pos2(centerX - (pos.x() - centerX), centerY - (pos.y() - centerY));
+            QWindowSystemInterface::TouchPoint secondPoint = translateTouchPoint(pos2, button, type, 1);
+            if (secondPoint.pressure != 0) {
+                pointList.append(secondPoint);
+            }
+        }
+        if (pointList.count() > 0)
+            QWindowSystemInterface::handleTouchEvent(0, m_touchDevice, pointList);
+    }
+#else
+    // Cannot track the keyboard modifiers ourselves here. Instead, report the
+    // modifiers from the last key event that has been seen by QGuiApplication.
+    QWindowSystemInterface::handleMouseEvent(0, pos, pos, buttons, button, type, QGuiApplicationPrivate::inputDeviceManager()->keyboardModifiers());
+#endif
+}
+
+void QEmulatorMouseManager::handleWheelEvent(QPoint delta)
+{
+    QPoint pos(m_x + m_xoffset, m_y + m_yoffset);
+    QWindowSystemInterface::handleWheelEvent(0, pos, pos, QPoint(), delta, QGuiApplicationPrivate::inputDeviceManager()->keyboardModifiers());
+}
+
+void QEmulatorMouseManager::addMouse(const QString &deviceNode)
+{
+    qWarning() << "Adding mouse at" << deviceNode;
+    QEmulatorMouseHandler *handler = QEmulatorMouseHandler::create(deviceNode, m_spec);
+    if (handler) {
+        connect(handler, &QEmulatorMouseHandler::handleMouseEvent,
+                this, &QEmulatorMouseManager::handleMouseEvent);
+        connect(handler, &QEmulatorMouseHandler::handleWheelEvent,
+                this, &QEmulatorMouseManager::handleWheelEvent);
+        m_mice.insert(deviceNode, handler);
+        QInputDeviceManagerPrivate::get(QGuiApplicationPrivate::inputDeviceManager())->setDeviceCount(
+#if defined(WEBOS_EMULATOR)
+            QInputDeviceManager::DeviceTypeTouch, m_mice.count());
+#else
+            QInputDeviceManager::DeviceTypePointer, m_mice.count());
+#endif
+    } else {
+        qWarning("emulatormouse: Failed to open mouse device %s", qPrintable(deviceNode));
+    }
+}
+
+void QEmulatorMouseManager::removeMouse(const QString &deviceNode)
+{
+    if (m_mice.contains(deviceNode)) {
+        qWarning() << "Removing mouse at" << deviceNode;
+        QEmulatorMouseHandler *handler = m_mice.value(deviceNode);
+        m_mice.remove(deviceNode);
+        QInputDeviceManagerPrivate::get(QGuiApplicationPrivate::inputDeviceManager())->setDeviceCount(
+#if defined(WEBOS_EMULATOR)
+            QInputDeviceManager::DeviceTypeTouch, m_mice.count());
+#else
+            QInputDeviceManager::DeviceTypePointer, m_mice.count());
+#endif
+        delete handler;
+    }
+}
+
+#if defined(WEBOS_EMULATOR)
+void QEmulatorMouseManager::handleKeycodeSlot(quint16 keycode, bool pressed, bool autorepeat)
+{
+    if ((keycode == 0x38) && (!m_isMultiTouch) && (m_touchState == 0) && (!pressed)) {  // LAlt
+        m_isTouch = !m_isTouch;
+    } else if ((keycode == 0x1d) && (m_isTouch) && (m_touchState == 0)) {     // LCtrl
+        m_isMultiTouch = pressed;
+    }
+}
+
+#define VBOXGUEST_IOCTL_FLAG     0
+#define VBOXGUEST_IOCTL_CODE_(Function, Size)  _IOC(_IOC_READ|_IOC_WRITE, 'V', (Function), (Size))
+#define VBOXGUEST_IOCTL_CODE(Function, Size)   VBOXGUEST_IOCTL_CODE_((Function) | VBOXGUEST_IOCTL_FLAG, Size)
+#define VBOXGUEST_IOCTL_VMMREQUEST(Size)       VBOXGUEST_IOCTL_CODE(2, (Size))
+
+/** generic VMMDev request header */
+typedef struct
+{
+	/** size of the structure in bytes (including body). Filled by caller */
+	uint32_t size;
+	/** version of the structure. Filled by caller */
+	uint32_t version;
+	/** type of the request */
+	/*VMMDevRequestType*/ uint32_t requestType;
+	/** return code. Filled by VMMDev */
+	int32_t  rc;
+	/** reserved fields */
+	uint32_t reserved1;
+	uint32_t reserved2;
+} VMMdev_request_header;
+
+/** mouse status request structure */
+typedef struct
+{
+	/** header */
+	VMMdev_request_header header;
+	/** mouse feature mask */
+	uint32_t mouseFeatures;
+	/** mouse x position */
+	int32_t pointerXPos;
+	/** mouse y position */
+	int32_t pointerYPos;
+} VMMdev_req_mouse_status;
+
+/**
+ * mouse pointer shape/visibility change request
+ */
+typedef struct VMMdev_req_mouse_pointer
+{
+	/** Header. */
+	VMMdev_request_header header;
+	/** VBOX_MOUSE_POINTER_* bit flags. */
+	uint32_t fFlags;
+	/** x coordinate of hot spot. */
+	uint32_t xHot;
+	/** y coordinate of hot spot. */
+	uint32_t yHot;
+	/** Width of the pointer in pixels. */
+	uint32_t width;
+	/** Height of the pointer in scanlines. */
+	uint32_t height;
+	/** Pointer data. */
+	char pointerData[4];
+} VMMdev_req_mouse_pointer;
+
+// for using the VBOX host cursor
+void QEmulatorMouseManager::enableVboxHostMousePointer()
+{
+    // Open the VirtualBox kernel module driver
+    int vbox_fd = open("/dev/vboxguest", O_RDWR, 0);
+
+    if (vbox_fd < 0)
+    {
+        qWarning("ERROR: vboxguest module open failed: %d", errno);
+        goto error;
+    }
+
+    VMMdev_req_mouse_status Req;
+    Req.header.size        = (uint32_t)sizeof(VMMdev_req_mouse_status);
+    Req.header.version     = 0x10001;   // VMMDEV_REQUEST_HEADER_VERSION;
+    Req.header.requestType = 2;         // VMMDevReq_SetMouseStatus;
+    Req.header.rc          = -1;        // VERR_GENERAL_FAILURE;
+    Req.header.reserved1   = 0;
+    Req.header.reserved2   = 0;
+
+    // set MouseGuestNeedsHostCursor (bit 2)
+    Req.mouseFeatures = (1 << 2);
+    Req.pointerXPos = 0;
+    Req.pointerYPos = 0;
+
+    // perform VMM request
+    if (ioctl(vbox_fd, VBOXGUEST_IOCTL_VMMREQUEST(Req.header.size),
+              (void *)&Req.header) < 0)
+    {
+        qWarning("ERROR: vboxguest rms ioctl failed: %d", errno);
+        goto error;
+    }
+    else if (Req.header.rc < 0)
+    {
+        qWarning("ERROR: vboxguest SetMouseStatus failed: %d", Req.header.rc);
+        goto error;
+    }
+
+    VMMdev_req_mouse_pointer mpReq;
+    mpReq.header.size        = (uint32_t)sizeof(VMMdev_req_mouse_pointer);
+    mpReq.header.version     = 0x10001; // VMMDEV_REQUEST_HEADER_VERSION;
+    mpReq.header.requestType = 3;       // VMMDevReq_SetPointerShape;
+    mpReq.header.rc          = -1;      // VERR_GENERAL_FAILURE;
+    mpReq.header.reserved1   = 0;
+    mpReq.header.reserved2   = 0;
+
+    // set fields for SetPointerShape (most importantly VISIBLE)
+    mpReq.fFlags = 1;           // VBOX_MOUSE_POINTER_VISIBLE;
+    mpReq.xHot = 0;
+    mpReq.yHot = 0;
+    mpReq.width = 0;
+    mpReq.height = 0;
+    mpReq.pointerData[0] = 0;
+    mpReq.pointerData[1] = 0;
+    mpReq.pointerData[2] = 0;
+    mpReq.pointerData[3] = 0;
+
+    // perform VMM request
+    if (ioctl(vbox_fd, VBOXGUEST_IOCTL_VMMREQUEST(mpReq.header.size),
+              (void *)&mpReq.header) < 0)
+    {
+        qWarning("ERROR: vboxguest mpr ioctl failed: %d", errno);
+        goto error;
+    }
+    else if (mpReq.header.rc < 0)
+    {
+        qWarning("ERROR: vboxguest SetPointerShape failed: %d", mpReq.header.rc);
+        goto error;
+    }
+
+    return;
+error:
+    if (vbox_fd >= 0)
+    {
+        close(vbox_fd);
+    }
+
+    return;
+}
+#endif
+QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/api/qemulatormousemanager.h b/src/plugins/platforms/eglfs/api/qemulatormousemanager.h
new file mode 100644
index 0000000000..a86e579111
--- /dev/null
+++ b/src/plugins/platforms/eglfs/api/qemulatormousemanager.h
@@ -0,0 +1,114 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QEMULATORMOUSEMANAGER_H
+#define QEMULATORMOUSEMANAGER_H
+
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API.  It exists purely as an
+// implementation detail.  This header file may change from version to
+// version without notice, or even be removed.
+//
+// We mean it.
+//
+
+#include "qemulatormousehandler.h"
+
+#include <QObject>
+#include <QHash>
+#include <QSocketNotifier>
+#include <QPoint>
+#include <qpa/qwindowsysteminterface.h>
+#if defined(WEBOS_EMULATOR)
+#include <QTouchDevice>
+#endif
+
+QT_BEGIN_NAMESPACE
+
+class QDeviceDiscovery;
+
+class QEmulatorMouseManager : public QObject
+{
+public:
+    QEmulatorMouseManager(const QString &key, const QString &specification, QObject *parent = 0);
+    ~QEmulatorMouseManager();
+
+#if defined(WEBOS_EMULATOR)
+    void registerTouchDevice();
+    void unregisterTouchDevice();
+    QWindowSystemInterface::TouchPoint translateTouchPoint(QPoint pos, Qt::MouseButton button, QEvent::Type type, int index);
+#endif
+    void handleMouseEvent(int x, int y, bool abs, Qt::MouseButtons buttons,
+                          Qt::MouseButton button, QEvent::Type type);
+    void handleWheelEvent(QPoint delta);
+
+    void addMouse(const QString &deviceNode = QString());
+    void removeMouse(const QString &deviceNode);
+
+#if defined(WEBOS_EMULATOR)
+public slots:
+    void handleKeycodeSlot(quint16 keycode, bool pressed, bool autorepeat);
+#endif
+private:
+    void clampPosition();
+
+    QString m_spec;
+    QHash<QString,QEmulatorMouseHandler*> m_mice;
+    QDeviceDiscovery *m_deviceDiscovery;
+    int m_x;
+    int m_y;
+    int m_xoffset;
+    int m_yoffset;
+
+#if defined(WEBOS_EMULATOR)
+    QTouchDevice *m_touchDevice;
+    int m_touchState;
+    bool m_isTouch;
+    bool m_isMultiTouch;
+
+    void enableVboxHostMousePointer();
+#endif
+};
+
+QT_END_NAMESPACE
+
+#endif // QEMULATORMOUSEMANAGER_H
