From d85665e7b76bc30ba614d324115a9ef252da31c2 Mon Sep 17 00:00:00 2001
From: Jaeyoon Jung <jaeyoon.jung@lge.com>
Date: Thu, 28 Mar 2019 02:09:30 +0900
Subject: [PATCH] eglfs: Associate touch device with window

:Release Notes:
Add an optional "touchDevice" field in QT_QPA_EGLFS_CONFIG and make
an association between the device and the window under the given output.

:Detailed Notes:
This patch introduces a field "touchDevice" in QT_QPA_EGLFS_CONFIG just
like keyboard case. The logic is also the same except this field should
always be defined per touchscreen device to be used.
This is not yet implemented for touch plugins other than Evdev.

:Testing Performed:
Confirmed touch events are delivered to the window associated.

:QA Notes:

:Issues Addressed:
[PLAT-61071] Improve the event handling flow for multi display
[PLAT-54519] Handle touch events for dual displays
[PLAT-85154] Improve DRM/input device detection logic

Change-Id: Ib7a8b7afd5a525cdc2a059e790badc7f8c098714
---
 .../input/evdevtouch/qevdevtouchhandler.cpp   | 39 ++++++++++++++++---
 .../input/evdevtouch/qevdevtouchhandler_p.h   | 11 ++++++
 .../input/evdevtouch/qevdevtouchmanager.cpp   | 14 +++++++
 .../input/evdevtouch/qevdevtouchmanager_p.h   |  4 ++
 .../eglfs/api/qeglfsdeviceintegration.cpp     |  6 +++
 .../eglfs/api/qeglfsdeviceintegration_p.h     |  1 +
 .../platforms/eglfs/api/qeglfsintegration.cpp |  6 ++-
 .../platforms/eglfs/api/qeglfsintegration_p.h |  2 +
 .../qeglfskmsintegration.cpp                  |  5 +++
 .../eglfs_kms_support/qeglfskmsintegration.h  |  1 +
 10 files changed, 81 insertions(+), 8 deletions(-)

diff --git a/src/platformsupport/input/evdevtouch/qevdevtouchhandler.cpp b/src/platformsupport/input/evdevtouch/qevdevtouchhandler.cpp
index f3cc160b3e..4baa4b31e9 100644
--- a/src/platformsupport/input/evdevtouch/qevdevtouchhandler.cpp
+++ b/src/platformsupport/input/evdevtouch/qevdevtouchhandler.cpp
@@ -192,7 +192,7 @@ static inline bool testBit(long bit, const long *array)
 #endif
 
 QEvdevTouchScreenHandler::QEvdevTouchScreenHandler(const QString &device, const QString &spec, QObject *parent)
-    : QObject(parent), m_notify(nullptr), m_fd(-1), d(nullptr), m_device(nullptr)
+    : QObject(parent), m_notify(nullptr), m_fd(-1), d(nullptr), m_device(nullptr), m_thread(qobject_cast<QEvdevTouchScreenHandlerThread*>(parent))
 #if QT_CONFIG(mtdev)
       , m_mtdev(nullptr)
 #endif
@@ -376,6 +376,11 @@ QTouchDevice *QEvdevTouchScreenHandler::touchDevice() const
     return m_device;
 }
 
+QWindow *QEvdevTouchScreenHandler::window() const
+{
+    return m_thread ? m_thread->window() : Q_NULLPTR;
+}
+
 void QEvdevTouchScreenHandler::readData()
 {
     ::input_event buffer[32];
@@ -745,7 +750,14 @@ QRect QEvdevTouchScreenData::screenGeometry() const
 
 void QEvdevTouchScreenData::reportPoints()
 {
-    QRect winRect = screenGeometry();
+    QRect winRect;
+    QWindow *window = q->window();
+
+    if (window)
+        winRect = QHighDpi::toNativePixels(window->geometry(), window);
+    else
+        winRect = screenGeometry();
+
     if (winRect.isNull())
         return;
 
@@ -781,7 +793,7 @@ void QEvdevTouchScreenData::reportPoints()
     if (m_filtered)
         emit q->touchPointsUpdated();
     else
-        QWindowSystemInterface::handleTouchEvent(nullptr, q->touchDevice(), m_touchPoints);
+        QWindowSystemInterface::handleTouchEvent(window, q->touchDevice(), m_touchPoints);
 }
 
 QEvdevTouchScreenHandlerThread::QEvdevTouchScreenHandlerThread(const QString &device, const QString &spec, QObject *parent)
@@ -789,6 +801,7 @@ QEvdevTouchScreenHandlerThread::QEvdevTouchScreenHandlerThread(const QString &de
     , m_touchUpdatePending(false)
     , m_filterWindow(nullptr)
     , m_touchRate(-1)
+    , m_window(nullptr)
 {
     start();
 }
@@ -801,7 +814,7 @@ QEvdevTouchScreenHandlerThread::~QEvdevTouchScreenHandlerThread()
 
 void QEvdevTouchScreenHandlerThread::run()
 {
-    m_handler = new QEvdevTouchScreenHandler(m_device, m_spec);
+    m_handler = new QEvdevTouchScreenHandler(m_device, m_spec, this);
 
     if (m_handler->isFiltered())
         connect(m_handler, &QEvdevTouchScreenHandler::touchPointsUpdated, this, &QEvdevTouchScreenHandlerThread::scheduleTouchPointUpdate);
@@ -853,7 +866,14 @@ bool QEvdevTouchScreenHandlerThread::eventFilter(QObject *object, QEvent *event)
 
 void QEvdevTouchScreenHandlerThread::filterAndSendTouchPoints()
 {
-    QRect winRect = m_handler->d->screenGeometry();
+    QRect winRect;
+    QWindow *window = m_handler->d->q->window();
+
+    if (window)
+        winRect = QHighDpi::toNativePixels(window->geometry(), window);
+    else
+        winRect = m_handler->d->screenGeometry();
+
     if (winRect.isNull())
         return;
 
@@ -953,10 +973,17 @@ void QEvdevTouchScreenHandlerThread::filterAndSendTouchPoints()
 
     m_filteredPoints = filteredPoints;
 
-    QWindowSystemInterface::handleTouchEvent(nullptr,
+    QWindowSystemInterface::handleTouchEvent(window,
                                              m_handler->touchDevice(),
                                              points);
 }
 
+void QEvdevTouchScreenHandlerThread::setWindow(QWindow *window)
+{
+    if (m_window != window) {
+        qCDebug(qLcEvdevTouch) << "touch device" << m_device << "is now associated with window" << window;
+        m_window = window;
+    }
+}
 
 QT_END_NAMESPACE
diff --git a/src/platformsupport/input/evdevtouch/qevdevtouchhandler_p.h b/src/platformsupport/input/evdevtouch/qevdevtouchhandler_p.h
index 56308d0352..22de69f5b9 100644
--- a/src/platformsupport/input/evdevtouch/qevdevtouchhandler_p.h
+++ b/src/platformsupport/input/evdevtouch/qevdevtouchhandler_p.h
@@ -57,6 +57,7 @@
 #include <QString>
 #include <QList>
 #include <QThread>
+#include <QWindow>
 #include <QtCore/private/qthread_p.h>
 #include <qpa/qwindowsysteminterface.h>
 #include "qevdevtouchfilter_p.h"
@@ -69,6 +70,7 @@ QT_BEGIN_NAMESPACE
 
 class QSocketNotifier;
 class QEvdevTouchScreenData;
+class QEvdevTouchScreenHandlerThread;
 
 class QEvdevTouchScreenHandler : public QObject
 {
@@ -82,6 +84,8 @@ public:
 
     bool isFiltered() const;
 
+    QWindow *window() const;
+
     void readData();
 
 signals:
@@ -101,6 +105,8 @@ private:
 #if QT_CONFIG(mtdev)
     mtdev *m_mtdev;
 #endif
+
+    QEvdevTouchScreenHandlerThread *m_thread;
 };
 
 class QEvdevTouchScreenHandlerThread : public QDaemonThread
@@ -117,6 +123,9 @@ public:
 
     void scheduleTouchPointUpdate();
 
+    QWindow *window() const { return m_window; }
+    void setWindow(QWindow *window);
+
 signals:
     void touchDeviceRegistered();
 
@@ -142,6 +151,8 @@ private:
     QHash<int, FilteredTouchPoint> m_filteredPoints;
 
     float m_touchRate;
+
+    QWindow *m_window;
 };
 
 QT_END_NAMESPACE
diff --git a/src/platformsupport/input/evdevtouch/qevdevtouchmanager.cpp b/src/platformsupport/input/evdevtouch/qevdevtouchmanager.cpp
index 4cacbf03e5..8e52ee52be 100644
--- a/src/platformsupport/input/evdevtouch/qevdevtouchmanager.cpp
+++ b/src/platformsupport/input/evdevtouch/qevdevtouchmanager.cpp
@@ -109,6 +109,8 @@ void QEvdevTouchManager::addDevice(const QString &deviceNode)
     handler = new QEvdevTouchScreenHandlerThread(deviceNode, m_spec);
     if (handler) {
         m_activeDevices.insert(deviceNode, handler);
+        if (m_windows.contains(deviceNode))
+            handler->setWindow(m_windows.value(deviceNode));
         connect(handler, &QEvdevTouchScreenHandlerThread::touchDeviceRegistered, this, &QEvdevTouchManager::updateInputDeviceCount);
     } else {
         qWarning("evdevtouch: Failed to open touch device %s", qPrintable(deviceNode));
@@ -142,4 +144,16 @@ void QEvdevTouchManager::updateInputDeviceCount()
         QInputDeviceManager::DeviceTypeTouch, registeredTouchDevices);
 }
 
+bool QEvdevTouchManager::setWindow(const QString &deviceNode, QWindow *window)
+{
+    m_windows.insert(deviceNode, window);
+    if (m_activeDevices.contains(deviceNode)) {
+        foreach (QEvdevTouchScreenHandlerThread *handler, m_activeDevices.values(deviceNode))
+            handler->setWindow(window);
+        return true;
+    }
+
+    return false;
+}
+
 QT_END_NAMESPACE
diff --git a/src/platformsupport/input/evdevtouch/qevdevtouchmanager_p.h b/src/platformsupport/input/evdevtouch/qevdevtouchmanager_p.h
index e524c516f1..9d67e0752a 100644
--- a/src/platformsupport/input/evdevtouch/qevdevtouchmanager_p.h
+++ b/src/platformsupport/input/evdevtouch/qevdevtouchmanager_p.h
@@ -54,6 +54,7 @@
 #include <QObject>
 #include <QHash>
 #include <QSocketNotifier>
+#include <QWindow>
 
 QT_BEGIN_NAMESPACE
 
@@ -66,6 +67,8 @@ public:
     QEvdevTouchManager(const QString &key, const QString &spec, QObject *parent = 0);
     ~QEvdevTouchManager();
 
+    bool setWindow(const QString &deviceNode, QWindow *window);
+
     void addDevice(const QString &deviceNode);
     void removeDevice(const QString &deviceNode);
 
@@ -75,6 +78,7 @@ private:
     QString m_spec;
     QDeviceDiscovery *m_deviceDiscovery;
     QHash<QString, QEvdevTouchScreenHandlerThread *> m_activeDevices;
+    QHash<QString, QWindow *> m_windows;
 };
 
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration.cpp b/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration.cpp
index cc103d8862..a0d3650037 100644
--- a/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration.cpp
+++ b/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration.cpp
@@ -412,4 +412,10 @@ QString QEglFSDeviceIntegration::kbdDeviceName(QString &output) const
     return QString();
 }
 
+QString QEglFSDeviceIntegration::touchDeviceName(QString &output) const
+{
+    Q_UNUSED(output);
+    return QString();
+}
+
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration_p.h b/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration_p.h
index e38a69c1a1..acf9250496 100644
--- a/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration_p.h
+++ b/src/plugins/platforms/eglfs/api/qeglfsdeviceintegration_p.h
@@ -112,6 +112,7 @@ public:
     virtual void *wlDisplay() const;
 
     virtual QString kbdDeviceName(QString &output) const;
+    virtual QString touchDeviceName(QString &output) const;
 
     static EGLConfig chooseConfig(EGLDisplay display, const QSurfaceFormat &format);
     static EGLConfig chooseConfig(EGLDisplay display, const QSurfaceFormat &format, QEglFSDeviceIntegration *integration);
diff --git a/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp b/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp
index 9c55365d81..9122febcaf 100644
--- a/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp
+++ b/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp
@@ -120,7 +120,7 @@ QEglFSIntegration::QEglFSIntegration()
       m_inputContext(0),
       m_fontDb(new QGenericUnixFontDatabase),
       m_services(new QGenericUnixServices),
-      m_kbdMgr(0),
+      m_kbdMgr(0), m_touchMgr(0),
       m_disableInputHandlers(false)
 {
     m_disableInputHandlers = qEnvironmentVariableIntValue("QT_QPA_EGLFS_DISABLE_INPUT");
@@ -601,7 +601,7 @@ void QEglFSIntegration::createInputHandlers()
 #if QT_CONFIG(tslib)
     if (!useTslib)
 #endif
-        new QEvdevTouchManager(QLatin1String("EvdevTouch"), QString() /* spec */, this);
+        m_touchMgr = new QEvdevTouchManager(QLatin1String("EvdevTouch"), QString() /* spec */, this);
 #endif
 
 #if QT_CONFIG(integrityhid)
@@ -629,6 +629,8 @@ bool QEglFSIntegration::associateInputHandlers(QWindow *window) const
         QString outputName = s ? s->name() : QString();
         if (m_kbdMgr && !i->kbdDeviceName(outputName).isEmpty())
             associated = m_kbdMgr->setWindow(i->kbdDeviceName(outputName), window);
+        if (m_touchMgr && !i->touchDeviceName(outputName).isEmpty())
+            associated = m_touchMgr->setWindow(i->touchDeviceName(outputName), window);
     }
     return associated;
 }
diff --git a/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h b/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h
index 9d018f3ffa..2b1d8d9b78 100644
--- a/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h
+++ b/src/plugins/platforms/eglfs/api/qeglfsintegration_p.h
@@ -69,6 +69,7 @@ class QEglFSContext;
 class QEglFSDeviceIntegration;
 class QFbVtHandler;
 class QEvdevKeyboardManager;
+class QEvdevTouchManager;
 
 class Q_EGLFS_EXPORT QEglFSIntegration : public QPlatformIntegration, public QPlatformNativeInterface
 {
@@ -128,6 +129,7 @@ private:
     QScopedPointer<QPlatformServices> m_services;
     QScopedPointer<QFbVtHandler> m_vtHandler;
     QEvdevKeyboardManager *m_kbdMgr;
+    QEvdevTouchManager *m_touchMgr;
     bool m_disableInputHandlers;
 #if defined(WEBOS_EMULATOR)
 	QList<QLinuxMouseHandler *> m_mouses;
diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.cpp b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.cpp
index 7b5f4e6e8d..b2a13504d5 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.cpp
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.cpp
@@ -179,4 +179,9 @@ QString QEglFSKmsIntegration::kbdDeviceName(QString &output) const
     return m_screenConfig->outputSettings().value(output).value(QStringLiteral("keyboardDevice")).toString();
 }
 
+QString QEglFSKmsIntegration::touchDeviceName(QString &output) const
+{
+    return m_screenConfig->outputSettings().value(output).value(QStringLiteral("touchDevice")).toString();
+}
+
 QT_END_NAMESPACE
diff --git a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.h b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.h
index 09567d50b6..e8ececa392 100644
--- a/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.h
+++ b/src/plugins/platforms/eglfs/deviceintegration/eglfs_kms_support/qeglfskmsintegration.h
@@ -75,6 +75,7 @@ public:
     void *nativeResourceForScreen(const QByteArray &resource, QScreen *screen) override;
 
     QString kbdDeviceName(QString &output) const override;
+    QString touchDeviceName(QString &output) const override;
 
     QKmsDevice *device() const;
     QKmsScreenConfig *screenConfig() const;
