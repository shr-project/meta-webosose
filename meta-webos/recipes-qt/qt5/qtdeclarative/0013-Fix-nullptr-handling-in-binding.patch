From 2ef992ed66fb0cd1550aad259ed2b22ea718fc44 Mon Sep 17 00:00:00 2001
From: Fabian Kosmale <fabian.kosmale@qt.io>
Date: Mon, 22 Jul 2019 13:41:11 +0200
Subject: [PATCH] Fix nullptr handling in binding

Fixes: QTBUG-77027
Change-Id: I61d5a20329ffe95af810b89e338eee2bc10bfe04
Reviewed-by: Simon Hausmann <simon.hausmann@qt.io>
Upstream-Status: Backported [https://codereview.qt-project.org/c/qt/qtdeclarative/+/268297]
---
 src/qml/qml/qqmlproperty.cpp                  | 12 ++++++++--
 .../qqmlproperty/data/nullPropertyBinding.qml | 22 +++++++++++++++++++
 .../qml/qqmlproperty/tst_qqmlproperty.cpp     | 17 ++++++++++++++
 3 files changed, 49 insertions(+), 2 deletions(-)
 create mode 100644 tests/auto/qml/qqmlproperty/data/nullPropertyBinding.qml

diff --git a/src/qml/qml/qqmlproperty.cpp b/src/qml/qml/qqmlproperty.cpp
index c8166695ba..5f57e0eca1 100644
--- a/src/qml/qml/qqmlproperty.cpp
+++ b/src/qml/qml/qqmlproperty.cpp
@@ -1216,10 +1216,18 @@ bool QQmlPropertyPrivate::write(QObject *object,
     if (propertyType == variantType && !isUrl && propertyType != qMetaTypeId<QList<QUrl>>() && !property.isQList()) {
         return property.writeProperty(object, const_cast<void *>(value.constData()), flags);
     } else if (property.isQObject()) {
-        QQmlMetaObject valMo = rawMetaObjectForType(enginePriv, variantType);
+        QVariant val = value;
+        int varType = variantType;
+        if (variantType == QMetaType::Nullptr) {
+            // This reflects the fact that you can assign a nullptr to a QObject pointer
+            // Without the change to QObjectStar, rawMetaObjectForType would not give us a QQmlMetaObject
+            varType = QMetaType::QObjectStar;
+            val = QVariant(QMetaType::QObjectStar, nullptr);
+        }
+        QQmlMetaObject valMo = rawMetaObjectForType(enginePriv, varType);
         if (valMo.isNull())
             return false;
-        QObject *o = *static_cast<QObject *const *>(value.constData());
+        QObject *o = *static_cast<QObject *const *>(val.constData());
         QQmlMetaObject propMo = rawMetaObjectForType(enginePriv, propertyType);
 
         if (o)
diff --git a/tests/auto/qml/qqmlproperty/data/nullPropertyBinding.qml b/tests/auto/qml/qqmlproperty/data/nullPropertyBinding.qml
new file mode 100644
index 0000000000..4fffc7aead
--- /dev/null
+++ b/tests/auto/qml/qqmlproperty/data/nullPropertyBinding.qml
@@ -0,0 +1,22 @@
+import QtQuick 2.12
+
+Item {
+    id: root
+
+    width: 640
+    height: 480
+
+    property bool toggle: false
+    property Item bound
+    property string message: "defined"
+
+    readonly property Item item: root.toggle ? root : null
+
+    Binding { target: root; property: "bound"; value: item}
+
+    function tog() {
+        console.info(root.bound ? root.bound.message: "undefined")
+        root.toggle = !root.toggle
+        return 42;
+    }
+}
diff --git a/tests/auto/qml/qqmlproperty/tst_qqmlproperty.cpp b/tests/auto/qml/qqmlproperty/tst_qqmlproperty.cpp
index 27e06c6f67..8f0c8f0585 100644
--- a/tests/auto/qml/qqmlproperty/tst_qqmlproperty.cpp
+++ b/tests/auto/qml/qqmlproperty/tst_qqmlproperty.cpp
@@ -144,6 +144,7 @@ private slots:
     void deeplyNestedObject();
     void readOnlyDynamicProperties();
     void aliasToIdWithMatchingQmlFileNameOnCaseInsensitiveFileSystem();
+    void nullPropertyBinding();
 
     void floatToStringPrecision_data();
     void floatToStringPrecision();
@@ -2059,6 +2060,22 @@ void tst_qqmlproperty::aliasToIdWithMatchingQmlFileNameOnCaseInsensitiveFileSyst
     QVERIFY(property.isValid());
 }
 
+// QTBUG-77027
+void tst_qqmlproperty::nullPropertyBinding()
+{
+    const QUrl url = testFileUrl("nullPropertyBinding.qml");
+    QQmlEngine engine;
+    QQmlComponent component(&engine, url);
+    QScopedPointer<QObject> root(component.create());
+    QVERIFY(root);
+    QTest::ignoreMessage(QtMsgType::QtInfoMsg, "undefined");
+    QMetaObject::invokeMethod(root.get(), "tog");
+    QTest::ignoreMessage(QtMsgType::QtInfoMsg, "defined");
+    QMetaObject::invokeMethod(root.get(), "tog");
+    QTest::ignoreMessage(QtMsgType::QtInfoMsg, "undefined");
+    QMetaObject::invokeMethod(root.get(), "tog");
+}
+
 void tst_qqmlproperty::floatToStringPrecision_data()
 {
     QTest::addColumn<QString>("propertyName");
