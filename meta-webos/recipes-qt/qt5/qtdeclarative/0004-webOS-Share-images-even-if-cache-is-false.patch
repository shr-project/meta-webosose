From 59352c40567c971487f9113a93bfa38bbd09858a Mon Sep 17 00:00:00 2001
From: Elvis Lee <kwangwoong.lee@lge.com>
Date: Thu, 22 Jun 2017 18:40:35 +0900
Subject: [PATCH] webOS: Share images even if cache is false

Regardless Image::cache property, pixmap will be shared between images
having same source.
Image::cache property had two aspect of internal functionality.
 1. Share image instance if source file is same.
 2. Store cache for a while even if unreferenced.
So we couldn't choose one of them with existing the cache property.
In webOS, sharing image instance is quite natural. So by default, the
sharing is always supported regardless the cache property.
And the property will only cares the 2nd functionality to store cache.

Change-Id: I68208cf633ce2afd5f086a61dcc77d0f3d0da037
Task-number: QTBUG-83115
Reviewed-by: Risto Avila <risto.avila@qt.io>
Reviewed-by: Shawn Rutledge <shawn.rutledge@qt.io>
(cherry picked from commit 60280cab2d96b0646469f3d85f8927c7baa166d1)
Upstream-Status: Backported [https://codereview.qt-project.org/c/qt/qtdeclarative/+/308706]
---
 src/quick/util/qquickpixmapcache.cpp | 35 +++++++++++++++++++++++++++-
 1 file changed, 34 insertions(+), 1 deletion(-)

diff --git a/src/quick/util/qquickpixmapcache.cpp b/src/quick/util/qquickpixmapcache.cpp
index dc8bed8125..59a480c52e 100644
--- a/src/quick/util/qquickpixmapcache.cpp
+++ b/src/quick/util/qquickpixmapcache.cpp
@@ -249,6 +249,9 @@ public:
       providerOptions(po), appliedTransform(QQuickImageProviderOptions::UsePluginDefaultTransform),
       textureFactory(nullptr), reply(nullptr), prevUnreferenced(nullptr),
       prevUnreferencedPtr(nullptr), nextUnreferenced(nullptr)
+#ifdef Q_OS_WEBOS
+    , storeToCache(true)
+#endif
     {
         declarativePixmaps.insert(pixmap);
     }
@@ -259,6 +262,9 @@ public:
       providerOptions(po), appliedTransform(aTransform),
       textureFactory(nullptr), reply(nullptr), prevUnreferenced(nullptr), prevUnreferencedPtr(nullptr),
       nextUnreferenced(nullptr)
+#ifdef Q_OS_WEBOS
+    , storeToCache(true)
+#endif
     {
         declarativePixmaps.insert(pixmap);
     }
@@ -270,6 +276,9 @@ public:
       providerOptions(po), appliedTransform(aTransform),
       textureFactory(texture), reply(nullptr), prevUnreferenced(nullptr),
       prevUnreferencedPtr(nullptr), nextUnreferenced(nullptr)
+#ifdef Q_OS_WEBOS
+    , storeToCache(true)
+#endif
     {
         declarativePixmaps.insert(pixmap);
     }
@@ -279,6 +288,9 @@ public:
       appliedTransform(QQuickImageProviderOptions::UsePluginDefaultTransform),
       textureFactory(texture), reply(nullptr), prevUnreferenced(nullptr),
       prevUnreferencedPtr(nullptr), nextUnreferenced(nullptr)
+#ifdef Q_OS_WEBOS
+    , storeToCache(true)
+#endif
     {
         if (texture)
             requestSize = implicitSize = texture->textureSize();
@@ -321,6 +333,10 @@ public:
     QQuickPixmapData *prevUnreferenced;
     QQuickPixmapData**prevUnreferencedPtr;
     QQuickPixmapData *nextUnreferenced;
+
+#ifdef Q_OS_WEBOS
+    bool storeToCache;
+#endif
 };
 
 int QQuickPixmapReply::finishedIndex = -1;
@@ -1221,7 +1237,11 @@ void QQuickPixmapData::release()
             QQuickPixmapReader::readerMutex.unlock();
         }
 
-        if (pixmapStatus == QQuickPixmap::Ready) {
+        if (pixmapStatus == QQuickPixmap::Ready
+#ifdef Q_OS_WEBOS
+                && storeToCache
+#endif
+                ) {
             if (inCache)
                 pixmapStore()->unreferencePixmap(this);
             else
@@ -1547,6 +1567,13 @@ void QQuickPixmap::load(QQmlEngine *engine, const QUrl &url, const QSize &reques
 
     QHash<QQuickPixmapKey, QQuickPixmapData *>::Iterator iter = store->m_cache.end();
 
+#ifdef Q_OS_WEBOS
+    QQuickPixmap::Options orgOptions = options;
+    // In webOS, we suppose that cache is always enabled to share image instances along its source.
+    // So, original option(orgOptions) for cache only decides whether to store the instances when it's unreferenced.
+    options |= QQuickPixmap::Cache;
+#endif
+
     // If Cache is disabled, the pixmap will always be loaded, even if there is an existing
     // cached version. Unless it's an itemgrabber url, since the cache is used to pass
     // the result between QQuickItemGrabResult and QQuickImage.
@@ -1580,6 +1607,9 @@ void QQuickPixmap::load(QQmlEngine *engine, const QUrl &url, const QSize &reques
                 PIXMAP_PROFILE(pixmapLoadingFinished(url, QSize(width(), height())));
                 if (options & QQuickPixmap::Cache)
                     d->addToCache();
+#ifdef Q_OS_WEBOS
+                d->storeToCache = orgOptions & QQuickPixmap::Cache;
+#endif
                 return;
             }
             if (d) { // loadable, but encountered error while loading
@@ -1595,6 +1625,9 @@ void QQuickPixmap::load(QQmlEngine *engine, const QUrl &url, const QSize &reques
         d = new QQuickPixmapData(this, url, requestSize, providerOptions, QQuickImageProviderOptions::UsePluginDefaultTransform);
         if (options & QQuickPixmap::Cache)
             d->addToCache();
+#ifdef Q_OS_WEBOS
+        d->storeToCache = orgOptions & QQuickPixmap::Cache;
+#endif
 
         QQuickPixmapReader::readerMutex.lock();
         d->reply = QQuickPixmapReader::instance(engine)->getImage(d);
