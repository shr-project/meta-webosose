From d98e4ee793cebb44cae6d3c533c66649b4d5df11 Mon Sep 17 00:00:00 2001
From: "kdh.kang" <kdh.kang@lge.com>
Date: Mon, 17 Nov 2014 16:03:01 +0900
Subject: [PATCH] Set the stencil buffer zone

This only clears the area that update stencil buffer for a better
performance. The information that is to be updated utilizes
information located in the following node's siccor area.

Change-Id: I9a399667ec7ee0a1028e233c899ee49c98e4e622
---
 .../scenegraph/coreapi/qsgbatchrenderer.cpp   | 42 +++++++++++++++++++
 1 file changed, 42 insertions(+)

diff --git a/src/quick/scenegraph/coreapi/qsgbatchrenderer.cpp b/src/quick/scenegraph/coreapi/qsgbatchrenderer.cpp
index afe338049..6925c269f 100644
--- a/src/quick/scenegraph/coreapi/qsgbatchrenderer.cpp
+++ b/src/quick/scenegraph/coreapi/qsgbatchrenderer.cpp
@@ -2087,9 +2087,51 @@ Renderer::ClipType Renderer::updateStencilClip(const QSGClipNode *clip)
                     m_clipProgram.link();
                     m_clipMatrixId = m_clipProgram.uniformLocation("matrix");
                 }
+                const QSGClipNode *clipNext = clip->clipList();
+                QMatrix4x4 mNext = m_current_projection_matrix;
+                if (clipNext->matrix())
+                    mNext *= *clipNext->matrix();
+                QRectF bbox = clipNext->clipRect();
+                qreal invW = 1 / mNext(3, 3);
+                qreal fx1, fy1, fx2, fy2;
+                bool noRotateNext = qFuzzyIsNull(mNext(0, 1)) && qFuzzyIsNull(mNext(1, 0));
+                bool isRotate90Next = qFuzzyIsNull(mNext(0, 0)) && qFuzzyIsNull(mNext(1, 1));
+                if (noRotateNext) {
+                    fx1 = (bbox.left() * mNext(0, 0) + mNext(0, 3)) * invW;
+                    fy1 = (bbox.bottom() * mNext(1, 1) + mNext(1, 3)) * invW;
+                    fx2 = (bbox.right() * mNext(0, 0) + mNext(0, 3)) * invW;
+                    fy2 = (bbox.top() * mNext(1, 1) + mNext(1, 3)) * invW;
+                } else {
+                    Q_ASSERT(isRotate90Next);
+                    fx1 = (bbox.bottom() * mNext(0, 1) + mNext(0, 3)) * invW;
+                    fy1 = (bbox.left() * mNext(1, 0) + mNext(1, 3)) * invW;
+                    fx2 = (bbox.top() * mNext(0, 1) + mNext(0, 3)) * invW;
+                    fy2 = (bbox.right() * mNext(1, 0) + mNext(1, 3)) * invW;
+                }
+                if (fx1 > fx2)
+                    qSwap(fx1, fx2);
+                if (fy1 > fy2)
+                    qSwap(fy1, fy2);
+                GLint ix1 = qRound((fx1 + 1) * deviceRect().width() * qreal(0.5));
+                GLint iy1 = qRound((fy1 + 1) * deviceRect().height() * qreal(0.5));
+                GLint ix2 = qRound((fx2 + 1) * deviceRect().width() * qreal(0.5));
+                GLint iy2 = qRound((fy2 + 1) * deviceRect().height() * qreal(0.5));
+                ClipType clipTypeNext = clipType ;
+                clipTypeNext |= StencilClip;
+                QRect m_next_scissor_rect = m_currentScissorRect;
+                if (!(clipTypeNext & ScissorClip)) {
+                    m_next_scissor_rect = QRect(ix1, iy1, ix2 - ix1, iy2 - iy1);
+                    glEnable(GL_SCISSOR_TEST);
+                } else {
+                    m_next_scissor_rect =
+                       m_currentScissorRect & QRect(ix1, iy1, ix2 - ix1, iy2 - iy1);
+                }
+                glScissor(m_next_scissor_rect.x(), m_next_scissor_rect.y(),
+                          m_next_scissor_rect.width(), m_next_scissor_rect.height());
 
                 glClearStencil(0);
                 glClear(GL_STENCIL_BUFFER_BIT);
+                glDisable(GL_SCISSOR_TEST);
                 glEnable(GL_STENCIL_TEST);
                 glColorMask(GL_FALSE, GL_FALSE, GL_FALSE, GL_FALSE);
                 glDepthMask(GL_FALSE);
