From 6c9436ded8c0343abea48a77d255d609f11b8e17 Mon Sep 17 00:00:00 2001
From: Rodrigo Dias Correa <rodrigo@correas.us>
Date: Tue, 10 Nov 2020 02:51:51 -0300
Subject: [PATCH] mbedtls: Fix GCC warning in `ssl_calc_finished_tls_sha384`

GCC 11 generated a warning because `padbuf` was too small to be
used as an argument for `mbedtls_sha512_finish_ret`. The `output`
parameter of `mbedtls_sha512_finish_ret` has the type
`unsigned char[64]`, but `padbuf` was only 48 bytes long.

Even though `ssl_calc_finished_tls_sha384` uses only 48 bytes for
the hash output, the size of `padbuf` was increased to 64 bytes.

Signed-off-by: Rodrigo Dias Correa <rodrigo@correas.us>

Adjusted for 2.24.0 version to build, there are few more improvements
in newer version, see:
https://github.com/ARMmbed/mbedtls/commit/2c424570e2a85e21273313808e8c5efcf1cfc9d7
https://github.com/ARMmbed/mbedtls/commit/d596ca8a1e34b6ef2fda293250829d014e5d33af
https://github.com/ARMmbed/mbedtls/commit/f06a6144e23a1a8dcc3dd749b993ad88a96063fb
---
Upstream-Status: Backport

 lib/mbedtls-2.24.0/library/ssl_tls.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/lib/mbedtls-2.24.0/library/ssl_tls.c b/lib/mbedtls-2.24.0/library/ssl_tls.c
index 3d7e41eca..54e35f698 100644
--- a/lib/mbedtls-2.24.0/library/ssl_tls.c
+++ b/lib/mbedtls-2.24.0/library/ssl_tls.c
@@ -694,7 +694,7 @@ static void ssl_calc_finished_tls_sha256( mbedtls_ssl_context *,unsigned char *,
 
 #if defined(MBEDTLS_SHA512_C)
 static void ssl_update_checksum_sha384( mbedtls_ssl_context *, const unsigned char *, size_t );
-static void ssl_calc_verify_tls_sha384( const mbedtls_ssl_context *, unsigned char [48], size_t * );
+static void ssl_calc_verify_tls_sha384( const mbedtls_ssl_context *, unsigned char [64], size_t * );
 static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
 #endif
 #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
@@ -1802,7 +1802,7 @@ void ssl_calc_verify_tls_sha256( const mbedtls_ssl_context *ssl,
 
 #if defined(MBEDTLS_SHA512_C)
 void ssl_calc_verify_tls_sha384( const mbedtls_ssl_context *ssl,
-                                 unsigned char hash[48],
+                                 unsigned char hash[64],
                                  size_t *hlen )
 {
 #if defined(MBEDTLS_USE_PSA_CRYPTO)
@@ -3203,7 +3203,7 @@ static void ssl_calc_finished_tls_sha384(
 {
     int len = 12;
     const char *sender;
-    unsigned char padbuf[48];
+    unsigned char padbuf[64];
 #if defined(MBEDTLS_USE_PSA_CRYPTO)
     size_t hash_size;
     psa_hash_operation_t sha384_psa = PSA_HASH_OPERATION_INIT;
