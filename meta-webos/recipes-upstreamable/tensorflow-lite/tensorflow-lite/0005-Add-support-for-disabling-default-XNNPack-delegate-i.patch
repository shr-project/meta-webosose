From 79f471314b1f4c74ac458e9b620cf7b10dd53366 Mon Sep 17 00:00:00 2001
From: "A. Unique TensorFlower" <gardener@tensorflow.org>
Date: Mon, 9 May 2022 10:58:39 -0700
Subject: [PATCH] Add support for disabling default XNNPack delegate in
 acceleration configuration.

PiperOrigin-RevId: 447513171
---
 .../configuration/configuration.proto         |  3 ++
 .../configuration/configuration_generated.h   | 28 +++++++++++++++----
 .../configuration/flatbuffer_to_proto.cc      |  2 ++
 .../configuration/proto_to_flatbuffer.cc      |  3 +-
 .../mini_benchmark_implementation.cc          |  6 +++-
 .../mini_benchmark/mini_benchmark_test.cc     | 21 +++++++++++++-
 .../acceleration/mini_benchmark/validator.cc  |  7 +++++
 7 files changed, 62 insertions(+), 8 deletions(-)

diff --git a/tensorflow/lite/experimental/acceleration/configuration/configuration.proto b/tensorflow/lite/experimental/acceleration/configuration/configuration.proto
index 5bd3f109400..e42be66dcf4 100644
--- a/tensorflow/lite/experimental/acceleration/configuration/configuration.proto
+++ b/tensorflow/lite/experimental/acceleration/configuration/configuration.proto
@@ -472,6 +472,9 @@ message TFLiteSettings {
 
   // Whether to automatically fall back to TFLite CPU path.
   optional FallbackSettings fallback_settings = 9;
+
+  // Whether to disable default delegates (XNNPack).
+  optional bool disable_default_delegates = 12;
 }
 
 // Whether to automatically fallback to TFLite CPU path on delegation errors.
diff --git a/tensorflow/lite/experimental/acceleration/configuration/configuration_generated.h b/tensorflow/lite/experimental/acceleration/configuration/configuration_generated.h
index c3ccb96a18c..870da87ad51 100644
--- a/tensorflow/lite/experimental/acceleration/configuration/configuration_generated.h
+++ b/tensorflow/lite/experimental/acceleration/configuration/configuration_generated.h
@@ -15,6 +15,7 @@ limitations under the License.
 // clang-format off
 // automatically generated by the FlatBuffers compiler, do not modify
 
+
 #ifndef FLATBUFFERS_GENERATED_CONFIGURATIONFORGENERATION_TFLITE_H_
 #define FLATBUFFERS_GENERATED_CONFIGURATIONFORGENERATION_TFLITE_H_
 
@@ -2004,9 +2005,11 @@ struct TFLiteSettingsT : public flatbuffers::NativeTable {
   std::unique_ptr<tflite::EdgeTpuSettingsT> edgetpu_settings;
   std::unique_ptr<tflite::CoralSettingsT> coral_settings;
   std::unique_ptr<tflite::FallbackSettingsT> fallback_settings;
+  bool disable_default_delegates;
   TFLiteSettingsT()
       : delegate(tflite::Delegate_NONE),
-        max_delegated_partitions(0) {
+        max_delegated_partitions(0),
+        disable_default_delegates(false) {
   }
 };
 
@@ -2023,7 +2026,8 @@ struct TFLiteSettings FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
     VT_MAX_DELEGATED_PARTITIONS = 18,
     VT_EDGETPU_SETTINGS = 20,
     VT_CORAL_SETTINGS = 22,
-    VT_FALLBACK_SETTINGS = 24
+    VT_FALLBACK_SETTINGS = 24,
+    VT_DISABLE_DEFAULT_DELEGATES = 26
   };
   tflite::Delegate delegate() const {
     return static_cast<tflite::Delegate>(GetField<int32_t>(VT_DELEGATE, 0));
@@ -2058,6 +2062,9 @@ struct TFLiteSettings FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   const tflite::FallbackSettings *fallback_settings() const {
     return GetPointer<const tflite::FallbackSettings *>(VT_FALLBACK_SETTINGS);
   }
+  bool disable_default_delegates() const {
+    return GetField<uint8_t>(VT_DISABLE_DEFAULT_DELEGATES, 0) != 0;
+  }
   bool Verify(flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<int32_t>(verifier, VT_DELEGATE) &&
@@ -2080,6 +2087,7 @@ struct TFLiteSettings FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
            verifier.VerifyTable(coral_settings()) &&
            VerifyOffset(verifier, VT_FALLBACK_SETTINGS) &&
            verifier.VerifyTable(fallback_settings()) &&
+           VerifyField<uint8_t>(verifier, VT_DISABLE_DEFAULT_DELEGATES) &&
            verifier.EndTable();
   }
   TFLiteSettingsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
@@ -2123,6 +2131,9 @@ struct TFLiteSettingsBuilder {
   void add_fallback_settings(flatbuffers::Offset<tflite::FallbackSettings> fallback_settings) {
     fbb_.AddOffset(TFLiteSettings::VT_FALLBACK_SETTINGS, fallback_settings);
   }
+  void add_disable_default_delegates(bool disable_default_delegates) {
+    fbb_.AddElement<uint8_t>(TFLiteSettings::VT_DISABLE_DEFAULT_DELEGATES, static_cast<uint8_t>(disable_default_delegates), 0);
+  }
   explicit TFLiteSettingsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
@@ -2147,7 +2158,8 @@ inline flatbuffers::Offset<TFLiteSettings> CreateTFLiteSettings(
     int32_t max_delegated_partitions = 0,
     flatbuffers::Offset<tflite::EdgeTpuSettings> edgetpu_settings = 0,
     flatbuffers::Offset<tflite::CoralSettings> coral_settings = 0,
-    flatbuffers::Offset<tflite::FallbackSettings> fallback_settings = 0) {
+    flatbuffers::Offset<tflite::FallbackSettings> fallback_settings = 0,
+    bool disable_default_delegates = false) {
   TFLiteSettingsBuilder builder_(_fbb);
   builder_.add_fallback_settings(fallback_settings);
   builder_.add_coral_settings(coral_settings);
@@ -2160,6 +2172,7 @@ inline flatbuffers::Offset<TFLiteSettings> CreateTFLiteSettings(
   builder_.add_gpu_settings(gpu_settings);
   builder_.add_nnapi_settings(nnapi_settings);
   builder_.add_delegate(delegate);
+  builder_.add_disable_default_delegates(disable_default_delegates);
   return builder_.Finish();
 }
 
@@ -3832,7 +3845,8 @@ inline bool operator==(const TFLiteSettingsT &lhs, const TFLiteSettingsT &rhs) {
       (lhs.max_delegated_partitions == rhs.max_delegated_partitions) &&
       ((lhs.edgetpu_settings == rhs.edgetpu_settings) || (lhs.edgetpu_settings && rhs.edgetpu_settings && *lhs.edgetpu_settings == *rhs.edgetpu_settings)) &&
       ((lhs.coral_settings == rhs.coral_settings) || (lhs.coral_settings && rhs.coral_settings && *lhs.coral_settings == *rhs.coral_settings)) &&
-      ((lhs.fallback_settings == rhs.fallback_settings) || (lhs.fallback_settings && rhs.fallback_settings && *lhs.fallback_settings == *rhs.fallback_settings));
+      ((lhs.fallback_settings == rhs.fallback_settings) || (lhs.fallback_settings && rhs.fallback_settings && *lhs.fallback_settings == *rhs.fallback_settings)) &&
+      (lhs.disable_default_delegates == rhs.disable_default_delegates);
 }
 
 inline bool operator!=(const TFLiteSettingsT &lhs, const TFLiteSettingsT &rhs) {
@@ -3860,6 +3874,7 @@ inline void TFLiteSettings::UnPackTo(TFLiteSettingsT *_o, const flatbuffers::res
   { auto _e = edgetpu_settings(); if (_e) _o->edgetpu_settings = std::unique_ptr<tflite::EdgeTpuSettingsT>(_e->UnPack(_resolver)); }
   { auto _e = coral_settings(); if (_e) _o->coral_settings = std::unique_ptr<tflite::CoralSettingsT>(_e->UnPack(_resolver)); }
   { auto _e = fallback_settings(); if (_e) _o->fallback_settings = std::unique_ptr<tflite::FallbackSettingsT>(_e->UnPack(_resolver)); }
+  { auto _e = disable_default_delegates(); _o->disable_default_delegates = _e; }
 }
 
 inline flatbuffers::Offset<TFLiteSettings> TFLiteSettings::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TFLiteSettingsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
@@ -3881,6 +3896,7 @@ inline flatbuffers::Offset<TFLiteSettings> CreateTFLiteSettings(flatbuffers::Fla
   auto _edgetpu_settings = _o->edgetpu_settings ? CreateEdgeTpuSettings(_fbb, _o->edgetpu_settings.get(), _rehasher) : 0;
   auto _coral_settings = _o->coral_settings ? CreateCoralSettings(_fbb, _o->coral_settings.get(), _rehasher) : 0;
   auto _fallback_settings = _o->fallback_settings ? CreateFallbackSettings(_fbb, _o->fallback_settings.get(), _rehasher) : 0;
+  auto _disable_default_delegates = _o->disable_default_delegates;
   return tflite::CreateTFLiteSettings(
       _fbb,
       _delegate,
@@ -3893,7 +3909,8 @@ inline flatbuffers::Offset<TFLiteSettings> CreateTFLiteSettings(flatbuffers::Fla
       _max_delegated_partitions,
       _edgetpu_settings,
       _coral_settings,
-      _fallback_settings);
+      _fallback_settings,
+      _disable_default_delegates);
 }
 
 
@@ -4455,3 +4472,4 @@ inline flatbuffers::Offset<MinibenchmarkSettings> CreateMinibenchmarkSettings(fl
 }  // namespace tflite
 
 #endif  // FLATBUFFERS_GENERATED_CONFIGURATIONFORGENERATION_TFLITE_H_
+// clang-format off
diff --git a/tensorflow/lite/experimental/acceleration/configuration/flatbuffer_to_proto.cc b/tensorflow/lite/experimental/acceleration/configuration/flatbuffer_to_proto.cc
index 75674570f22..d5eeb12325f 100644
--- a/tensorflow/lite/experimental/acceleration/configuration/flatbuffer_to_proto.cc
+++ b/tensorflow/lite/experimental/acceleration/configuration/flatbuffer_to_proto.cc
@@ -385,6 +385,8 @@ proto::TFLiteSettings ConvertTfliteSettings(const TFLiteSettings& settings) {
     *(proto_settings.mutable_fallback_settings()) =
         ConvertFallbackSettings(*settings.fallback_settings());
   }
+  proto_settings.set_disable_default_delegates(
+      settings.disable_default_delegates());
   return proto_settings;
 }
 
diff --git a/tensorflow/lite/experimental/acceleration/configuration/proto_to_flatbuffer.cc b/tensorflow/lite/experimental/acceleration/configuration/proto_to_flatbuffer.cc
index dc883781729..2de1ded0c4b 100644
--- a/tensorflow/lite/experimental/acceleration/configuration/proto_to_flatbuffer.cc
+++ b/tensorflow/lite/experimental/acceleration/configuration/proto_to_flatbuffer.cc
@@ -351,7 +351,8 @@ Offset<TFLiteSettings> ConvertTfliteSettings(
       /*max_delegated_partitions=*/settings.max_delegated_partitions(),
       ConvertEdgeTpuSettings(settings.edgetpu_settings(), builder),
       ConvertCoralSettings(settings.coral_settings(), builder),
-      ConvertFallbackSettings(settings.fallback_settings(), builder));
+      ConvertFallbackSettings(settings.fallback_settings(), builder),
+      settings.disable_default_delegates());
 }
 
 Offset<ModelFile> ConvertModelFile(const proto::ModelFile& model_file,
diff --git a/tensorflow/lite/experimental/acceleration/mini_benchmark/mini_benchmark_implementation.cc b/tensorflow/lite/experimental/acceleration/mini_benchmark/mini_benchmark_implementation.cc
index de72a401a8a..b5e58cbf551 100644
--- a/tensorflow/lite/experimental/acceleration/mini_benchmark/mini_benchmark_implementation.cc
+++ b/tensorflow/lite/experimental/acceleration/mini_benchmark/mini_benchmark_implementation.cc
@@ -460,7 +460,11 @@ class MiniBenchmarkImpl : public MiniBenchmark {
     *nnapi_sl = nullptr;
     const auto& settings_to_test = *settings_->settings_to_test();
     for (const auto* setting_to_test : settings_to_test) {
-      if (setting_to_test->nnapi_settings()) {
+      // Check that there are not two different NNAPI-with-SL configurations
+      // with different support library instances.
+      if (setting_to_test->delegate() == Delegate_NNAPI &&
+          setting_to_test->nnapi_settings() &&
+          setting_to_test->nnapi_settings()->support_library_handle()) {
         const NnApiSLDriverImplFL5* curr_nnapi_sl_handle =
             reinterpret_cast<const NnApiSLDriverImplFL5*>(
                 setting_to_test->nnapi_settings()->support_library_handle());
diff --git a/tensorflow/lite/experimental/acceleration/mini_benchmark/mini_benchmark_test.cc b/tensorflow/lite/experimental/acceleration/mini_benchmark/mini_benchmark_test.cc
index f5aea5296f7..281f55b5274 100644
--- a/tensorflow/lite/experimental/acceleration/mini_benchmark/mini_benchmark_test.cc
+++ b/tensorflow/lite/experimental/acceleration/mini_benchmark/mini_benchmark_test.cc
@@ -89,6 +89,15 @@ class MiniBenchmarkTest : public ::testing::Test {
       (void)unlink((paths->storage_file_path() + ".extra.fb").c_str());
     }
     paths->set_data_directory_path(::testing::TempDir());
+
+    if (delegate != proto::Delegate::NONE) {
+      // Some of the tests rely on XNNPack beating CPU - need to not apply
+      // XNNPack for the CPU variant for the tests to pass.
+      proto::TFLiteSettings* cpu_tflite_settings =
+          settings.add_settings_to_test();
+      cpu_tflite_settings->set_disable_default_delegates(false);
+    }
+
     settings_ = ConvertFromProto(settings, &settings_buffer_);
 
     mb_ = CreateMiniBenchmark(*settings_, ns_, model_id_);
@@ -159,14 +168,16 @@ TEST_F(MiniBenchmarkTest, RunSuccessfully) {
   mb_->MarkAndGetEventsToLog();
 
   const ComputeSettingsT acceleration1 = mb_->GetBestAcceleration();
-  EXPECT_NE(nullptr, acceleration1.tflite_settings);
 
   // The 2nd call should return the same acceleration settings.
   const ComputeSettingsT acceleration2 = mb_->GetBestAcceleration();
   EXPECT_EQ(acceleration1, acceleration2);
+#ifndef ADDRESS_SANITIZER  // XNNPack is slower under Asan.
   // As we choose mobilenet-v1 float model, XNNPACK delegate should be the best
   // on CPU.
+  ASSERT_NE(nullptr, acceleration1.tflite_settings);
   EXPECT_EQ(tflite::Delegate_XNNPACK, acceleration1.tflite_settings->delegate);
+#endif  // !ADDRESS_SANITIZER
 
   EXPECT_EQ(model_id_, acceleration1.model_identifier_for_statistics);
   EXPECT_EQ(ns_, acceleration1.model_namespace_for_statistics);
@@ -177,8 +188,10 @@ TEST_F(MiniBenchmarkTest, RunSuccessfully) {
   EXPECT_EQ(1, events.size());
   const auto& decision = events.front().best_acceleration_decision;
   EXPECT_NE(nullptr, decision);
+#ifndef ADDRESS_SANITIZER  // XNNPack is slower under Asan.
   EXPECT_EQ(tflite::Delegate_XNNPACK,
             decision->min_latency_event->tflite_settings->delegate);
+#endif  // !ADDRESS_SANITIZER
 }
 
 TEST_F(MiniBenchmarkTest, BestAccelerationEventIsMarkedLoggedAfterRestart) {
@@ -200,10 +213,14 @@ TEST_F(MiniBenchmarkTest, BestAccelerationEventIsMarkedLoggedAfterRestart) {
   // As all acceleration tests have completed before, we expect no remaining
   // tests to be performed.
   EXPECT_EQ(0, mb_->NumRemainingAccelerationTests());
+
   const ComputeSettingsT acceleration = mb_->GetBestAcceleration();
+#ifndef ADDRESS_SANITIZER  // XNNPack is slower under Asan.
+  ASSERT_NE(nullptr, acceleration.tflite_settings);
   // As we choose mobilenet-v1 float model, XNNPACK delegate should be the best
   // on CPU.
   EXPECT_EQ(tflite::Delegate_XNNPACK, acceleration.tflite_settings->delegate);
+#endif  // !ADDRESS_SANITIZER
   EXPECT_EQ(model_id_, acceleration.model_identifier_for_statistics);
   EXPECT_EQ(ns_, acceleration.model_namespace_for_statistics);
 
@@ -277,6 +294,7 @@ TEST_F(MiniBenchmarkTest, DelegatePluginNotSupported) {
   EXPECT_TRUE(is_found);
 }
 
+#ifdef __ANDROID__  // Loading shared libraries only works on Android.
 TEST_F(MiniBenchmarkTest, UseNnApiSl) {
   if (!should_perform_test_) return;
 
@@ -295,6 +313,7 @@ TEST_F(MiniBenchmarkTest, UseNnApiSl) {
 
   EXPECT_TRUE(tflite::acceleration::WasNnApiSlInvoked());
 }
+#endif  // __ANDROID__
 
 }  // namespace
 }  // namespace acceleration
diff --git a/tensorflow/lite/experimental/acceleration/mini_benchmark/validator.cc b/tensorflow/lite/experimental/acceleration/mini_benchmark/validator.cc
index 00a556cd8a5..788f3165a73 100644
--- a/tensorflow/lite/experimental/acceleration/mini_benchmark/validator.cc
+++ b/tensorflow/lite/experimental/acceleration/mini_benchmark/validator.cc
@@ -18,6 +18,8 @@ limitations under the License.
 #include <time.h>
 
 #include <iostream>
+#include <string>
+#include <utility>
 
 #include "tensorflow/lite/core/api/profiler.h"
 #include "tensorflow/lite/experimental/acceleration/configuration/configuration_generated.h"
@@ -153,6 +155,11 @@ MinibenchmarkStatus Validator::CheckModel(bool load_only) {
     return kMinibenchmarkSuccess;
   }
 
+  if (compute_settings_->tflite_settings() &&
+      compute_settings_->tflite_settings()->disable_default_delegates()) {
+    resolver_ =
+        ::tflite::ops::builtin::BuiltinOpResolverWithoutDefaultDelegates();
+  }
   resolver_.AddCustom("validation/call",
                       ::tflite::acceleration::ops::Register_CALL(), 1);
   resolver_.AddCustom(
