From 55c8c28df9963c0832c719ffe24e29cfed1f1c15 Mon Sep 17 00:00:00 2001
From: "kijoong.lee" <kijoong.lee@lge.com>
Date: Sun, 11 Dec 2022 17:48:24 +0900
Subject: [PATCH] 22.08 webos build support

Upstream-Status: Pending
---
 SConstruct | 20 +++++++++++---------
 1 file changed, 11 insertions(+), 9 deletions(-)

diff --git a/SConstruct b/SConstruct
index 9e046161ac..24a1a66c83 100644
--- a/SConstruct
+++ b/SConstruct
@@ -93,7 +93,7 @@ vars.AddVariables(
                   allowed_values=("armv7a", "armv7a-hf", "arm64-v8a", "arm64-v8.2-a", "arm64-v8.2-a-sve", "arm64-v8.2-a-sve2", "x86_32", "x86_64",
                                   "armv8a", "armv8.2-a", "armv8.2-a-sve", "armv8.6-a", "armv8.6-a-sve", "armv8.6-a-sve2", "armv8r64", "x86")),
     EnumVariable("estate", "Execution State", "auto", allowed_values=("auto", "32", "64")),
-    EnumVariable("os", "Target OS. With bare metal selected, only Arm® Neon™ (not OpenCL) can be used, static libraries get built and Neon™'s multi-threading support is disabled.", "linux", allowed_values=("linux", "android", "tizen", "macos", "bare_metal", "openbsd","windows")),
+    EnumVariable("os", "Target OS. With bare metal selected, only Arm® Neon™ (not OpenCL) can be used, static libraries get built and Neon™'s multi-threading support is disabled.", "linux", allowed_values=("linux", "android", "tizen", "macos", "bare_metal", "openbsd","windows", "webos")),
     EnumVariable("build", "Either build directly on your device (native) or cross compile from your desktop machine (cross-compile). In both cases make sure the compiler is available in your path.", "cross_compile", allowed_values=("native", "cross_compile", "embed_only")),
     BoolVariable("examples", "Build example programs", True),
     BoolVariable("gemm_tuner", "Build gemm_tuner programs", True),
@@ -112,7 +112,7 @@ vars.AddVariables(
     BoolVariable("exceptions", "Enable/disable C++ exception support", True),
     BoolVariable("high_priority", "Generate a library containing only the high priority operators", False),
     PathVariable("linker_script", "Use an external linker script", "", PathVariable.PathAccept),
-    PathVariable("external_tests_dir", """Add examples, benchmarks and tests to the tests suite from an external path. In order to use this option, the external tests directory must have the following structure: 
+    PathVariable("external_tests_dir", """Add examples, benchmarks and tests to the tests suite from an external path. In order to use this option, the external tests directory must have the following structure:
     EXTERNAL_TESTS_DIR:
     └── tests
         ├── benchmark
@@ -136,7 +136,9 @@ vars.AddVariables(
     ("extra_link_flags", "Extra LD flags to be appended to the build command", ""),
     ("compiler_cache", "Command to prefix to the C and C++ compiler (e.g ccache)", ""),
     ("specs_file", "Specs file to use (e.g. rdimon.specs)", ""),
-    ("build_config", "Operator/Data-type/Data-layout configuration to use for tailored ComputeLibrary builds. Can be a JSON file or a JSON formatted string", "")
+    ("build_config", "Operator/Data-type/Data-layout configuration to use for tailored ComputeLibrary builds. Can be a JSON file or a JSON formatted string", ""),
+    ("PREFIX", "Dummy variable to prevent yocto build error"),
+    ("prefix", "Dummy variable to prevent yocto build error")
 )
 
 
@@ -205,7 +207,7 @@ if env['os'] == 'bare_metal':
          print("ERROR: OpenMP and C++11 threads not supported in bare_metal. Use cppthreads=0 openmp=0")
          Exit(1)
 
-if env['opencl'] and env['embed_kernels'] and env['compress_kernels'] and env['os'] not in ['android']:
+if env['opencl'] and env['embed_kernels'] and env['compress_kernels'] and env['os'] not in ['android', 'webos']:
     print("Compressed kernels are supported only for android builds")
     Exit(1)
 
@@ -230,11 +232,11 @@ env.Append(CPPDEFINES = ['_GLIBCXX_USE_NANOSLEEP'])
 
 cpp_tool = {'linux': 'g++', 'android' : 'clang++',
              'tizen': 'g++', 'macos':'clang++',
-             'bare_metal':'g++', 'openbsd':'g++','windows':'clang-cl'}
+             'bare_metal':'g++', 'openbsd':'g++','windows':'clang-cl', 'webos': 'g++'}
 
 c_tool = {'linux':'gcc', 'android': 'clang', 'tizen':'gcc',
           'macos':'clang','bare_metal':'gcc',
-          'openbsd':'gcc','windows':'clang-cl'}
+          'openbsd':'gcc','windows':'clang-cl', 'webos':'gcc'}
 
 default_cpp_compiler = cpp_tool[env['os']]
 default_c_compiler = c_tool[env['os']]
@@ -302,7 +304,7 @@ else: # NONE "multi_isa" builds
 
     if 'v7a' in env['arch']:
         env.Append(CXXFLAGS = ['-march=armv7-a', '-mthumb', '-mfpu=neon'])
-        if (env['os'] == 'android' or env['os'] == 'tizen') and not 'hf' in env['arch']:
+        if (env['os'] == 'android' or env['os'] == 'tizen' or env['os'] == 'webos') and not 'hf' in env['arch']:
             env.Append(CXXFLAGS = ['-mfloat-abi=softfp'])
         else:
             env.Append(CXXFLAGS = ['-mfloat-abi=hard'])
@@ -468,7 +470,7 @@ if env['standalone']:
     if not 'windows' in env['os']:
         env.Append(CXXFLAGS = ['-fPIC'])
         env.Append(LINKFLAGS = ['-static-libgcc','-static-libstdc++'])
-       
+
 if env['Werror']:
     env.Append(CXXFLAGS = ['-Werror'])
 
@@ -527,7 +529,7 @@ if env['debug']:
     else:
         env.Append(CXXFLAGS = ['-Z7','-MTd','-fms-compatibility','-fdelayed-template-parsing'])
         env.Append(LINKFLAGS = ['-DEBUG'])
- 
+
     env.Append(CPPDEFINES = ['ARM_COMPUTE_DEBUG_ENABLED'])
 else:
     if not 'windows' in env['os']:
-- 
2.17.1

