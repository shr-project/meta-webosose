diff --git a/delegate/src/Convolution.hpp b/delegate/src/Convolution.hpp
index a7d6c1de2..709432cc2 100644
--- a/delegate/src/Convolution.hpp
+++ b/delegate/src/Convolution.hpp
@@ -13,6 +13,8 @@
 #include <tensorflow/lite/minimal_logging.h>
 #include "tensorflow/lite/kernels/internal/tensor.h"
 
+#include "tensorflow/lite/kernels/kernel_util.h"
+
 namespace armnnDelegate
 {
 
@@ -144,6 +146,22 @@ TfLiteStatus VisitConv2dOperator(DelegateData& delegateData,
     CalcPadding(inputWidth, filterWidth, descriptor.m_StrideX, descriptor.m_DilationX,
                 descriptor.m_PadLeft, descriptor.m_PadRight, params->padding);
 
+    if (!tflite::IsConstantTensor(&tfLiteContext->tensors[tfLiteNode->inputs->data[1]]))
+    {
+        TF_LITE_MAYBE_KERNEL_LOG(
+            tfLiteContext,
+            "&tfLiteContext->tensors[tfLiteNode->inputs->data[1]] is not Const Tensor");
+        return kTfLiteError;
+    }
+
+    if (!tflite::IsConstantTensor(&tfLiteContext->tensors[tfLiteNode->inputs->data[2]]))
+    {
+        TF_LITE_MAYBE_KERNEL_LOG(
+            tfLiteContext,
+            "&tfLiteContext->tensors[tfLiteNode->inputs->data[2]] is not Const Tensor");
+        return kTfLiteError;
+    }
+
     if (!delegateData.m_Network)
     {
         bool isSupported = false;
@@ -170,6 +188,14 @@ TfLiteStatus VisitConv2dOperator(DelegateData& delegateData,
 
     if(biasEnabled)
     {
+        if (!tflite::IsConstantTensor(&tfLiteContext->tensors[tfLiteNode->inputs->data[2]]))
+        {
+            TF_LITE_MAYBE_KERNEL_LOG(
+                tfLiteContext,
+                "&tfLiteContext->tensors[tfLiteNode->inputs->data[2]] is not Const Tensor");
+            return kTfLiteError;
+        }
+
         auto biases =
             CreateConstTensor(&tfLiteContext->tensors[tfLiteNode->inputs->data[2]],
                               biasTensorInfo,
@@ -494,6 +520,24 @@ TfLiteStatus VisitDepthwiseConv2dOperator(DelegateData& delegateData,
         biasTensorInfo = armnn::TensorInfo(armnn::TensorShape({1}), GetDataType(tfLiteInputTensor));
     }
 
+    if (!tflite::IsConstantTensor(&tfLiteFilterTensor))
+    {
+        TF_LITE_MAYBE_KERNEL_LOG(
+            tfLiteContext,
+            "tfLiteFilterTensor is not Const Tensor");
+        return kTfLiteError;
+    }
+    if(biasEnabled)
+    {
+        if (!tflite::IsConstantTensor(&tfLiteContext->tensors[tfLiteNode->inputs->data[2]]))
+        {
+            TF_LITE_MAYBE_KERNEL_LOG(
+                tfLiteContext,
+                "&tfLiteContext->tensors[tfLiteNode->inputs->data[2]] is not Const Tensor");
+            return kTfLiteError;
+        }
+    }
+
     // For depthwise the weights layout is the same as for tflite [1, H, W, I*M]. No permutation required.
     auto filter = CreateConstTensor(&tfLiteFilterTensor, filterTensorInfo);
 
@@ -689,6 +733,14 @@ TfLiteStatus VisitTransposeConv2dOperator(DelegateData& delegateData,
                 parameters->padding);
 
     // Set up filter
+    if (!tflite::IsConstantTensor(&tfLiteFilterTensor))
+    {
+        TF_LITE_MAYBE_KERNEL_LOG(
+            tfLiteContext,
+            "tfLiteFilterTensor is not Const Tensor");
+        return kTfLiteError;
+    }
+
     auto filterTensor = CreateConstTensor(&tfLiteFilterTensor,
                                           filterTensorInfo,
                                           armnn::Optional<armnn::PermutationVector&>());
