From afa4e5a9ac51c59d0c8dfbd69b48babb6594dd48 Mon Sep 17 00:00:00 2001
From: Pankaj Maharana <pankaj.maharana@lge.com>
Date: Thu, 3 Oct 2019 17:05:37 +0530
Subject: [PATCH] waylandsink: remove unsupported subcompositor

MJ: a lot of conflicts from:
https://github.com/GStreamer/gstreamer/commit/062638a639f21e52230c8724fb57b89c14180b35 waylandsink: Rename occurrences of GstWaylandSink to 'self'
https://github.com/GStreamer/gstreamer/commit/8c3e33d4941e6e6796ab96bc966805c5b8b5f757 gstwayland: Move reusable parts of the waylandsink into a library

Upstream-Status: Pending
Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
---
 .../ext/wayland/gstwaylandsink.c              | 151 +++++++++++-
 .../ext/wayland/gstwaylandsink.h              |   4 +
 .../gst-libs/gst/wayland/gstwldisplay.c       |  17 +-
 .../gst-libs/gst/wayland/gstwlwindow.c        | 223 +++++-------------
 4 files changed, 208 insertions(+), 187 deletions(-)

diff --git a/subprojects/gst-plugins-bad/ext/wayland/gstwaylandsink.c b/subprojects/gst-plugins-bad/ext/wayland/gstwaylandsink.c
index 2f116bf5a1..1fc3ddabdf 100644
--- a/subprojects/gst-plugins-bad/ext/wayland/gstwaylandsink.c
+++ b/subprojects/gst-plugins-bad/ext/wayland/gstwaylandsink.c
@@ -193,6 +193,10 @@ gst_wayland_sink_init (GstWaylandSink * self)
 {
   g_mutex_init (&self->display_lock);
   g_mutex_init (&self->render_lock);
+
+  self->old_time = 0;
+  self->frame_cnt_in_sec = 0;
+  self->frame_count = 0;
 }
 
 static void
@@ -332,6 +336,7 @@ gst_wayland_sink_set_display_from_context (GstWaylandSink * self,
   GError *error = NULL;
 
   display = gst_wl_display_handle_context_get_handle (context);
+  GST_DEBUG_OBJECT (self, " wl_display = %p", display);
   self->display = gst_wl_display_new_existing (display, FALSE, &error);
 
   if (error) {
@@ -351,13 +356,19 @@ gst_wayland_sink_find_display (GstWaylandSink * self)
   GError *error = NULL;
   gboolean ret = TRUE;
 
+  GST_DEBUG_OBJECT (self, " gst_wayland_sink_find_display : Function Entry ");
+
   g_mutex_lock (&self->display_lock);
 
+  GST_DEBUG_OBJECT (self, " gst_wayland_sink_find_display : After g_mutex_lock ");
+
   if (!self->display) {
     /* first query upstream for the needed display handle */
     query = gst_query_new_context (GST_WL_DISPLAY_HANDLE_CONTEXT_TYPE);
+    GST_DEBUG_OBJECT (self, " gst_wayland_sink_find_display : First query upstream ");
     if (gst_pad_peer_query (GST_VIDEO_SINK_PAD (self), query)) {
       gst_query_parse_context (query, &context);
+      GST_DEBUG_OBJECT (self, " wl_display = %p", self->display);
       gst_wayland_sink_set_display_from_context (self, context);
     }
     gst_query_unref (query);
@@ -367,6 +378,8 @@ gst_wayland_sink_find_display (GstWaylandSink * self)
       msg = gst_message_new_need_context (GST_OBJECT_CAST (self),
           GST_WL_DISPLAY_HANDLE_CONTEXT_TYPE);
 
+      GST_DEBUG_OBJECT (self, "gst_wayland_sink_find_display : Ask Application for contect before mutex unlock");
+
       g_mutex_unlock (&self->display_lock);
       gst_element_post_message (GST_ELEMENT_CAST (self), msg);
       /* at this point we expect gst_wayland_sink_set_context
@@ -376,6 +389,9 @@ gst_wayland_sink_find_display (GstWaylandSink * self)
       if (!self->display) {
         /* if the application didn't set a display, let's create it ourselves */
         GST_OBJECT_LOCK (self);
+
+        GST_DEBUG_OBJECT (self, "gst_wayland_sink_find_display : before wl_display new");
+
         self->display = gst_wl_display_new (self->display_name, &error);
         GST_OBJECT_UNLOCK (self);
 
@@ -390,8 +406,11 @@ gst_wayland_sink_find_display (GstWaylandSink * self)
     }
   }
 
+  GST_DEBUG_OBJECT (self, "gst_wayland_sink_find_display : End of function before mutex unlock");
   g_mutex_unlock (&self->display_lock);
 
+  GST_DEBUG_OBJECT (self, "gst_wayland_sink_find_display : End of function after mutex unlock");
+
   return ret;
 }
 
@@ -403,18 +422,35 @@ gst_wayland_sink_change_state (GstElement * element, GstStateChange transition)
 
   switch (transition) {
     case GST_STATE_CHANGE_NULL_TO_READY:
+      GST_DEBUG_OBJECT (self, "GST_STATE_CHANGE_NULL_TO_READY");
       if (!gst_wayland_sink_find_display (self))
         return GST_STATE_CHANGE_FAILURE;
       break;
+    case GST_STATE_CHANGE_READY_TO_PAUSED:
+      GST_DEBUG_OBJECT (self, "GST_STATE_CHANGE_READY_TO_PAUSED");
+      if (self->display && gst_wl_display_get_display (self->display)) {
+        wl_display_flush (gst_wl_display_get_display (self->display));
+      }
+      break;
+    case GST_STATE_CHANGE_PAUSED_TO_PLAYING:
+      GST_DEBUG_OBJECT (self, "GST_STATE_CHANGE_PAUSED_TO_PLAYING");
+      break;
     default:
       break;
   }
 
   ret = GST_ELEMENT_CLASS (parent_class)->change_state (element, transition);
-  if (ret == GST_STATE_CHANGE_FAILURE)
-    return ret;
+  if (ret == GST_STATE_CHANGE_FAILURE){
+    GST_DEBUG_OBJECT (self, "change_state: Failed");
+     return ret;
+  } else {
+    GST_DEBUG_OBJECT (self, "change_state: Success");
+  }
 
   switch (transition) {
+    case GST_STATE_CHANGE_PLAYING_TO_PAUSED:
+      GST_DEBUG_OBJECT (self, "GST_STATE_CHANGE_PLAYING_TO_PAUSED");
+      break;
     case GST_STATE_CHANGE_PAUSED_TO_READY:
       gst_buffer_replace (&self->last_buffer, NULL);
       if (self->window) {
@@ -469,6 +505,7 @@ gst_wayland_sink_set_context (GstElement * element, GstContext * context)
     g_mutex_lock (&self->display_lock);
     if (G_LIKELY (!self->display)) {
       gst_wayland_sink_set_display_from_context (self, context);
+      GST_DEBUG_OBJECT (self, "display self->display = %p", self->display);
     } else {
       GST_WARNING_OBJECT (element, "changing display handle is not supported");
       g_mutex_unlock (&self->display_lock);
@@ -579,7 +616,7 @@ gst_wayland_sink_get_caps (GstBaseSink * bsink, GstCaps * filter)
 }
 
 static GstBufferPool *
-gst_wayland_create_pool (GstWaylandSink * self, GstCaps * caps)
+gst_wayland_sink_create_pool (GstWaylandSink * self, GstCaps * caps)
 {
   GstBufferPool *pool = NULL;
   GstStructure *structure;
@@ -602,12 +639,40 @@ gst_wayland_create_pool (GstWaylandSink * self, GstCaps * caps)
   return pool;
 }
 
+static gboolean
+gst_wayland_sink_post_video_info_message (GstWaylandSink * self,
+    GstVideoInfo * vinfo)
+{
+  g_return_val_if_fail (self != NULL, FALSE);
+  g_return_val_if_fail (vinfo != NULL, FALSE);
+
+  /*post updated video info message */
+  GST_DEBUG_OBJECT (self, "new width[%d] height[%d]",
+      GST_VIDEO_INFO_WIDTH (vinfo), GST_VIDEO_INFO_HEIGHT (vinfo));
+
+  /* post an application message as video-info */
+  gboolean ret = FALSE;
+  ret = gst_element_post_message (GST_ELEMENT_CAST (self),
+      gst_message_new_application (GST_OBJECT (self),
+          gst_structure_new ("video-info",
+              "width", G_TYPE_INT, GST_VIDEO_INFO_WIDTH (vinfo),
+              "height", G_TYPE_INT, GST_VIDEO_INFO_HEIGHT (vinfo),
+              "framerate", GST_TYPE_FRACTION, GST_VIDEO_INFO_FPS_N (vinfo),
+              GST_VIDEO_INFO_FPS_D (vinfo),
+              "par_w", G_TYPE_INT, GST_VIDEO_INFO_PAR_N (vinfo),
+              "par_h", G_TYPE_INT, GST_VIDEO_INFO_PAR_D (vinfo), NULL)));
+  return ret;
+}
+
+
+
 static gboolean
 gst_wayland_sink_set_caps (GstBaseSink * bsink, GstCaps * caps)
 {
   GstWaylandSink *self = GST_WAYLAND_SINK (bsink);;
   gboolean use_dmabuf;
   GstVideoFormat format;
+  GstBufferPool *newpool, *oldpool;
 
   GST_DEBUG_OBJECT (self, "set caps %" GST_PTR_FORMAT, caps);
 
@@ -619,9 +684,18 @@ gst_wayland_sink_set_caps (GstBaseSink * bsink, GstCaps * caps)
   self->video_info_changed = TRUE;
 
   /* create a new pool for the new caps */
-  if (self->pool)
-    gst_object_unref (self->pool);
-  self->pool = gst_wayland_create_pool (self, caps);
+  newpool = gst_wayland_sink_create_pool (self, caps);
+  if (!newpool)
+    goto no_pool;
+
+  /* we don't activate the internal pool yet as it may not be needed */
+  oldpool = self->pool;
+  self->pool = newpool;
+
+  if (oldpool) {
+    gst_buffer_pool_set_active (oldpool, FALSE);
+    gst_object_unref (oldpool);
+  }
 
   use_dmabuf = gst_caps_features_contains (gst_caps_get_features (caps, 0),
       GST_CAPS_FEATURE_MEMORY_DMABUF);
@@ -650,6 +724,13 @@ unsupported_format:
         gst_video_format_to_string (format));
     return FALSE;
   }
+no_pool:
+  {
+    GST_ERROR_OBJECT (self,
+        "Could not create new pool %" GST_PTR_FORMAT, caps);
+    return FALSE;
+  }
+
 }
 
 static gboolean
@@ -664,7 +745,7 @@ gst_wayland_sink_propose_allocation (GstBaseSink * bsink, GstQuery * query)
   gst_query_parse_allocation (query, &caps, &need_pool);
 
   if (need_pool)
-    pool = gst_wayland_create_pool (self, caps);
+    pool = gst_wayland_sink_create_pool (self, caps);
 
   gst_query_add_allocation_pool (query, pool, self->video_info.size, 2, 0);
   if (pool)
@@ -686,6 +767,7 @@ frame_redraw_callback (void *data, struct wl_callback *callback, uint32_t time)
   GST_LOG_OBJECT (self, "frame_redraw_cb");
 
   g_mutex_lock (&self->render_lock);
+  GST_LOG_OBJECT (self, "render_last_buffer : Setting self->redraw_pending = false in frame_redraw_callback");
   self->redraw_pending = FALSE;
 
   if (self->callback) {
@@ -705,14 +787,21 @@ render_last_buffer (GstWaylandSink * self, gboolean redraw)
 {
   GstWlBuffer *wlbuffer;
   const GstVideoInfo *info = NULL;
-  struct wl_surface *surface;
-  struct wl_callback *callback;
+  struct wl_surface *surface = NULL;
+  struct wl_callback *callback = NULL;
 
+  GST_LOG_OBJECT (self, "render_last_buffer : Entry");
   wlbuffer = gst_buffer_get_wl_buffer (self->display, self->last_buffer);
   surface = gst_wl_window_get_wl_surface (self->window);
 
+  if(surface != NULL)
+      GST_LOG_OBJECT (self, "render_last_buffer : surface = %p", surface);
+
+  GST_LOG_OBJECT (self, "render_last_buffer : Setting self->redraw_pending = true");
   self->redraw_pending = TRUE;
   callback = wl_surface_frame (surface);
+  if(callback!= NULL)
+      GST_LOG_OBJECT (self, "render_last_buffer : callback = %p", callback);
   self->callback = callback;
   wl_callback_add_listener (callback, &frame_callback_listener, self);
 
@@ -721,6 +810,7 @@ render_last_buffer (GstWaylandSink * self, gboolean redraw)
     self->video_info_changed = FALSE;
   }
   gst_wl_window_render (self->window, wlbuffer, info);
+  GST_LOG_OBJECT (self, "render_last_buffer : Exit");
 }
 
 static void
@@ -750,6 +840,18 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
   g_mutex_lock (&self->render_lock);
 
   GST_LOG_OBJECT (self, "render buffer %" GST_PTR_FORMAT "", buffer);
+  gint64 cur_time = 0;
+  self->frame_cnt_in_sec++;
+  cur_time = g_get_monotonic_time ();
+  if (GST_TIME_AS_MSECONDS (cur_time) != GST_TIME_AS_MSECONDS (self->old_time)) {
+    GST_INFO_OBJECT (self, "fps: %d", self->frame_cnt_in_sec);
+    self->frame_cnt_in_sec = 0;
+  }
+  self->old_time = cur_time;
+
+  GST_DEBUG_OBJECT (self, "Showing frame %d", self->frame_count);
+  self->frame_count++;
+
 
   if (G_UNLIKELY (!self->window)) {
     /* ask for window handle. Unlock render_lock while doing that because
@@ -757,8 +859,10 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
     g_mutex_unlock (&self->render_lock);
     gst_video_overlay_prepare_window_handle (GST_VIDEO_OVERLAY (self));
     g_mutex_lock (&self->render_lock);
+    GST_DEBUG_OBJECT (self, "Parmi : Inside G_UNLIKELY before checking window null");
 
     if (!self->window) {
+      GST_DEBUG_OBJECT (self, "Parmi : Inside G_UNLIKELY if  window is not null");
       /* if we were not provided a window, create one ourselves */
       self->window = gst_wl_window_new_toplevel (self->display,
           &self->video_info, self->fullscreen, &self->render_lock);
@@ -766,7 +870,25 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
           G_CALLBACK (on_window_closed), self, 0);
       gst_wl_window_set_rotate_method (self->window,
           self->current_rotate_method);
+    } else {
+      gint width;
+      GST_DEBUG_OBJECT (self, "Parmi : Inside G_UNLIKELY if  window is null");
+      /* set the initial size to be the same as the reported video size
+       * since the app does not pass the size even if it set window handle */
+      width = gst_util_uint64_scale_int_round (self->video_info.width,
+          self->video_info.par_n, self->video_info.par_d);
+      GST_DEBUG_OBJECT (self, "width =  %d, video_info = %dx%d", width, self->video_info.width, self->video_info.height);
+      gst_wl_window_set_render_rectangle (self->window, 0, 0, width,
+          self->video_info.height);
+    }
+
+    g_mutex_unlock (&self->render_lock);
+    if (!gst_wayland_sink_post_video_info_message (self, &self->video_info)){
+       GST_DEBUG_OBJECT (self, "Parmi : gst_wayland_sink_post_video_info_message is Failed hence goto Video_info_failed");
+      goto video_info_failed;
     }
+
+    g_mutex_lock (&self->render_lock);
   }
 
   /* drop buffers until we get a frame callback */
@@ -929,6 +1051,13 @@ no_window_size:
     ret = GST_FLOW_ERROR;
     goto done;
   }
+video_info_failed:
+  {
+    GST_ELEMENT_ERROR (self, CORE, NEGOTIATION, (NULL),
+        (self, "failed to post video info message!"));
+    goto done;
+  }
+
 no_buffer:
   {
     GST_WARNING_OBJECT (self, "could not create buffer");
@@ -1001,6 +1130,7 @@ gst_wayland_sink_set_window_handle (GstVideoOverlay * overlay, guintptr handle)
       (void *) handle);
 
   g_clear_object (&self->window);
+  GST_DEBUG_OBJECT (self, "self->window(%p), handle(%p)", self->window, handle);
 
   if (handle) {
     if (G_LIKELY (gst_wayland_sink_find_display (self))) {
@@ -1012,8 +1142,11 @@ gst_wayland_sink_set_window_handle (GstVideoOverlay * overlay, guintptr handle)
                 "an externally-supplied display handle. Consider providing a "
                 "display handle from your application with GstContext"));
       } else {
+        GST_WARNING_OBJECT (self, "gst_wayland_sink_set_window_handle : Before new_in_surface ");
         self->window = gst_wl_window_new_in_surface (self->display, surface,
             &self->render_lock);
+	GST_DEBUG_OBJECT (self, "gst_wayland_sink_find_display self->window %p",
+            self->window);
         gst_wl_window_set_rotate_method (self->window,
             self->current_rotate_method);
       }
diff --git a/subprojects/gst-plugins-bad/ext/wayland/gstwaylandsink.h b/subprojects/gst-plugins-bad/ext/wayland/gstwaylandsink.h
index 3243d8cd8f..0cff5d516a 100644
--- a/subprojects/gst-plugins-bad/ext/wayland/gstwaylandsink.h
+++ b/subprojects/gst-plugins-bad/ext/wayland/gstwaylandsink.h
@@ -67,6 +67,10 @@ struct _GstWaylandSink
   GstVideoOrientationMethod tag_rotate_method;
   GstVideoOrientationMethod current_rotate_method;
 
+  gint64 old_time;
+  gint frame_cnt_in_sec;
+  guint frame_count;
+
   struct wl_callback *callback;
 };
 
diff --git a/subprojects/gst-plugins-bad/gst-libs/gst/wayland/gstwldisplay.c b/subprojects/gst-plugins-bad/gst-libs/gst/wayland/gstwldisplay.c
index 1f83cb24b7..4ed3618179 100644
--- a/subprojects/gst-plugins-bad/gst-libs/gst/wayland/gstwldisplay.c
+++ b/subprojects/gst-plugins-bad/gst-libs/gst/wayland/gstwldisplay.c
@@ -44,7 +44,6 @@ typedef struct _GstWlDisplayPrivate
   /* globals */
   struct wl_registry *registry;
   struct wl_compositor *compositor;
-  struct wl_subcompositor *subcompositor;
   struct xdg_wm_base *xdg_wm_base;
   struct zwp_fullscreen_shell_v1 *fullscreen_shell;
   struct wl_shm *shm;
@@ -145,9 +144,6 @@ gst_wl_display_finalize (GObject * gobject)
   if (priv->compositor)
     wl_compositor_destroy (priv->compositor);
 
-  if (priv->subcompositor)
-    wl_subcompositor_destroy (priv->subcompositor);
-
   if (priv->registry)
     wl_registry_destroy (priv->registry);
 
@@ -255,13 +251,11 @@ registry_handle_global (void *data, struct wl_registry *registry,
 {
   GstWlDisplay *self = data;
   GstWlDisplayPrivate *priv = gst_wl_display_get_instance_private (self);
+  GST_DEBUG (" setup wayland interface : %s", interface);
 
   if (g_strcmp0 (interface, "wl_compositor") == 0) {
     priv->compositor = wl_registry_bind (registry, id, &wl_compositor_interface,
         MIN (version, 4));
-  } else if (g_strcmp0 (interface, "wl_subcompositor") == 0) {
-    priv->subcompositor =
-        wl_registry_bind (registry, id, &wl_subcompositor_interface, 1);
   } else if (g_strcmp0 (interface, "xdg_wm_base") == 0) {
     priv->xdg_wm_base =
         wl_registry_bind (registry, id, &xdg_wm_base_interface, 1);
@@ -391,7 +385,6 @@ gst_wl_display_new_existing (struct wl_display * display,
   }
 
   VERIFY_INTERFACE_EXISTS (compositor, "wl_compositor");
-  VERIFY_INTERFACE_EXISTS (subcompositor, "wl_subcompositor");
   VERIFY_INTERFACE_EXISTS (shm, "wl_shm");
 
 #undef VERIFY_INTERFACE_EXISTS
@@ -494,14 +487,6 @@ gst_wl_display_get_compositor (GstWlDisplay * self)
   return priv->compositor;
 }
 
-struct wl_subcompositor *
-gst_wl_display_get_subcompositor (GstWlDisplay * self)
-{
-  GstWlDisplayPrivate *priv = gst_wl_display_get_instance_private (self);
-
-  return priv->subcompositor;
-}
-
 struct xdg_wm_base *
 gst_wl_display_get_xdg_wm_base (GstWlDisplay * self)
 {
diff --git a/subprojects/gst-plugins-bad/gst-libs/gst/wayland/gstwlwindow.c b/subprojects/gst-plugins-bad/gst-libs/gst/wayland/gstwlwindow.c
index 0023d4ea5a..41f6629c9f 100644
--- a/subprojects/gst-plugins-bad/gst-libs/gst/wayland/gstwlwindow.c
+++ b/subprojects/gst-plugins-bad/gst-libs/gst/wayland/gstwlwindow.c
@@ -40,13 +40,9 @@ typedef struct _GstWlWindowPrivate
   GMutex *render_lock;
 
   GstWlDisplay *display;
-  struct wl_surface *area_surface;
-  struct wl_surface *area_surface_wrapper;
-  struct wl_subsurface *area_subsurface;
-  struct wp_viewport *area_viewport;
+
   struct wl_surface *video_surface;
   struct wl_surface *video_surface_wrapper;
-  struct wl_subsurface *video_subsurface;
   struct wp_viewport *video_viewport;
   struct xdg_surface *xdg_surface;
   struct xdg_toplevel *xdg_toplevel;
@@ -71,6 +67,10 @@ typedef struct _GstWlWindowPrivate
   /* when this is not set both the area_surface and the video_surface are not
    * visible and certain steps should be skipped */
   gboolean is_area_surface_mapped;
+
+  /* this will be set when video_surface is created internal from
+   * +   * wayland compositor and not passed from external app */
+  gboolean internal_surface;
 } GstWlWindowPrivate;
 
 G_DEFINE_TYPE_WITH_CODE (GstWlWindow, gst_wl_window, G_TYPE_OBJECT,
@@ -170,6 +170,7 @@ gst_wl_window_init (GstWlWindow * self)
   GstWlWindowPrivate *priv = gst_wl_window_get_instance_private (self);
 
   priv->configured = TRUE;
+  priv->internal_surface = FALSE;
   g_cond_init (&priv->configure_cond);
   g_mutex_init (&priv->configure_mutex);
 }
@@ -189,17 +190,9 @@ gst_wl_window_finalize (GObject * gobject)
     wp_viewport_destroy (priv->video_viewport);
 
   wl_proxy_wrapper_destroy (priv->video_surface_wrapper);
-  wl_subsurface_destroy (priv->video_subsurface);
-  wl_surface_destroy (priv->video_surface);
-
-  if (priv->area_subsurface)
-    wl_subsurface_destroy (priv->area_subsurface);
-
-  if (priv->area_viewport)
-    wp_viewport_destroy (priv->area_viewport);
 
-  wl_proxy_wrapper_destroy (priv->area_surface_wrapper);
-  wl_surface_destroy (priv->area_surface);
+  if (priv->internal_surface)
+    wl_surface_destroy (priv->video_surface);
 
   g_clear_object (&priv->display);
 
@@ -207,7 +200,8 @@ gst_wl_window_finalize (GObject * gobject)
 }
 
 static GstWlWindow *
-gst_wl_window_new_internal (GstWlDisplay * display, GMutex * render_lock)
+gst_wl_window_new_internal (GstWlDisplay * display,
+    struct wl_surface *surface, GMutex * render_lock)
 {
   GstWlWindow *self;
   GstWlWindowPrivate *priv;
@@ -216,6 +210,8 @@ gst_wl_window_new_internal (GstWlDisplay * display, GMutex * render_lock)
   struct wl_region *region;
   struct wp_viewporter *viewporter;
 
+  GST_DEBUG ("gst_wl_window_new_internal : Entry Function ");
+
   self = g_object_new (GST_TYPE_WL_WINDOW, NULL);
   priv = gst_wl_window_get_instance_private (self);
   priv->display = g_object_ref (display);
@@ -223,36 +219,34 @@ gst_wl_window_new_internal (GstWlDisplay * display, GMutex * render_lock)
   g_cond_init (&priv->configure_cond);
 
   compositor = gst_wl_display_get_compositor (display);
-  priv->area_surface = wl_compositor_create_surface (compositor);
-  priv->video_surface = wl_compositor_create_surface (compositor);
+  priv->video_surface = surface;
+  if (!priv->video_surface) {
+    GST_DEBUG ("gst_wl_window_new_internal : !priv->video_surface");
+    priv->video_surface = wl_compositor_create_surface (compositor);
+    priv->internal_surface = TRUE;
+  }
+ 
+  GST_DEBUG ("gst_wl_window_new_internal : priv->video_surface_wrapper");
 
-  priv->area_surface_wrapper = wl_proxy_create_wrapper (priv->area_surface);
   priv->video_surface_wrapper = wl_proxy_create_wrapper (priv->video_surface);
 
   event_queue = gst_wl_display_get_event_queue (display);
-  wl_proxy_set_queue ((struct wl_proxy *) priv->area_surface_wrapper,
-      event_queue);
   wl_proxy_set_queue ((struct wl_proxy *) priv->video_surface_wrapper,
       event_queue);
 
-  /* embed video_surface in area_surface */
-  priv->video_subsurface =
-      wl_subcompositor_get_subsurface (gst_wl_display_get_subcompositor
-      (display), priv->video_surface, priv->area_surface);
-  wl_subsurface_set_desync (priv->video_subsurface);
-
   viewporter = gst_wl_display_get_viewporter (display);
   if (viewporter) {
-    priv->area_viewport = wp_viewporter_get_viewport (viewporter,
-        priv->area_surface);
+    GST_DEBUG ("gst_wl_window_new_internal : display->viewporter");
     priv->video_viewport = wp_viewporter_get_viewport (viewporter,
         priv->video_surface);
   }
 
   /* never accept input events on the video surface */
+  GST_DEBUG ("gst_wl_window_new_internal : Before creating region");
   region = wl_compositor_create_region (compositor);
   wl_surface_set_input_region (priv->video_surface, region);
   wl_region_destroy (region);
+  GST_DEBUG ("gst_wl_window_new_internal : After destroying region");
 
   return self;
 }
@@ -280,7 +274,7 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
   struct xdg_wm_base *xdg_wm_base;
   struct zwp_fullscreen_shell_v1 *fullscreen_shell;
 
-  self = gst_wl_window_new_internal (display, render_lock);
+  self = gst_wl_window_new_internal (display, NULL, render_lock);
   priv = gst_wl_window_get_instance_private (self);
 
   xdg_wm_base = gst_wl_display_get_xdg_wm_base (display);
@@ -292,7 +286,7 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
 
     /* First create the XDG surface */
     priv->xdg_surface = xdg_wm_base_get_xdg_surface (xdg_wm_base,
-        priv->area_surface);
+        priv->video_surface);
     if (!priv->xdg_surface) {
       GST_ERROR ("Unable to get xdg_surface");
       goto error;
@@ -312,7 +306,7 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
 
     /* Finally, commit the xdg_surface state as toplevel */
     priv->configured = FALSE;
-    wl_surface_commit (priv->area_surface);
+    wl_surface_commit (priv->video_surface);
     wl_display_flush (gst_wl_display_get_display (display));
 
     g_mutex_lock (&priv->configure_mutex);
@@ -327,7 +321,7 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
     g_mutex_unlock (&priv->configure_mutex);
   } else if (fullscreen_shell) {
     zwp_fullscreen_shell_v1_present_surface (fullscreen_shell,
-        priv->area_surface, ZWP_FULLSCREEN_SHELL_V1_PRESENT_METHOD_ZOOM, NULL);
+        priv->video_surface, ZWP_FULLSCREEN_SHELL_V1_PRESENT_METHOD_ZOOM, NULL);
   } else {
     GST_ERROR ("Unable to use either xdg_wm_base or zwp_fullscreen_shell.");
     goto error;
@@ -357,20 +351,17 @@ gst_wl_window_new_in_surface (GstWlDisplay * display,
   GstWlWindowPrivate *priv;
   struct wl_region *region;
 
-  self = gst_wl_window_new_internal (display, render_lock);
-  priv = gst_wl_window_get_instance_private (self);
+  GST_DEBUG ("gst_wl_window_new_in_surface : Before");
 
-  /* do not accept input events on the area surface when embedded */
+  /* do not accept input events on the area surface when embedded
   region =
       wl_compositor_create_region (gst_wl_display_get_compositor (display));
-  wl_surface_set_input_region (priv->area_surface, region);
-  wl_region_destroy (region);
+  wl_surface_set_input_region (priv->video_surface, region);
+  wl_region_destroy (region); */
 
-  /* embed in parent */
-  priv->area_subsurface =
-      wl_subcompositor_get_subsurface (gst_wl_display_get_subcompositor
-      (display), priv->area_surface, parent);
-  wl_subsurface_set_desync (priv->area_subsurface);
+  GST_DEBUG ("gst_wl_window_new_in_surface : Before Window new internal ");
+  self = gst_wl_window_new_internal (display, parent, render_lock);
+  GST_DEBUG ("gst_wl_window_new_in_surface : After Window new internal ");
 
   wl_surface_commit (parent);
 
@@ -399,17 +390,6 @@ gst_wl_window_get_wl_surface (GstWlWindow * self)
   return priv->video_surface_wrapper;
 }
 
-struct wl_subsurface *
-gst_wl_window_get_subsurface (GstWlWindow * self)
-{
-  GstWlWindowPrivate *priv;
-
-  g_return_val_if_fail (self != NULL, NULL);
-
-  priv = gst_wl_window_get_instance_private (self);
-  return priv->area_subsurface;
-}
-
 gboolean
 gst_wl_window_is_toplevel (GstWlWindow * self)
 {
@@ -425,6 +405,7 @@ static void
 gst_wl_window_resize_video_surface (GstWlWindow * self, gboolean commit)
 {
   GstWlWindowPrivate *priv = gst_wl_window_get_instance_private (self);
+  struct wl_region *region;
   GstVideoRectangle src = { 0, };
   GstVideoRectangle dst = { 0, };
   GstVideoRectangle res;
@@ -460,12 +441,18 @@ gst_wl_window_resize_video_surface (GstWlWindow * self, gboolean commit)
     gst_video_center_rect (&src, &dst, &res, FALSE);
   }
 
-  wl_subsurface_set_position (priv->video_subsurface, res.x, res.y);
   wl_surface_set_buffer_transform (priv->video_surface_wrapper,
       priv->buffer_transform);
 
-  if (commit)
+  if (commit) {
     wl_surface_commit (priv->video_surface_wrapper);
+    /* Added extra for testing
+    region = wl_compositor_create_region (priv->display->compositor);
+     wl_region_add (region, 0, 0, priv->render_rectangle.w,
+         priv->render_rectangle.h);
+    wl_surface_set_input_region (priv->video_surface, region);
+               wl_region_destroy (region); */
+  }
 
   priv->video_rectangle = res;
 }
@@ -477,12 +464,7 @@ gst_wl_window_set_opaque (GstWlWindow * self, const GstVideoInfo * info)
   struct wl_compositor *compositor;
   struct wl_region *region;
 
-  /* Set area opaque */
   compositor = gst_wl_display_get_compositor (priv->display);
-  region = wl_compositor_create_region (compositor);
-  wl_region_add (region, 0, 0, G_MAXINT32, G_MAXINT32);
-  wl_surface_set_opaque_region (priv->area_surface, region);
-  wl_region_destroy (region);
 
   if (!GST_VIDEO_INFO_HAS_ALPHA (info)) {
     /* Set video opaque */
@@ -505,20 +487,22 @@ gst_wl_window_render (GstWlWindow * self, GstWlBuffer * buffer,
     priv->video_width = info->width;
     priv->video_height = info->height;
 
-    wl_subsurface_set_sync (priv->video_subsurface);
     gst_wl_window_resize_video_surface (self, FALSE);
     gst_wl_window_set_opaque (self, info);
   }
 
   if (G_LIKELY (buffer)) {
     gst_wl_buffer_attach (buffer, priv->video_surface_wrapper);
-    wl_surface_damage_buffer (priv->video_surface_wrapper, 0, 0, G_MAXINT32,
-        G_MAXINT32);
+    /*wl_surface_damage_buffer (priv->video_surface_wrapper, 0, 0, G_MAXINT32,
+        G_MAXINT32); */
+    /* wl_surface_commit (priv->video_surface_wrapper); */
+    wl_surface_damage (priv->video_surface_wrapper, 0, 0,
+      priv->video_rectangle.w, priv->video_rectangle.h);
     wl_surface_commit (priv->video_surface_wrapper);
 
+    /* Call disabled gst_wl_window_update_borders (window); */
     if (!priv->is_area_surface_mapped) {
-      gst_wl_window_update_borders (self);
-      wl_surface_commit (priv->area_surface_wrapper);
+      wl_surface_commit (priv->video_surface_wrapper);
       priv->is_area_surface_mapped = TRUE;
       g_signal_emit (self, signals[MAP], 0);
     }
@@ -526,106 +510,12 @@ gst_wl_window_render (GstWlWindow * self, GstWlBuffer * buffer,
     /* clear both video and parent surfaces */
     wl_surface_attach (priv->video_surface_wrapper, NULL, 0, 0);
     wl_surface_commit (priv->video_surface_wrapper);
-    wl_surface_attach (priv->area_surface_wrapper, NULL, 0, 0);
-    wl_surface_commit (priv->area_surface_wrapper);
     priv->is_area_surface_mapped = FALSE;
   }
 
-  if (G_UNLIKELY (info)) {
-    /* commit also the parent (area_surface) in order to change
-     * the position of the video_subsurface */
-    wl_surface_commit (priv->area_surface_wrapper);
-    wl_subsurface_set_desync (priv->video_subsurface);
-  }
-
   wl_display_flush (gst_wl_display_get_display (priv->display));
 }
 
-/* Update the buffer used to draw black borders. When we have viewporter
- * support, this is a scaled up 1x1 image, and without we need an black image
- * the size of the rendering areay. */
-static void
-gst_wl_window_update_borders (GstWlWindow * self)
-{
-  GstWlWindowPrivate *priv = gst_wl_window_get_instance_private (self);
-  GstVideoFormat format;
-  GstVideoInfo info;
-  gint width, height;
-  GstBuffer *buf;
-  struct wl_buffer *wlbuf;
-  GstWlBuffer *gwlbuf;
-  GstAllocator *alloc;
-
-  if (gst_wl_display_get_viewporter (priv->display)) {
-    wp_viewport_set_destination (priv->area_viewport,
-        priv->render_rectangle.w, priv->render_rectangle.h);
-
-    if (priv->is_area_surface_mapped) {
-      /* The area_surface is already visible and only needed to get resized.
-       * We don't need to attach a new buffer and are done here. */
-      return;
-    }
-  }
-
-  if (gst_wl_display_get_viewporter (priv->display)) {
-    width = height = 1;
-  } else {
-    width = priv->render_rectangle.w;
-    height = priv->render_rectangle.h;
-  }
-
-  /* we want WL_SHM_FORMAT_XRGB8888 */
-  format = GST_VIDEO_FORMAT_BGRx;
-
-  /* draw the area_subsurface */
-  gst_video_info_set_format (&info, format, width, height);
-
-  alloc = gst_wl_shm_allocator_get ();
-
-  buf = gst_buffer_new_allocate (alloc, info.size, NULL);
-  gst_buffer_memset (buf, 0, 0, info.size);
-  wlbuf =
-      gst_wl_shm_memory_construct_wl_buffer (gst_buffer_peek_memory (buf, 0),
-      priv->display, &info);
-  gwlbuf = gst_buffer_add_wl_buffer (buf, wlbuf, priv->display);
-  gst_wl_buffer_attach (gwlbuf, priv->area_surface_wrapper);
-  wl_surface_damage_buffer (priv->area_surface_wrapper, 0, 0, G_MAXINT32,
-      G_MAXINT32);
-
-  /* at this point, the GstWlBuffer keeps the buffer
-   * alive and will free it on wl_buffer::release */
-  gst_buffer_unref (buf);
-  g_object_unref (alloc);
-}
-
-static void
-gst_wl_window_update_geometry (GstWlWindow * self)
-{
-  GstWlWindowPrivate *priv = gst_wl_window_get_instance_private (self);
-
-  /* position the area inside the parent - needs a parent commit to apply */
-  if (priv->area_subsurface) {
-    wl_subsurface_set_position (priv->area_subsurface, priv->render_rectangle.x,
-        priv->render_rectangle.y);
-  }
-
-  if (priv->is_area_surface_mapped)
-    gst_wl_window_update_borders (self);
-
-  if (!priv->configured)
-    return;
-
-  if (priv->scaled_width != 0) {
-    wl_subsurface_set_sync (priv->video_subsurface);
-    gst_wl_window_resize_video_surface (self, TRUE);
-  }
-
-  wl_surface_commit (priv->area_surface_wrapper);
-
-  if (priv->scaled_width != 0)
-    wl_subsurface_set_desync (priv->video_subsurface);
-}
-
 void
 gst_wl_window_set_render_rectangle (GstWlWindow * self, gint x, gint y,
     gint w, gint h)
@@ -641,7 +531,16 @@ gst_wl_window_set_render_rectangle (GstWlWindow * self, gint x, gint y,
   priv->render_rectangle.w = w;
   priv->render_rectangle.h = h;
 
-  gst_wl_window_update_geometry (self);
+  if (priv->video_viewport)
+    wp_viewport_set_destination (priv->video_viewport, w, h);
+  if (!priv->configured)
+    return;
+
+  if (priv->video_width != 0) {
+    gst_wl_window_resize_video_surface (self, TRUE);
+  }
+  wl_surface_damage (priv->video_surface_wrapper, 0, 0, w, h);
+  wl_surface_commit (priv->video_surface_wrapper);
 }
 
 const GstVideoRectangle *
@@ -685,5 +584,5 @@ gst_wl_window_set_rotate_method (GstWlWindow * self,
 
   priv->buffer_transform = output_transform_from_orientation_method (method);
 
-  gst_wl_window_update_geometry (self);
+  //gst_wl_window_update_geometry (self);
 }
