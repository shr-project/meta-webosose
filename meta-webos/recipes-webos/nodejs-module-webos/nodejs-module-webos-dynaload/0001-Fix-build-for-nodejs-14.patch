From 7924002ce9c80a7c24645e3332a6bebdd3735632 Mon Sep 17 00:00:00 2001
From: Christophe Chapuis <chris.chapuis@gmail.com>
Date: Tue, 26 Oct 2021 20:08:33 +0000
Subject: [PATCH] Fix build for nodejs-14

Signed-off-by: Christophe Chapuis <chris.chapuis@gmail.com>

Imported from LuneOS:
https://github.com/webOS-ports/nodejs-module-webos-dynaload/commit/ab87a7f2c59e96ec91360f3d4a1bc82f42594d6a
---
 src/external_string.cpp |  6 +--
 src/node_webos.cpp      | 84 +++++++++++++++++++++--------------------
 2 files changed, 46 insertions(+), 44 deletions(-)

diff --git a/src/external_string.cpp b/src/external_string.cpp
index a3a731e..55a9dd8 100644
--- a/src/external_string.cpp
+++ b/src/external_string.cpp
@@ -56,7 +56,7 @@ v8::Local<v8::String> createV8StringFromFile(const char* inPathToFile)
 	// exception and throw a runtime exception with a less boost-flavored message.
 	boost::uintmax_t fileSize = bf::file_size(pathToFile);
 	if (fileSize == 0) {
-		return String::NewFromUtf8(v8::Isolate::GetCurrent(), "");
+		return String::NewFromUtf8(v8::Isolate::GetCurrent(), "").ToLocalChecked();
 	}
 	bi::file_mapping mappedFile(inPathToFile, bi::read_only);
 	bi::mapped_region region(mappedFile, bi::read_only);
@@ -71,7 +71,7 @@ v8::Local<v8::String> createV8StringFromFile(const char* inPathToFile)
 	}
 	// Let v8 do its normal string conversion. This should be a rare case, as there's
 	// no good reason for a JavaScript source file to have anything but ASCII.
-    return String::NewFromUtf8(v8::Isolate::GetCurrent(), startPtr);
+    return String::NewFromUtf8(v8::Isolate::GetCurrent(), startPtr).ToLocalChecked();
 }
 
 // Wrapper function to create a v8 external string.
@@ -79,7 +79,7 @@ v8::Local<v8::String> MappedRegionExternalString::create(const char* pathToFile)
 {
 	Isolate* isolate = Isolate::GetCurrent();
 	MappedRegionExternalString* extString = new MappedRegionExternalString(pathToFile);
-	return String::NewExternal(isolate, extString);
+	return String::NewExternalOneByte(isolate, extString).ToLocalChecked();
 }
 
 // The boost constructors do all the hard work of mapping the region and unmapping it when this object is destroyed.
diff --git a/src/node_webos.cpp b/src/node_webos.cpp
index 984d39a..a099972 100644
--- a/src/node_webos.cpp
+++ b/src/node_webos.cpp
@@ -33,24 +33,24 @@ static void SetFileAndDirectoryGlobals(Local<Object> global, const char* path)
 	v8::Isolate* isolate = v8::Isolate::GetCurrent();
 	bf::path pathToFile(bf::system_complete(bf::path(path)));
 	bf::path pathToParentDir(pathToFile.parent_path());
-	Local<String> fileName = v8::String::NewFromUtf8(isolate, pathToFile.string().c_str());
-	global->Set(
-		v8::String::NewFromUtf8(isolate, kFileNameGlobal, v8::String::kInternalizedString),
+	Local<String> fileName = v8::String::NewFromUtf8(isolate, pathToFile.string().c_str()).ToLocalChecked();
+	global->Set(isolate->GetCurrentContext(),
+		v8::String::NewFromUtf8(isolate, kFileNameGlobal, v8::NewStringType::kInternalized).ToLocalChecked(),
 		fileName);
-	Local<String> dirName = v8::String::NewFromUtf8(isolate, pathToParentDir.string().c_str());
-	global->Set(
-		v8::String::NewFromUtf8(isolate, kDirNameGlobal, v8::String::kInternalizedString),
+	Local<String> dirName = v8::String::NewFromUtf8(isolate, pathToParentDir.string().c_str()).ToLocalChecked();
+	global->Set(isolate->GetCurrentContext(),
+		v8::String::NewFromUtf8(isolate, kDirNameGlobal, v8::NewStringType::kInternalized).ToLocalChecked(),
 		dirName);
 }
 
 static void ClearFileAndDirectoryGlobals(Local<Object> global)
 {
 	v8::Isolate* isolate = v8::Isolate::GetCurrent();
-	global->Set(
-		v8::String::NewFromUtf8(isolate, kFileNameGlobal, v8::String::kInternalizedString),
+	global->Set(isolate->GetCurrentContext(),
+		v8::String::NewFromUtf8(isolate, kFileNameGlobal, v8::NewStringType::kInternalized).ToLocalChecked(),
 		v8::Undefined(isolate));
-	global->Set(
-		v8::String::NewFromUtf8(isolate, kDirNameGlobal, v8::String::kInternalizedString),
+	global->Set(isolate->GetCurrentContext(),
+		v8::String::NewFromUtf8(isolate, kDirNameGlobal, v8::NewStringType::kInternalized).ToLocalChecked(),
 		v8::Undefined(isolate));
 }
 
@@ -63,14 +63,14 @@ Local<Value> IncludeScript(char const * pathToScriptSource, bool& exceptionOccur
 	v8::Isolate* isolate = v8::Isolate::GetCurrent();
 	if(!pathToScriptSource || !*pathToScriptSource ) {
         return isolate->ThrowException(v8::Exception::Error(
-            v8::String::NewFromUtf8(isolate, "webOS 'include' requires a non-empty filename argument.")));
+            v8::String::NewFromUtf8(isolate, "webOS 'include' requires a non-empty filename argument.").ToLocalChecked()));
 	}
 	EscapableHandleScope scope(isolate);
 	Local<Value> returnValue = Undefined(isolate);
 	Local<String> scriptSource = createV8StringFromFile(pathToScriptSource);
 	Local<Context> currentContext = isolate->GetCurrentContext();
-	Local<Script> compiledScript = Script::Compile(currentContext,
-                                                  String::NewFromUtf8(isolate, pathToScriptSource)).ToLocalChecked();
+	ScriptOrigin *scriptOrigin = new ScriptOrigin(String::NewFromUtf8(isolate, pathToScriptSource).ToLocalChecked());
+	Local<Script> compiledScript(Script::Compile(currentContext, scriptSource, scriptOrigin).ToLocalChecked());
 	if(compiledScript.IsEmpty()) {
 		return returnValue;
 	}
@@ -93,7 +93,7 @@ void IncludeScriptWrapper( const v8::FunctionCallbackInfo<v8::Value> & arguments
     v8::Isolate* isolate = arguments.GetIsolate();
     if (arguments.Length() != 1) {
         arguments.GetReturnValue().Set(isolate->ThrowException(v8::Exception::Error(
-            v8::String::NewFromUtf8(isolate, "Invalid number of parameters, 1 expected."))));
+            v8::String::NewFromUtf8(isolate, "Invalid number of parameters, 1 expected.").ToLocalChecked())));
         return;
     }
     try {
@@ -103,19 +103,21 @@ void IncludeScriptWrapper( const v8::FunctionCallbackInfo<v8::Value> & arguments
 		arguments.GetReturnValue().Set(IncludeScript(*fileName, exceptionOccurred));
     } catch( std::exception const & ex ) {
         arguments.GetReturnValue().Set(isolate->ThrowException(v8::Exception::Error(
-            v8::String::NewFromUtf8(isolate, ex.what()))));
+            v8::String::NewFromUtf8(isolate, ex.what()).ToLocalChecked())));
     } catch( ... ) {
         arguments.GetReturnValue().Set(isolate->ThrowException(v8::Exception::Error(
-            v8::String::NewFromUtf8(isolate, "Native function threw an unknown exception."))));
+            v8::String::NewFromUtf8(isolate, "Native function threw an unknown exception.").ToLocalChecked())));
     }
 }
 
 static void CopyProperty(const Local<Object>& src, const Local<Object>& dst, const char* propertyName)
 {
     v8::Isolate* isolate = v8::Isolate::GetCurrent();
-    Local<String> pName(v8::String::NewFromUtf8(isolate, propertyName, v8::String::kInternalizedString));
-	Local<Value> v = src->Get(pName);
-	dst->Set(pName, v);
+    Local<String> pName(v8::String::NewFromUtf8(isolate, propertyName, v8::NewStringType::kInternalized).ToLocalChecked());
+    Local<Value> v;
+    if(src->Get(isolate->GetCurrentContext(), pName).ToLocal(&v)) {
+	dst->Set(isolate->GetCurrentContext(), pName, v);
+    }
 }
 
 // Function that creates a new JavaScript context and loads, compiles and executes a list of source
@@ -147,29 +149,29 @@ static Local<Value> Require(const Local<Value>& nativeRequire, const Local<Value
 	Local<ObjectTemplate> exportsTemplate = ObjectTemplate::New(isolate);
 	Local<Object> exportsInstance = exportsTemplate->NewInstance(currentContext).ToLocalChecked();;
 	Local<Object> global = localUtilityContext->Global();
-	global->Set(
+	global->Set(currentContext,
             v8::String::NewFromUtf8(
-                isolate, "exports",    v8::String::kInternalizedString),
+                isolate, "exports",    v8::NewStringType::kInternalized).ToLocalChecked(),
             exportsInstance);
-	global->Set(
+	global->Set(currentContext,
             v8::String::NewFromUtf8(
-                isolate, "global",     v8::String::kInternalizedString),
+                isolate, "global",     v8::NewStringType::kInternalized).ToLocalChecked(),
             global);
-	global->Set(
+	global->Set(currentContext,
             v8::String::NewFromUtf8(
-                isolate, "globals",    v8::String::kInternalizedString),
+                isolate, "globals",    v8::NewStringType::kInternalized).ToLocalChecked(),
             currentGlobal);
-	global->Set(
+	global->Set(currentContext,
             v8::String::NewFromUtf8(
-                isolate, "root",       v8::String::kInternalizedString),
+                isolate, "root",       v8::NewStringType::kInternalized).ToLocalChecked(),
             currentGlobal);
-	global->Set(
+	global->Set(currentContext,
             v8::String::NewFromUtf8(
-                isolate, "MojoLoader", v8::String::kInternalizedString),
+                isolate, "MojoLoader", v8::NewStringType::kInternalized).ToLocalChecked(),
             loader);
-	global->Set(
+	global->Set(currentContext,
             v8::String::NewFromUtf8(
-                isolate, "require",    v8::String::kInternalizedString),
+                isolate, "require",    v8::NewStringType::kInternalized).ToLocalChecked(),
             nativeRequire);
 	
 	// copy a number of useful properties from the loading node context.
@@ -182,10 +184,10 @@ static Local<Value> Require(const Local<Value>& nativeRequire, const Local<Value
 	// load the list of files, stopping if any produce an error
 	uint32_t length = filePaths->Length();
 	for(uint32_t i = 0; i < length; ++i) {
-		Local<Value> fileNameObject(filePaths->Get(i));
+		Local<Value> fileNameObject(filePaths->Get(currentContext, i).ToLocalChecked());
 		if (!fileNameObject->IsString()) {
-            return isolate->ThrowException(v8::Exception::Error(
-                    v8::String::NewFromUtf8(isolate, "All elements of file paths array must be strings.")));
+		    return isolate->ThrowException(v8::Exception::Error(
+			    v8::String::NewFromUtf8(isolate, "All elements of file paths array must be strings.").ToLocalChecked()));
 		}
 		Isolate* isolate = v8::Isolate::GetCurrent();
 		v8::String::Utf8Value fileName(isolate, fileNameObject);
@@ -205,17 +207,17 @@ static void RequireWrapper(const v8::FunctionCallbackInfo<v8::Value>& arguments)
     Isolate* isolate = Isolate::GetCurrent();
     if (arguments.Length() != 3) {
         arguments.GetReturnValue().Set(isolate->ThrowException(Exception::Error(
-                                  String::NewFromUtf8(isolate, "Invalid number of parameters, 3 expected."))));
+                                  String::NewFromUtf8(isolate, "Invalid number of parameters, 3 expected.").ToLocalChecked())));
         return;
     }
 	if (!arguments[0]->IsFunction()) {
         arguments.GetReturnValue().Set(isolate->ThrowException(Exception::Error(
-                              String::NewFromUtf8(isolate, "Argument 2 must be an function."))));
+                              String::NewFromUtf8(isolate, "Argument 2 must be an function.").ToLocalChecked())));
         return;
 	}
 	if (!arguments[2]->IsArray()) {
         arguments.GetReturnValue().Set(isolate->ThrowException(Exception::Error(
-                              String::NewFromUtf8(isolate, "Argument 3 must be an array."))));
+                              String::NewFromUtf8(isolate, "Argument 3 must be an array.").ToLocalChecked())));
         return;
 	}
 	Local<Array> fileList = Local<Array>::Cast(arguments[2]);
@@ -229,12 +231,12 @@ void init(Local<Object> target)
 	Local<Context> currentContext = isolate->GetCurrentContext();
     HandleScope scope(isolate);
     Local<FunctionTemplate> includeTemplate = FunctionTemplate::New(isolate, IncludeScriptWrapper);
-    target->Set(
-        v8::String::NewFromUtf8(isolate, "include",  v8::String::kInternalizedString),
+    target->Set(currentContext,
+        v8::String::NewFromUtf8(isolate, "include", v8::NewStringType::kInternalized).ToLocalChecked(),
         includeTemplate->GetFunction(currentContext).ToLocalChecked());
     Local<FunctionTemplate> requireTemplate = FunctionTemplate::New(isolate, RequireWrapper);
-    target->Set(
-        v8::String::NewFromUtf8(isolate, "require", v8::String::kInternalizedString),
+    target->Set(currentContext,
+        v8::String::NewFromUtf8(isolate, "require", v8::NewStringType::kInternalized).ToLocalChecked(),
         requireTemplate->GetFunction(currentContext).ToLocalChecked());
 }
 
